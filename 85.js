/*! For license information please see 85.js.LICENSE.txt */
(self.webpackChunk_dev_web=self.webpackChunk_dev_web||[]).push([[85],{7209:(e,t,n)=>{"use strict";n.d(t,{H:()=>a});var r=n(4656);function a(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&r.util.assert("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the CPU backend.`))}))}},1534:(e,t,n)=>{"use strict";n.d(t,{P6:()=>i});var r=n(4656),a=n(7209);const s=r.kernel_impls.whereImpl;class o extends r.KernelBackend{constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new r.DataStorage(this,(0,r.engine)())}nextDataId(){return o.nextDataId++}write(e,t,n){this.firstUse&&(this.firstUse=!1,(0,r.env)().get("IS_NODE")&&r.backend_util.warn("\n============================\nHi, looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, visit https://github.com/tensorflow/tfjs-node for more details. \n============================"));const a={id:this.nextDataId()};return this.data.set(a,{values:e,dtype:n,refCount:1}),a}makeTensorInfo(e,t,n){let a;if("string"===t&&null!=n&&n.length>0&&r.util.isString(n[0])){const s=n.map((e=>r.util.encodeString(e)));a=this.write(s,e,t)}else a=this.write(n,e,t);return{dataId:a,shape:e,dtype:t}}refCount(e){return this.data.has(e)?this.data.get(e).refCount:0}incRef(e){this.data.get(e).refCount++}decRef(e){this.data.has(e)&&this.data.get(e).refCount--}move(e,t,n,r,a){this.data.set(e,{values:t,dtype:r,refCount:a})}numDataIds(){return this.data.numDataIds()}async read(e){return this.readSync(e)}readSync(e){const{dtype:t,complexTensorInfos:n}=this.data.get(e);if("complex64"===t){const e=this.readSync(n.real.dataId),t=this.readSync(n.imag.dataId);return r.backend_util.mergeRealAndImagArrays(e,t)}return r.util.convertBackendValuesAndArrayBuffer(this.data.get(e).values,t)}bufferSync(e){const t=this.readSync(e.dataId);if("string"===e.dtype)try{const n=t.map((e=>r.util.decodeString(e)));return(0,r.buffer)(e.shape,e.dtype,n)}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return(0,r.buffer)(e.shape,e.dtype,t)}makeOutput(e,t,n){return(0,r.engine)().makeTensorFromTensorInfo(this.makeTensorInfo(t,n,e),this)}disposeData(e,t=!1){if(this.data.has(e)){if(this.data.get(e).refCount--,!t&&this.data.get(e).refCount>0)return!1;const{complexTensorInfos:n}=this.data.get(e);null!=n&&(this.disposeData(n.real.dataId,!0),this.disposeData(n.imag.dataId,!0)),this.data.delete(e)}return!0}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}async time(e){const t=r.util.now();return e(),{kernelMs:r.util.now()-t}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(e){(0,a.H)([e],"where");const t=this.readSync(e.dataId);return s(e.shape,t)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}}o.nextDataId=0;const i="4.2.0";(0,r.registerBackend)("cpu",(()=>new o),1);var u=n(6802);const l=(0,u.A)(r.Elu,(e=>e>=0?e:Math.exp(e)-1)),c={kernelName:r.Elu,backendName:"cpu",kernelFunc:l};var p=n(6495);function d(e){const{inputs:t,backend:n,attrs:s}=e,{x:o}=t,{alpha:i}=s;(0,a.H)([o],"leakyRelu");const u=r.util.sizeFromShape(o.shape),l=n.data.get(o.dataId).values,c=r.util.getTypedArrayFromDType("float32",u);for(let e=0;e<l.length;e++)c[e]=l[e]<0?i*l[e]:l[e];return n.makeTensorInfo(o.shape,"float32",c)}const h={kernelName:r.LeakyRelu,backendName:"cpu",kernelFunc:d};var m=n(3781);const f=(0,m.b)(((e,t)=>e<0?t*e:e));function g(e){const{inputs:t,backend:n}=e,{x:r,alpha:s}=t;(0,a.H)([r,s],"prelu");const o=n.data.get(r.dataId).values,i=n.data.get(s.dataId).values,[u,l]=f(r.shape,s.shape,o,i,"float32");return n.makeTensorInfo(l,"float32",u)}const y={kernelName:r.Prelu,backendName:"cpu",kernelFunc:g},b=(0,u.A)(r.Relu,(e=>Math.max(0,e))),k={kernelName:r.Relu,backendName:"cpu",kernelFunc:b},w=(0,u.A)(r.Relu6,(e=>Math.min(Math.max(0,e),6))),v={kernelName:r.Relu6,backendName:"cpu",kernelFunc:w};var N=n(4790);function x(e,t,n,r,a){if("linear"===n)return(0,p.y)({inputs:{x:t},backend:e});if("relu"===n)return b({inputs:{x:t},backend:e});if("elu"===n)return l({inputs:{x:t},backend:e});if("relu6"===n)return w({inputs:{x:t},backend:e});if("prelu"===n)return g({inputs:{x:t,alpha:r},backend:e});if("leakyrelu"===n)return d({inputs:{x:t},backend:e,attrs:{alpha:a}});if("sigmoid"===n)return(0,N.XD)({inputs:{x:t},backend:e});throw new Error(`Activation ${n} has not been implemented for the CPU backend.`)}var S=n(3862);function T(e){const{inputs:t,backend:n,attrs:a}=e,{x:s}=t,{shape:o}=a,i=r.util.sizeFromShape(s.shape),u=r.util.inferFromImplicitShape(o,i),l=r.util.sizeFromShape(u);r.util.assert(i===l,(()=>`The new shape (${u}) has ${l} elements and the old shape (${s.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`)),n.incRef(s.dataId);const c=n.data.get(s.dataId);if(null!=c.complexTensorInfos){const e=c.complexTensorInfos.real,t=c.complexTensorInfos.imag;e.shape=u,t.shape=u}return{dataId:s.dataId,shape:u,dtype:s.dtype}}const I={kernelName:r.Reshape,backendName:"cpu",kernelFunc:T};function _(e){const{inputs:t,backend:n,attrs:s}=e,{a:o,b:i}=t,{transposeA:u,transposeB:l}=s;(0,a.H)([o,i],"matMul");const c=o.shape.length,p=i.shape.length,d=u?o.shape[c-2]:o.shape[c-1],h=l?i.shape[p-1]:i.shape[p-2],m=u?o.shape[c-1]:o.shape[c-2],f=l?i.shape[p-2]:i.shape[p-1],g=o.shape.slice(0,-2),y=i.shape.slice(0,-2),b=r.util.sizeFromShape(g),k=r.util.sizeFromShape(y),w=r.broadcast_util.assertAndGetBroadcastShape(o.shape.slice(0,-2),i.shape.slice(0,-2)).concat([m,f]);r.util.assert(d===h,(()=>`Error in matMul: inner shapes (${d}) and (${h}) of Tensors with shapes ${o.shape} and ${i.shape} and transposeA=${u} and transposeB=${l} must match.`));const v=l?[k,f,h]:[k,h,f],N=T({inputs:{x:o},backend:n,attrs:{shape:u?[b,d,m]:[b,m,d]}}),x=T({inputs:{x:i},backend:n,attrs:{shape:v}}),S=u?N.shape[1]:N.shape[2],I=u?N.shape[2]:N.shape[1],_=l?x.shape[1]:x.shape[2],E=Math.max(b,k),A=n.data.get(N.dataId).values,M=n.data.get(x.dataId).values,D=r.util.computeStrides(N.shape),F=r.util.computeStrides(x.shape),[$,O,B]=u?[D[0],1,D[1]]:[D[0],D[1],1],[R,V,C]=l?[1,F[1],F[0]]:[F[1],1,F[0]],z=I*_,P=(0,r.buffer)([E,I,_],N.dtype),L=P.values,H=n.blockSize;for(let e=0;e<E;e++){const t=e%b,n=e%k;for(let r=0;r<I;r+=H){const a=Math.min(r+H,I);for(let s=0;s<_;s+=H){const o=Math.min(s+H,_);for(let i=0;i<S;i+=H){const u=Math.min(i+H,S);for(let l=r;l<a;l++)for(let r=s;r<o;r++){let a=0;for(let e=i;e<u;e++)a+=A[t*$+l*O+e*B]*M[e*R+r*V+n*C];L[e*z+(l*_+r)]+=a}}}}}return n.disposeIntermediateTensorInfo(N),n.disposeIntermediateTensorInfo(x),n.makeTensorInfo(w,P.dtype,P.values)}const E={kernelName:r.BatchMatMul,backendName:"cpu",kernelFunc:_},A={kernelName:r._FusedMatMul,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{a,b:s,bias:o,preluActivationWeights:i}=t,{transposeA:u,transposeB:l,activation:c,leakyreluAlpha:p}=r;let d,h,m;const f=[];d=_({inputs:{a,b:s},attrs:{transposeA:u,transposeB:l},backend:n}),o&&(h=(0,S.IH)({inputs:{a:d,b:o},backend:n}),f.push(d),d=h),c&&(m=x(n,d,c,i,p),f.push(d),d=m);for(const e of f)n.disposeIntermediateTensorInfo(e);return d}};var M=n(3526);const D=(0,u.A)(r.Acos,(e=>Math.acos(e))),F={kernelName:r.Acos,backendName:"cpu",kernelFunc:D},$=(0,u.A)(r.Acosh,(e=>Math.acosh(e))),O={kernelName:r.Acosh,backendName:"cpu",kernelFunc:$},B={kernelName:r.AddN,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,s=t;(0,a.H)(t,"addN");const o=s.map((e=>n.data.get(e.dataId).values)),i=(0,r.buffer)(s[0].shape,s[0].dtype),u=i.values;for(let e=0;e<s.length;e++){const t=o[e];for(let e=0;e<u.length;e++)u[e]+=t[e]}return n.makeTensorInfo(i.shape,i.dtype,i.values)}};var R=n(4512);const V={kernelName:r.All,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:o}=t,{axis:i,keepDims:u}=s;(0,a.H)(o,"all");const l=r.util.parseAxisParam(i,o.shape);let c=l;const p=r.backend_util.getAxesPermutation(c,o.shape.length);let d=o;null!=p&&(d=(0,R.p)({inputs:{x:o},backend:n,attrs:{perm:p}}),c=r.backend_util.getInnerMostAxes(c.length,o.shape.length)),r.backend_util.assertAxesAreInnerMostDims("all",c,d.shape.length);const[h,m]=r.backend_util.computeOutAndReduceShapes(d.shape,c),f=r.util.sizeFromShape(m),g=r.util.makeZerosTypedArray(r.util.sizeFromShape(h),d.dtype),y=n.data.get(d.dataId).values;for(let e=0;e<g.length;++e){const t=e*f;let n=y[t];for(let e=0;e<f;++e){const r=y[t+e];n=n&&r}g[e]=n}null!=p&&n.disposeIntermediateTensorInfo(d);const b=n.makeTensorInfo(h,d.dtype,g);if(u){const e=T({inputs:{x:b},backend:n,attrs:{shape:r.backend_util.expandShapeToKeepDim(h,l)}});return n.disposeIntermediateTensorInfo(b),e}return b}},C={kernelName:r.Any,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:o}=t,{axis:i,keepDims:u}=s;(0,a.H)(o,"any");const l=r.util.parseAxisParam(i,o.shape);let c=l;const p=r.backend_util.getAxesPermutation(c,o.shape.length);let d=o;null!=p&&(d=(0,R.p)({inputs:{x:o},backend:n,attrs:{perm:p}}),c=r.backend_util.getInnerMostAxes(c.length,o.shape.length)),r.backend_util.assertAxesAreInnerMostDims("any",c,d.shape.length);const[h,m]=r.backend_util.computeOutAndReduceShapes(d.shape,c),f=r.util.sizeFromShape(m),g=r.util.makeZerosTypedArray(r.util.sizeFromShape(h),d.dtype),y=n.data.get(d.dataId).values;for(let e=0;e<g.length;++e){const t=e*f;let n=y[t];for(let e=0;e<f;++e){const r=y[t+e];n=n||r}g[e]=n}null!=p&&n.disposeIntermediateTensorInfo(d);const b=n.makeTensorInfo(h,d.dtype,g);if(u){const e=T({inputs:{x:b},backend:n,attrs:{shape:r.backend_util.expandShapeToKeepDim(h,l)}});return n.disposeIntermediateTensorInfo(b),e}return b}},z={kernelName:r.ArgMax,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:o}=t,{axis:i}=s;(0,a.H)(o,"argMax");let u=r.util.parseAxisParam(i,o.shape);const l=r.backend_util.getAxesPermutation(u,o.shape.length);let c=o;const p=[];null!=l&&(c=(0,R.p)({inputs:{x:o},backend:n,attrs:{perm:l}}),p.push(c),u=r.backend_util.getInnerMostAxes(u.length,c.shape.length)),u=[u[0]],r.backend_util.assertAxesAreInnerMostDims("argMax",u,c.shape.length);const[d,h]=r.backend_util.computeOutAndReduceShapes(c.shape,u),m=r.util.sizeFromShape(d),f=r.util.makeZerosTypedArray(m,"int32"),g=r.util.sizeFromShape(h),y=n.data.get(c.dataId).values;for(let e=0;e<f.length;++e){const t=e*g;let n=y[t],r=0;for(let e=0;e<g;++e){const a=y[t+e];a>n&&(n=a,r=e)}f[e]=r}return p.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(d,"int32",f)}},P={kernelName:r.ArgMin,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:o}=t,{axis:i}=s;(0,a.H)(o,"argMin");let u=r.util.parseAxisParam(i,o.shape);const l=r.backend_util.getAxesPermutation(u,o.shape.length);let c=o;const p=[];null!=l&&(c=(0,R.p)({inputs:{x:o},backend:n,attrs:{perm:l}}),p.push(c),u=r.backend_util.getInnerMostAxes(u.length,c.shape.length)),u=[u[0]],r.backend_util.assertAxesAreInnerMostDims("argMin",u,c.shape.length);const[d,h]=r.backend_util.computeOutAndReduceShapes(c.shape,u),m=r.util.sizeFromShape(d),f=r.util.makeZerosTypedArray(m,"int32"),g=r.util.sizeFromShape(h),y=n.data.get(c.dataId).values;for(let e=0;e<f.length;++e){const t=e*g;let n=y[t],r=0;for(let e=0;e<g;++e){const a=y[t+e];a<n&&(n=a,r=e)}f[e]=r}return p.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(d,"int32",f)}},L=(0,u.A)(r.Asin,(e=>Math.asin(e))),H={kernelName:r.Asin,backendName:"cpu",kernelFunc:L},W=(0,u.A)(r.Asinh,(e=>Math.asinh(e))),G={kernelName:r.Asinh,backendName:"cpu",kernelFunc:W},U=(0,u.A)(r.Atan,(e=>Math.atan(e))),q={kernelName:r.Atan,backendName:"cpu",kernelFunc:U};var j=n(3253);const K=(0,m.b)(((e,t)=>Math.atan2(e,t))),X=(0,j.j)(r.Atan2,K),Z={kernelName:r.Atan2,backendName:"cpu",kernelFunc:X},Q=(0,u.A)(r.Atanh,(e=>Math.atanh(e))),Y={kernelName:r.Atanh,backendName:"cpu",kernelFunc:Q};function J(e,t,n,a,s,o){const i=s.strideHeight,u=s.strideWidth,l=s.dilationHeight,c=s.dilationWidth,p=s.effectiveFilterHeight,d=s.effectiveFilterWidth,h=s.padInfo.top,m=s.padInfo.left,f="max"===o?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,g=(0,r.buffer)(s.outShape,n),y=g.values,b=s.outShape[1]*s.outShape[2]*s.outShape[3],k=s.outShape[2]*s.outShape[3],w=s.outShape[3];for(let t=0;t<s.batchSize;++t){const n=t*b,r=t*a[0];for(let t=0;t<s.inChannels;++t)for(let g=0;g<s.outHeight;++g){const b=g*i-h,v=Math.max(0,b),N=Math.min(s.inHeight,p+b),x=n+g*k;for(let n=0;n<s.outWidth;++n){const i=n*u-m,p=Math.max(0,i),h=Math.min(s.inWidth,d+i);let g=f,b=0,k=0;for(let n=v;n<N;n+=l){const s=r+n*a[1];for(let n=p;n<h;n+=c){const r=e[s+n*a[2]+t];"max"===o&&r>g?g=r:"avg"===o&&(b+=r,k++)}if(isNaN(g))break}y[x+n*w+t]="avg"===o?b/k:g}}}return g}function ee(e,t,n,a,s=!1,o=!1){const i=(0,r.buffer)(a.outShape,"int32"),u=a.strideHeight,l=a.strideWidth,c=a.dilationHeight,p=a.dilationWidth,d=a.effectiveFilterHeight,h=a.effectiveFilterWidth,m=a.padInfo.top,f=a.padInfo.left,g=(0,r.buffer)(t,n,e);for(let e=0;e<a.batchSize;++e)for(let t=0;t<a.inChannels;++t)for(let n=0;n<a.outHeight;++n){const r=n*u-m;let y=r;for(;y<0;)y+=c;const b=Math.min(a.inHeight,d+r);for(let u=0;u<a.outWidth;++u){const d=u*l-f;let m=d;for(;m<0;)m+=p;const k=Math.min(a.inWidth,h+d);let w=Number.NEGATIVE_INFINITY,v=-1;for(let n=y;n<b;n+=c){const i=n-r;for(let r=m;r<k;r+=p){const u=r-d,l=g.get(e,n,r,t);l>w&&(w=l,v=s?o?((e*a.inHeight+n)*a.inWidth+r)*a.inChannels+t:(n*a.inWidth+r)*a.inChannels+t:i*h+u)}}i.set(v,e,n,u,t)}}return i}function te(e,t,n,a,s,o){const i=s.strideDepth,u=s.strideHeight,l=s.strideWidth,c=s.dilationDepth,p=s.dilationHeight,d=s.dilationWidth,h=s.effectiveFilterDepth,m=s.effectiveFilterHeight,f=s.effectiveFilterWidth,g=s.padInfo.front,y=s.padInfo.top,b=s.padInfo.left,k="max"===o?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,w=(0,r.buffer)(s.outShape,n),v=w.values,N=s.outShape[1]*s.outShape[2]*s.outShape[3]*s.outShape[4],x=s.outShape[2]*s.outShape[3]*s.outShape[4],S=s.outShape[3]*s.outShape[4],T=s.outShape[4];for(let t=0;t<s.batchSize;++t){const n=t*N,r=t*a[0];for(let t=0;t<s.inChannels;++t)for(let w=0;w<s.outDepth;++w){const N=w*i-g;let I=N;for(;I<0;)I+=c;const _=Math.min(s.inDepth,h+N),E=n+w*x;for(let n=0;n<s.outHeight;++n){const i=n*u-y;let h=i;for(;h<0;)h+=p;const g=Math.min(s.inHeight,m+i),w=E+n*S;for(let n=0;n<s.outWidth;++n){const i=n*l-b;let u=i;for(;u<0;)u+=d;const m=Math.min(s.inWidth,f+i),y=w+n*T;let N=k,x=0,S=0;for(let n=I;n<_;n+=c){const s=r+n*a[1];for(let n=h;n<g;n+=p){const r=s+n*a[2];for(let n=u;n<m;n+=d){const s=e[r+n*a[3]+t];if("max"===o&&s>N?N=s:"avg"===o&&(x+=s,S++),isNaN(N))break}if(isNaN(N))break}if(isNaN(N))break}v[y+t]="avg"===o?x/Math.max(S,1):N}}}}return w}const ne={kernelName:r.AvgPool,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:o}=t;(0,a.H)(o,"avgPool");const{filterSize:i,strides:u,pad:l,dimRoundingMode:c}=s;r.util.assert(r.backend_util.eitherStridesOrDilationsAreOne(u,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${u} and dilations '1'`));const d=r.backend_util.computePool2DInfo(o.shape,i,u,1,l,c);let h;if(1===d.filterWidth&&1===d.filterHeight&&r.util.arraysEqual(d.inShape,d.outShape))h=(0,p.y)({inputs:{x:o},backend:n});else{const e=n.data.get(o.dataId).values,t=r.util.computeStrides(o.shape),a=J(e,o.shape,o.dtype,t,d,"avg");h=n.makeTensorInfo(d.outShape,o.dtype,a.values)}return h}},re={kernelName:r.AvgPool3D,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:o}=t,{filterSize:i,strides:u,pad:l,dimRoundingMode:c,dataFormat:p}=s;(0,a.H)(o,"avgPool3d");const d=r.backend_util.computePool3DInfo(o.shape,i,u,1,l,c,p),h=te(n.data.get(o.dataId).values,o.shape,o.dtype,r.util.computeStrides(o.shape),d,"avg");return n.makeTensorInfo(h.shape,"float32",h.values)}},ae={kernelName:r.AvgPool3DGrad,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:o,input:i}=t,{filterSize:u,strides:l,pad:c,dimRoundingMode:p}=s;(0,a.H)([o,i],"avgPool3DGrad");const d=r.backend_util.computePool3DInfo(i.shape,u,l,1,c,p),h=d.strideDepth,m=d.strideHeight,f=d.strideWidth,g=d.filterDepth,y=d.filterHeight,b=d.filterWidth,k=d.dilationDepth,w=d.dilationHeight,v=d.dilationWidth,N=d.effectiveFilterDepth,x=d.effectiveFilterHeight,S=d.effectiveFilterWidth,T=N-1-d.padInfo.front,I=S-1-d.padInfo.left,_=x-1-d.padInfo.top,E=(0,r.buffer)(i.shape,"float32"),A=1/(g*y*b),M=n.bufferSync(o);for(let e=0;e<d.batchSize;++e)for(let t=0;t<d.inChannels;++t)for(let n=0;n<d.inDepth;++n)for(let r=0;r<d.inHeight;++r)for(let a=0;a<d.inWidth;++a){const s=n-T,o=r-_,i=a-I;let u=0;for(let n=0;n<N;n+=k){const r=(s+n)/h;if(!(r<0||r>=d.outDepth||Math.floor(r)!==r))for(let n=0;n<x;n+=w){const a=(o+n)/m;if(!(a<0||a>=d.outHeight||Math.floor(a)!==a))for(let n=0;n<S;n+=v){const s=(i+n)/f;s<0||s>=d.outWidth||Math.floor(s)!==s||(u+=M.get(e,r,a,s,t))}}}E.set(u*A,e,n,r,a,t)}return n.makeTensorInfo(E.shape,E.dtype,E.values)}},se={kernelName:r.AvgPoolGrad,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:o,input:i}=t,u=i;(0,a.H)([o,i],"avgPoolGrad");const{filterSize:l,strides:c,pad:p}=s,d=r.backend_util.computePool2DInfo(u.shape,l,c,1,p),h=d.strideHeight,m=d.strideWidth,f=d.filterHeight,g=d.filterWidth,y=d.dilationHeight,b=d.dilationWidth,k=d.effectiveFilterHeight,w=d.effectiveFilterWidth,v=w-1-d.padInfo.left,N=k-1-d.padInfo.top,x=(0,r.buffer)(u.shape,"float32"),S=1/(f*g),T=n.data.get(o.dataId).values,I=(0,r.buffer)(o.shape,"float32",T);for(let e=0;e<d.batchSize;++e)for(let t=0;t<d.inChannels;++t)for(let n=0;n<d.inHeight;++n)for(let r=0;r<d.inWidth;++r){const a=n-N,s=r-v;let o=0;for(let n=0;n<k;n+=y){const r=(a+n)/h;if(!(r<0||r>=d.outHeight||Math.floor(r)!==r))for(let n=0;n<w;n+=b){const a=(s+n)/m;a<0||a>=d.outWidth||Math.floor(a)!==a||(o+=I.get(e,r,a,t))}}x.set(o*S,e,n,r,t)}return n.makeTensorInfo(x.shape,x.dtype,x.values)}},oe={kernelName:r.FusedBatchNorm,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:o,scale:i,offset:u,mean:l,variance:c}=t;r.util.assert(l.shape.length===c.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),r.util.assert(null==u||l.shape.length===u.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),r.util.assert(null==i||l.shape.length===i.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks.")),(0,a.H)([o,l,c,i,u],"batchNorm");let{varianceEpsilon:p}=s;null==p&&(p=.001);const d=n.data.get(o.dataId).values,h=n.data.get(l.dataId).values,m=n.data.get(c.dataId).values,f=i?n.data.get(i.dataId).values:new Float32Array([1]),g=u?n.data.get(u.dataId).values:new Float32Array([0]),y=new Float32Array(d.length),b=g.length,k=f.length,w=m.length,v=h.length;let N=0,x=0,S=0,T=0;for(let e=0;e<d.length;++e)y[e]=g[N++]+(d[e]-h[x++])*f[S++]/Math.sqrt(m[T++]+p),N>=b&&(N=0),x>=v&&(x=0),S>=k&&(S=0),T>=w&&(T=0);return n.makeTensorInfo(o.shape,o.dtype,y)}};var ie=n(9162);const ue={kernelName:r.BatchToSpaceND,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:o}=t,{blockShape:i,crops:u}=s;(0,a.H)([o],"batchToSpaceND");const l=i.reduce(((e,t)=>e*t)),c=r.backend_util.getReshaped(o.shape,i,l),p=r.backend_util.getPermuted(c.length,i.length),d=r.backend_util.getReshapedPermuted(o.shape,i,l),h=r.backend_util.getSliceBeginCoords(u,i.length),m=r.backend_util.getSliceSize(d,u,i.length),f=T({inputs:{x:o},backend:n,attrs:{shape:c}}),g=(0,R.p)({inputs:{x:f},backend:n,attrs:{perm:p}}),y=T({inputs:{x:g},backend:n,attrs:{shape:d}}),b=(0,ie.tP)({inputs:{x:y},backend:n,attrs:{begin:h,size:m}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(y),b}};var le=n(6301);const ce={kernelName:r.Bincount,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,weights:s}=t,{size:o}=r,i=n.data.get(a.dataId).values,u=n.data.get(s.dataId).values,l=(0,le.W)(i,u,s.dtype,s.shape,o);return n.makeTensorInfo([o],s.dtype,l)}},pe={kernelName:r.BroadcastArgs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{s0:a,s1:s}=t,o=n.data.get(a.dataId).values,i=n.data.get(s.dataId).values,u=r.backend_util.assertAndGetBroadcastShape(Array.from(o),Array.from(i));return n.makeTensorInfo([u.length],"int32",Int32Array.from(u))}};var de=n(6832),he=n(2646);const me=(0,u.A)(r.ClipByValue,((e,t)=>{const n=t;return e>n.clipValueMax?n.clipValueMax:e<n.clipValueMin?n.clipValueMin:e})),fe={kernelName:r.ClipByValue,backendName:"cpu",kernelFunc:me};var ge=n(7390);const ye={kernelName:r.ComplexAbs,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend,a=new Float32Array(r.util.sizeFromShape(t.shape)),s=n.data.get(t.dataId),o=s.complexTensorInfos.real,i=s.complexTensorInfos.imag,u=n.data.get(o.dataId).values,l=n.data.get(i.dataId).values;for(let e=0;e<u.length;e++){const t=u[e],n=l[e];a[e]=Math.hypot(t,n)}return n.makeOutput(a,t.shape,"float32")}};var be=n(796);function ke(e){const{inputs:t,backend:n}=e,{input:r}=t,a=n.data.get(r.dataId).complexTensorInfos.imag,s=n.data.get(a.dataId).values;return n.makeTensorInfo(a.shape,a.dtype,s)}const we={kernelName:r.Imag,backendName:"cpu",kernelFunc:ke};var ve=n(2028);function Ne(e){const{inputs:t,backend:n,attrs:a}=e,{axis:s}=a,o=r.util.parseAxisParam(s,t[0].shape)[0],i=t.map((e=>e.shape));r.backend_util.assertParamsConsistent(i,o);let u=r.backend_util.computeOutShape(t.map((e=>e.shape)),o);if(0===r.util.sizeFromShape(u))return n.makeTensorInfo(u,t[0].dtype,[]);const l=t.filter((e=>r.util.sizeFromShape(e.shape)>0));if(1===l.length)return(0,p.y)({inputs:{x:l[0]},backend:n});if("complex64"===l[0].dtype){const e=l.map((e=>(0,ve.k)({inputs:{input:e},backend:n}))),t=l.map((e=>ke({inputs:{input:e},backend:n}))),r=Ne({inputs:e,backend:n,attrs:{axis:o}}),a=Ne({inputs:t,backend:n,attrs:{axis:o}}),s=(0,ge.P)({inputs:{real:r,imag:a},backend:n});return e.forEach((e=>n.disposeIntermediateTensorInfo(e))),t.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(a),s}const c=l.map((e=>{const t=r.util.sizeFromShape(e.shape.slice(o));return T({inputs:{x:e},backend:n,attrs:{shape:[-1,t]}})})),d=c.map((e=>({vals:n.data.get(e.dataId).values,shape:e.shape})));u=r.backend_util.computeOutShape(c.map((e=>e.shape)),1);const h=1===c[0].shape[0],m=(0,be.j)(d,u,t[0].dtype,h),f=r.backend_util.computeOutShape(l.map((e=>e.shape)),o),g=n.makeTensorInfo(f,t[0].dtype,m);return c.forEach((e=>n.disposeIntermediateTensorInfo(e))),g}const xe={kernelName:r.Concat,backendName:"cpu",kernelFunc:Ne};function Se(e){const{inputs:t,backend:n,attrs:s}=e,{x:o,filter:i}=t,{strides:u,pad:l,dataFormat:c,dilations:p,dimRoundingMode:d}=s;(0,a.H)([o,i],"conv2d");const h=r.backend_util.convertConv2DDataFormat(c),m=r.backend_util.computeConv2DInfo(o.shape,i.shape,u,p,l,d,!1,h),f=m.filterHeight,g=m.filterWidth,y=m.dilationHeight,b=m.dilationWidth,k=m.padInfo.left,w=m.padInfo.top,v="channelsLast"===m.dataFormat,N=new r.TensorBuffer(m.outShape,o.dtype),x=r.util.computeStrides(o.shape),S=r.util.computeStrides(i.shape),T=x[0],I=v?x[1]:x[2],_=v?x[2]:1,E=v?1:x[1],A=N.strides[0],M=v?N.strides[1]:N.strides[2],D=v?N.strides[2]:1,F=v?1:N.strides[1],$=n.data.get(o.dataId).values,O=n.data.get(i.dataId).values,B=N.values;for(let e=0;e<m.batchSize;++e){const t=e*T,n=e*A;for(let e=0;e<m.outHeight;++e){const r=n+e*M,a=e*m.strideHeight-w;for(let e=0;e<f;++e){const n=a+e*y;if(n<0||n>=m.inHeight)continue;const s=e*S[0],o=t+n*I;for(let e=0;e<m.outWidth;++e){const t=r+e*D,n=e*m.strideWidth-k;for(let e=0;e<g;++e){const r=n+e*b;if(r<0||r>=m.inWidth)continue;const a=o+r*_;let i=s+e*S[1];for(let e=0;e<m.inChannels;++e){const n=$[a+e*E];for(let e=0;e<m.outChannels;++e)B[t+e*F]+=n*O[i+e];i+=m.outChannels}}}}}}return n.makeTensorInfo(N.shape,N.dtype,B)}const Te={kernelName:r.Conv2D,backendName:"cpu",kernelFunc:Se},Ie={kernelName:r.Conv2DBackpropFilter,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:o,dy:i}=t,{strides:u,pad:l,dataFormat:c,dimRoundingMode:p,filterShape:d}=s;(0,a.H)([o,i],"conv2dBackpropFilter");const h=r.backend_util.convertConv2DDataFormat(c),m=r.backend_util.computeConv2DInfo(o.shape,d,u,1,l,p,!1,h),{strideHeight:f,strideWidth:g,filterHeight:y,filterWidth:b}=m,k="channelsLast"===m.dataFormat,w=new r.TensorBuffer(m.filterShape,"float32"),v=m.padInfo.left,N=m.padInfo.top,x=n.data.get(o.dataId).values,S=n.data.get(i.dataId).values,T=new r.TensorBuffer(o.shape,o.dtype,x),I=new r.TensorBuffer(i.shape,i.dtype,S);for(let e=0;e<y;++e){const t=Math.max(0,Math.ceil((N-e)/f)),n=Math.min(m.outHeight,(m.inHeight+N-e)/f);for(let r=0;r<b;++r){const a=Math.max(0,Math.ceil((v-r)/g)),s=Math.min(m.outWidth,(m.inWidth+v-r)/g);for(let o=0;o<m.inChannels;++o)for(let i=0;i<m.outChannels;++i){let u=0;for(let l=0;l<m.batchSize;++l)for(let c=t;c<n;++c){const t=e+c*f-N;for(let e=a;e<s;++e){const n=r+e*g-v;u+=k?T.get(l,t,n,o)*I.get(l,c,e,i):T.get(l,o,t,n)*I.get(l,i,c,e)}}w.set(u,e,r,o,i)}}}return n.makeTensorInfo(w.shape,w.dtype,w.values)}},_e={kernelName:r.Conv2DBackpropInput,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:o,filter:i}=t,{inputShape:u,strides:l,pad:c,dataFormat:p,dimRoundingMode:d}=s;(0,a.H)([o,i],"conv2dBackpropInput");const h=r.util.computeStrides(i.shape),m=r.util.computeStrides(o.shape);let f=r.backend_util.convertConv2DDataFormat(p);const g=r.backend_util.computeConv2DInfo(u,i.shape,l,1,c,d,!1,f),y=new r.TensorBuffer(g.inShape,"float32"),b=y.values,k=n.data.get(o.dataId).values,w=n.data.get(i.dataId).values,[v,N,x]=h,{batchSize:S,filterHeight:T,filterWidth:I,inChannels:_,inHeight:E,inWidth:A,outChannels:M,outHeight:D,outWidth:F,strideHeight:$,strideWidth:O}=g;f=g.dataFormat;const B=T-1-g.padInfo.top,R=I-1-g.padInfo.left,V="channelsLast"===f,C=y.strides[0],z=V?y.strides[1]:y.strides[2],P=V?y.strides[2]:1,L=V?1:y.strides[1],H=m[0],W=V?m[1]:m[2],G=V?m[2]:1,U=V?1:m[1];for(let e=0;e<S;++e)for(let t=0;t<_;++t)for(let n=0;n<E;++n){const r=n-B,a=Math.max(0,Math.ceil(r/$)),s=Math.min(D,(T+r)/$);for(let o=0;o<A;++o){const i=o-R,u=Math.max(0,Math.ceil(i/O)),l=Math.min(F,(I+i)/O);let c=0;for(let n=a;n<s;++n){const a=n*$-r;for(let r=u;r<l;++r){const s=H*e+W*n+G*r,o=v*(T-1-a)+N*(I-1-(r*O-i))+x*t;for(let e=0;e<M;++e)c+=k[s+U*e]*w[o+e]}}b[C*e+z*n+P*o+L*t]=c}}return n.makeTensorInfo(y.shape,y.dtype,y.values)}},Ee={kernelName:r.Conv3D,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:o,filter:i}=t,{strides:u,pad:l,dilations:c}=s;(0,a.H)([o,i],"conv3d");const p=r.backend_util.computeConv3DInfo(o.shape,i.shape,u,c,l),{filterDepth:d,filterHeight:h,filterWidth:m,dilationDepth:f,dilationHeight:g,dilationWidth:y,padInfo:b}=p,k=b.front,w=b.left,v=b.top,N=new r.TensorBuffer(p.outShape,o.dtype),x=n.data.get(o.dataId).values,S=n.data.get(i.dataId).values,T=N.values,I=r.util.computeStrides(o.shape),_=r.util.computeStrides(i.shape);for(let e=0;e<p.batchSize;++e){const t=e*I[0],n=e*N.strides[0];for(let e=0;e<p.outDepth;++e){const r=n+e*N.strides[1],a=e*p.strideDepth-k;for(let e=0;e<d;++e){const n=a+e*f;if(n<0||n>=p.inDepth)continue;const s=e*_[0],o=t+n*I[1];for(let e=0;e<p.outHeight;++e){const t=r+e*N.strides[2],n=e*p.strideHeight-v;for(let e=0;e<h;++e){const r=n+e*g;if(r<0||r>=p.inHeight)continue;const a=s+e*_[1],i=o+r*I[2];for(let e=0;e<p.outWidth;++e){const n=t+e*p.outChannels,r=e*p.strideWidth-w;for(let e=0;e<m;++e){const t=r+e*y;if(t<0||t>=p.inWidth)continue;const s=a+e*_[2],o=i+t*p.inChannels;let u=s;for(let e=0;e<p.inChannels;++e){const t=x[o+e];for(let e=0;e<p.outChannels;++e)T[n+e]+=t*S[u+e];u+=p.outChannels}}}}}}}}return n.makeTensorInfo(N.shape,N.dtype,N.values)}},Ae={kernelName:r.Conv3DBackpropFilterV2,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:o,dy:i}=t,{strides:u,pad:l,filterShape:c}=s;(0,a.H)([o,i],"conv3dBackpropFilterV2");const p=r.util.computeStrides(o.shape),d=r.util.computeStrides(i.shape),h=r.backend_util.computeConv3DInfo(o.shape,c,u,1,l),m=h.strideDepth,f=h.strideHeight,g=h.strideWidth,y=h.filterDepth,b=h.filterHeight,k=h.filterWidth,w=new r.TensorBuffer(h.filterShape,"float32"),v=w.values,[N,x,S,T]=w.strides,I=n.data.get(i.dataId).values,[_,E,A,M]=d,D=n.data.get(o.dataId).values,[F,$,O,B]=p,R=h.padInfo.front,V=h.padInfo.left,C=h.padInfo.top;for(let e=0;e<y;++e){const t=Math.max(0,Math.ceil((R-e)/m)),n=Math.min(h.outDepth,(h.inDepth+R-e)/m),r=e*N;for(let a=0;a<b;++a){const s=Math.max(0,Math.ceil((C-a)/f)),o=Math.min(h.outHeight,(h.inHeight+C-a)/f),i=a*x+r;for(let r=0;r<k;++r){const u=Math.max(0,Math.ceil((V-r)/g)),l=Math.min(h.outWidth,(h.inWidth+V-r)/g),c=r*S+i;for(let i=0;i<h.inChannels;++i){const p=i*T+c;for(let c=0;c<h.outChannels;++c){let d=0;for(let p=0;p<h.batchSize;++p){const h=p*F,y=p*_;for(let p=t;p<n;++p){const t=(e+p*m-R)*$+h,n=p*E+y;for(let e=s;e<o;++e){const s=(a+e*f-C)*O+t,o=e*A+n;for(let e=u;e<l;++e){const t=e*M+o;d+=D[(r+e*g-V)*B+s+i]*I[t+c]}}}}v[p+c]=d}}}}}return n.makeTensorInfo(w.shape,w.dtype,w.values)}},Me={kernelName:r.Conv3DBackpropInputV2,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:o,filter:i}=t,{pad:u,strides:l,inputShape:c}=s;(0,a.H)([o],"conv3dBackpropInputV2");const p=r.util.computeStrides(o.shape),d=r.util.computeStrides(i.shape),h=r.backend_util.computeConv3DInfo(c,i.shape,l,1,u),m=new r.TensorBuffer(h.inShape,"float32"),f=m.values,[g,y,b,k]=m.strides,w=n.data.get(o.dataId).values,[v,N,x,S]=p,T=n.data.get(i.dataId).values,[I,_,E,A]=d,{batchSize:M,filterDepth:D,filterHeight:F,filterWidth:$,inChannels:O,inDepth:B,inHeight:R,inWidth:V,outChannels:C,outDepth:z,outHeight:P,outWidth:L,strideDepth:H,strideHeight:W,strideWidth:G}=h,U=D-1-h.padInfo.front,q=F-1-h.padInfo.top,j=$-1-h.padInfo.left;for(let e=0;e<M;++e)for(let t=0;t<O;++t)for(let n=0;n<B;++n){const r=n-U,a=Math.max(0,Math.ceil(r/H)),s=Math.min(z,(D+r)/H);for(let o=0;o<R;++o){const i=o-q,u=Math.max(0,Math.ceil(i/W)),l=Math.min(P,(F+i)/W);for(let c=0;c<V;++c){const p=c-j,d=Math.max(0,Math.ceil(p/G)),h=Math.min(L,($+p)/G);let m=0;for(let n=a;n<s;++n){const a=n*H-r;for(let r=u;r<l;++r){const s=r*W-i;for(let o=d;o<h;++o){const i=v*e+N*n+x*r+S*o,u=I*(D-1-a)+_*(F-1-s)+E*($-1-(o*G-p))+A*t;for(let e=0;e<C;++e)m+=w[i+e]*T[u+e]}}}f[g*e+y*n+b*o+k*c+t]=m}}}return n.makeTensorInfo(m.shape,m.dtype,m.values)}},De=(0,u.A)(r.Cos,(e=>Math.cos(e))),Fe={kernelName:r.Cos,backendName:"cpu",kernelFunc:De},$e=(0,u.A)(r.Cosh,(e=>Math.cosh(e))),Oe={kernelName:r.Cosh,backendName:"cpu",kernelFunc:$e},Be={kernelName:r.CropAndResize,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{image:s,boxes:o,boxInd:i}=t,{cropSize:u,method:l,extrapolationValue:c}=a,[p,d,h,m]=s.shape,f=o.shape[0],[g,y]=u,b=(0,r.buffer)([f,g,y,m],"float32"),k=n.data.get(o.dataId).values,w=n.data.get(i.dataId).values,v=n.data.get(s.dataId).values,N=r.util.computeStrides(s.shape),x=r.util.computeStrides(b.shape);for(let e=0;e<f;e++){const t=4*e,n=k[t],r=k[t+1],a=k[t+2],s=k[t+3],o=w[e];if(o>=p)continue;const i=g>1?(a-n)*(d-1)/(g-1):0,u=y>1?(s-r)*(h-1)/(y-1):0;for(let t=0;t<g;t++){const p=g>1?n*(d-1)+t*i:.5*(n+a)*(d-1);if(p<0||p>d-1)for(let n=0;n<y;n++)for(let r=0;r<m;r++){const a=r+n*x[2]+t*x[1]+e*x[0];b.values[a]=c}else if("bilinear"===l){const n=Math.floor(p),a=Math.ceil(p),i=p-n;for(let l=0;l<y;l++){const p=y>1?r*(h-1)+l*u:.5*(r+s)*(h-1);if(p<0||p>h-1){for(let n=0;n<m;n++){const r=n+l*x[2]+t*x[1]+e*x[0];b.values[r]=c}continue}const d=Math.floor(p),f=Math.ceil(p),g=p-d;for(let r=0;r<m;r++){let s=r+d*N[2]+n*N[1]+o*N[0];const u=v[s];s=r+f*N[2]+n*N[1]+o*N[0];const c=v[s];s=r+d*N[2]+a*N[1]+o*N[0];const p=v[s];s=r+f*N[2]+a*N[1]+o*N[0];const h=u+(c-u)*g,m=p+(v[s]-p)*g;s=r+l*x[2]+t*x[1]+e*x[0],b.values[s]=h+(m-h)*i}}}else for(let n=0;n<y;++n){const a=y>1?r*(h-1)+n*u:.5*(r+s)*(h-1);if(a<0||a>h-1){for(let r=0;r<m;r++){const a=r+n*x[2]+t*x[1]+e*x[0];b.values[a]=c}continue}const i=Math.round(a),l=Math.round(p);for(let r=0;r<m;r++){const a=r+i*N[2]+l*N[1]+o*N[0],s=r+n*x[2]+t*x[1]+e*x[0];b.values[s]=v[a]}}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}},Re={kernelName:r.Cumprod,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:o}=t,{axis:i,exclusive:u,reverse:l}=s;(0,a.H)(o,"cumprod");const c=r.backend_util.getAxesPermutation([i],o.shape.length);let p=o;null!=c&&(p=(0,R.p)({inputs:{x:o},backend:n,attrs:{perm:c}}));const d=r.backend_util.getInnerMostAxes(1,o.shape.length)[0];if(d!==p.shape.length-1)throw new Error(`backend.cumprod in CPU expects an inner-most axis=${p.shape.length-1} but got axis=${d}`);const h=(0,r.upcastType)(p.dtype,"int32"),m=r.util.makeOnesTypedArray(r.util.sizeFromShape(p.shape),h),f=n.data.get(p.dataId).values,g=p.shape[p.shape.length-1],y=l?(e,t)=>e+g-t-1:(e,t)=>e+t;for(let e=0;e<f.length;e+=g)for(let t=0;t<g;t++){const n=y(e,t);if(0===t)m[n]=u?1:f[n];else{const r=y(e,t-1);m[n]=u?f[r]*m[r]:f[n]*m[r]}}const b=n.makeTensorInfo(p.shape,h,m);if(null!=c){const e=r.backend_util.getUndoAxesPermutation(c),t=(0,R.p)({inputs:{x:b},backend:n,attrs:{perm:e}});return n.disposeIntermediateTensorInfo(b),n.disposeIntermediateTensorInfo(p),t}return b}},Ve={kernelName:r.Cumsum,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:o}=t,{axis:i,exclusive:u,reverse:l}=s;(0,a.H)(o,"cumsum");const c=r.backend_util.getAxesPermutation([i],o.shape.length);let p=o;null!=c&&(p=(0,R.p)({inputs:{x:o},backend:n,attrs:{perm:c}}));const d=r.backend_util.getInnerMostAxes(1,o.shape.length)[0];if(d!==p.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${p.shape.length-1} but got axis=${d}`);const h=(0,r.upcastType)(p.dtype,"int32"),m=r.util.makeZerosTypedArray(r.util.sizeFromShape(p.shape),h),f=n.data.get(p.dataId).values,g=p.shape[p.shape.length-1],y=l?(e,t)=>e+g-t-1:(e,t)=>e+t;for(let e=0;e<f.length;e+=g)for(let t=0;t<g;t++){const n=y(e,t);if(0===t)m[n]=u?0:f[n];else{const r=y(e,t-1);m[n]=u?f[r]+m[r]:f[n]+m[r]}}const b=n.makeTensorInfo(p.shape,h,m);if(null!=c){const e=r.backend_util.getUndoAxesPermutation(c),t=(0,R.p)({inputs:{x:b},backend:n,attrs:{perm:e}});return n.disposeIntermediateTensorInfo(b),n.disposeIntermediateTensorInfo(p),t}return b}},Ce={kernelName:r.DenseBincount,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,weights:s}=t,{size:o,binaryOutput:i}=r;if(1===a.shape.length){const e=n.data.get(a.dataId).values,t=n.data.get(s.dataId).values,r=(0,le.W)(e,t,s.dtype,s.shape,o);return n.makeTensorInfo([o],s.dtype,r)}if(2===a.shape.length){const e=n.bufferSync(a),t=n.bufferSync(s),r=(0,le.i)(e,t,o,i);return n.makeTensorInfo(r.shape,s.dtype,r.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${a.shape.length}.`)}},ze={kernelName:r.DepthToSpace,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:s}=t,{blockSize:o,dataFormat:i}=a;r.util.assert("NHWC"===i,(()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${i}`));const u=s.shape[0],l=s.shape[1],c=s.shape[2],p=s.shape[3],d=l*o,h=c*o,m=p/(o*o),f=n.data.get(s.dataId).values,g=new Float32Array(u*d*h*m);let y=0;for(let e=0;e<u;++e)for(let t=0;t<d;++t){const n=Math.floor(t/o),r=t%o;for(let t=0;t<h;++t){const a=Math.floor(t/o),s=(r*o+t%o)*m;for(let t=0;t<m;++t){const r=t+s+p*(a+c*(n+l*e));g[y++]=f[r]}}}return n.makeTensorInfo([u,d,h,m],s.dtype,g)}};function Pe(e){const{inputs:t,backend:n,attrs:s}=e,{x:o,filter:i}=t,{strides:u,pad:l,dilations:c,dimRoundingMode:p}=s;(0,a.H)([o,i],"depthwiseConv2DNative");const d=r.util.computeStrides(o.shape),h=r.util.computeStrides(i.shape);let m=c;null==m&&(m=[1,1]),r.util.assert(r.backend_util.eitherStridesOrDilationsAreOne(u,m),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${u} and dilations '${m}'`));const f=r.backend_util.computeConv2DInfo(o.shape,i.shape,u,m,l,p,!0),{filterHeight:g,filterWidth:y,dilationHeight:b,dilationWidth:k,padInfo:w}=f,v=w.left,N=w.top,x=f.outChannels/f.inChannels,S=new r.TensorBuffer(f.outShape,o.dtype),T=n.data.get(o.dataId).values,I=n.data.get(i.dataId).values,_=S.values;for(let e=0;e<f.batchSize;++e){const t=e*d[0],n=e*S.strides[0];for(let e=0;e<f.outHeight;++e){const r=n+e*S.strides[1],a=e*f.strideHeight-N;for(let e=0;e<g;++e){const n=a+e*b;if(n<0||n>=f.inHeight)continue;const s=e*h[0],o=t+n*d[1];for(let e=0;e<f.outWidth;++e){const t=r+e*S.strides[2],n=e*f.strideWidth-v;for(let e=0;e<y;++e){const r=n+e*k;if(r<0||r>=f.inWidth)continue;const a=s+e*h[1],i=o+r*f.inChannels;let u=t,l=a;for(let e=0;e<f.inChannels;++e){const t=T[i+e];for(let e=0;e<x;++e)_[u+e]+=t*I[l+e];u+=x,l+=x}}}}}}return n.makeTensorInfo(S.shape,S.dtype,S.values)}const Le={kernelName:r.DepthwiseConv2dNative,backendName:"cpu",kernelFunc:Pe},He={kernelName:r.DepthwiseConv2dNativeBackpropFilter,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:o,dy:i}=t,{strides:u,dilations:l,pad:c,dimRoundingMode:p,filterShape:d}=s;(0,a.H)([o,i],"depthwiseConv2dNativeBackpropFilter");const h=r.backend_util.computeConv2DInfo(o.shape,d,u,l,c,p,!0),{strideHeight:m,strideWidth:f,filterHeight:g,filterWidth:y}=h,b=new r.TensorBuffer(h.filterShape,"float32"),k=h.padInfo.left,w=h.padInfo.top,v=h.outChannels/h.inChannels,N=n.data.get(o.dataId).values,x=new r.TensorBuffer(o.shape,o.dtype,N),S=n.data.get(i.dataId).values,T=new r.TensorBuffer(i.shape,i.dtype,S);for(let e=0;e<g;++e){const t=Math.max(0,Math.ceil((w-e)/m)),n=Math.min(h.outHeight,(h.inHeight+w-e)/m);for(let r=0;r<y;++r){const a=Math.max(0,Math.ceil((k-r)/f)),s=Math.min(h.outWidth,(h.inWidth+k-r)/f);for(let o=0;o<h.outChannels;++o){const i=Math.trunc(o/v),u=o%v;let l=0;for(let u=0;u<h.batchSize;++u)for(let c=t;c<n;++c){const t=e+c*m-w;for(let e=a;e<s;++e){const n=r+e*f-k;l+=x.get(u,t,n,i)*T.get(u,c,e,o)}}b.set(l,e,r,i,u)}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}},We={kernelName:r.DepthwiseConv2dNativeBackpropInput,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:o,filter:i}=t,{strides:u,dilations:l,pad:c,dimRoundingMode:p,inputShape:d}=s;(0,a.H)([o,i],"depthwiseConv2DNativeBackpropInput");const h=r.util.computeStrides(o.shape),m=r.util.computeStrides(i.shape),f=r.backend_util.computeConv2DInfo(d,i.shape,u,l,c,p,!0),g=new r.TensorBuffer(f.inShape,"float32"),y=g.values,[b,k,w]=g.strides,v=n.data.get(o.dataId).values,[N,x,S]=h,T=n.data.get(i.dataId).values,[I,_,E]=m,{batchSize:A,filterHeight:M,filterWidth:D,inChannels:F,inHeight:$,inWidth:O,outChannels:B,outHeight:R,outWidth:V,strideHeight:C,strideWidth:z}=f,P=M-1-f.padInfo.top,L=D-1-f.padInfo.left,H=B/F;for(let e=0;e<A;++e)for(let t=0;t<F;++t)for(let n=0;n<$;++n){const r=n-P,a=Math.max(0,Math.ceil(r/C)),s=Math.min(R,(M+r)/C);for(let o=0;o<O;++o){const i=o-L,u=Math.max(0,Math.ceil(i/z)),l=Math.min(V,(D+i)/z);let c=0;for(let n=a;n<s;++n){const a=n*C-r;for(let r=u;r<l;++r){const s=N*e+x*n+S*r,o=I*(M-1-a)+_*(D-1-(r*z-i))+E*t;for(let e=0;e<H;++e)c+=v[s+(t*H+e)]*T[o+e]}}y[b*e+k*n+w*o+t]=c}}return n.makeTensorInfo(g.shape,g.dtype,g.values)}},Ge={kernelName:r.Diag,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:a}=t,s=r.util.sizeFromShape(a.shape),o=n.data.get(a.dataId).values,i=(0,r.buffer)([s,s],a.dtype),u=i.values;for(let e=0;e<o.length;e++)u[e*s+e]=o[e];const l=[...a.shape,...a.shape];return n.makeTensorInfo(l,i.dtype,i.values)}},Ue={kernelName:r.Dilation2D,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:a,filter:s}=e,{strides:o,pad:i,dilations:u}=n,l=t,c=l.data.get(a.dataId).values,p=a.shape.length,d=l.data.get(s.dataId).values,h=s.shape.length,{batchSize:m,inHeight:f,inWidth:g,inChannels:y,outHeight:b,outWidth:k,padInfo:w,strideHeight:v,strideWidth:N,filterHeight:x,filterWidth:S,dilationHeight:T,dilationWidth:I,outShape:_}=r.backend_util.computeDilation2DInfo(a.shape,s.shape,o,i,"NHWC",u),E=r.util.sizeFromShape(_),A=_.length,M=r.util.getArrayFromDType(a.dtype,E);for(let e=0;e<m;++e)for(let t=0;t<b;++t){const n=t*v-w.top;for(let o=0;o<k;++o){const i=o*N-w.left;for(let u=0;u<y;++u){let l=Number.MIN_SAFE_INTEGER;for(let t=0;t<x;++t){const o=n+t*T;if(o>=0&&o<f)for(let n=0;n<S;++n){const m=i+n*I;if(m>=0&&m<g){const i=r.util.locToIndex([e,o,m,u],p,r.util.computeStrides(a.shape)),f=r.util.locToIndex([t,n,u],h,r.util.computeStrides(s.shape)),g=c[i]+d[f];g>l&&(l=g)}}}M[r.util.locToIndex([e,t,o,u],A,r.util.computeStrides(_))]=l}}}return{dataId:l.write(r.util.toTypedArray(M,a.dtype),_,a.dtype),shape:_,dtype:a.dtype}}},qe={kernelName:r.Dilation2DBackpropFilter,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:a,filter:s,dy:o}=e,{strides:i,pad:u,dilations:l}=n,c=t,p=r.util.toNestedArray(a.shape,c.data.get(a.dataId).values),d=r.util.toNestedArray(s.shape,c.data.get(s.dataId).values),{batchSize:h,inHeight:m,inWidth:f,inChannels:g,outHeight:y,outWidth:b,padInfo:k,strideHeight:w,strideWidth:v,filterHeight:N,filterWidth:x,dilationHeight:S,dilationWidth:T,outShape:I}=r.backend_util.computeDilation2DInfo(a.shape,s.shape,i,u,"NHWC",l);r.util.assert(o.rank===I.length,(()=>`Error in ${r.Dilation2DBackpropFilter}, dy must have the same rank as output ${I.length}, but got ${o.rank}`));const _=r.util.toNestedArray(I,c.data.get(o.dataId).values),E=r.util.makeZerosNestedTypedArray(s.shape,s.dtype);for(let e=0;e<h;++e)for(let t=0;t<y;++t){const n=t*w-k.top;for(let r=0;r<b;++r){const a=r*v-k.left;for(let s=0;s<g;++s){let o=Number.MIN_SAFE_INTEGER,i=0,u=0;for(let t=0;t<N;++t){const r=n+t*S;if(r>=0&&r<m)for(let n=0;n<x;++n){const l=a+n*T;if(l>=0&&l<f){const a=p[e][r][l][s]+d[t][n][s];a>o&&(o=a,i=t,u=n)}}}E[i][u][s]+=_[e][t][r][s]}}}return{dataId:c.write(r.util.toTypedArray(E,a.dtype),s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},je={kernelName:r.Dilation2DBackpropInput,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:a,filter:s,dy:o}=e,{strides:i,pad:u,dilations:l}=n,c=t,p=r.util.toNestedArray(a.shape,c.data.get(a.dataId).values),d=r.util.toNestedArray(s.shape,c.data.get(s.dataId).values),{batchSize:h,inHeight:m,inWidth:f,inChannels:g,outHeight:y,outWidth:b,padInfo:k,strideHeight:w,strideWidth:v,filterHeight:N,filterWidth:x,dilationHeight:S,dilationWidth:T,outShape:I}=r.backend_util.computeDilation2DInfo(a.shape,s.shape,i,u,"NHWC",l);r.util.assert(o.rank===I.length,(()=>`Error in ${r.Dilation2DBackpropInput}, dy must have the same rank as output ${I.length}, but got ${o.rank}`));const _=r.util.toNestedArray(I,c.data.get(o.dataId).values),E=r.util.makeZerosNestedTypedArray(a.shape,a.dtype);for(let e=0;e<h;++e)for(let t=0;t<y;++t){const n=t*w-k.top;for(let r=0;r<b;++r){const a=r*v-k.left;for(let s=0;s<g;++s){let o=Number.MIN_SAFE_INTEGER,i=n<0?0:n,u=a<0?0:a;for(let t=0;t<N;++t){const r=n+t*S;if(r>=0&&r<m)for(let n=0;n<x;++n){const l=a+n*T;if(l>=0&&l<f){const a=p[e][r][l][s]+d[t][n][s];a>o&&(o=a,i=r,u=l)}}}E[e][i][u][s]+=_[e][t][r][s]}}}return{dataId:c.write(r.util.toTypedArray(E,a.dtype),a.shape,a.dtype),shape:a.shape,dtype:a.dtype}}};var Ke=n(2820),Xe=n(2402);function Ze(e){const{inputs:t,backend:n,attrs:s}=e,{x:o}=t,{axis:i,keepDims:u}=s;let l;(0,a.H)(o,"sum"),l="bool"===o.dtype?(0,de.pj)({inputs:{x:o},backend:n,attrs:{dtype:"int32"}}):(0,p.y)({inputs:{x:o},backend:n});const c=l.shape.length,d=r.util.parseAxisParam(i,l.shape),h=r.backend_util.getAxesPermutation(d,c);let m=d,f=l;null!=h&&(f=(0,R.p)({inputs:{x:l},backend:n,attrs:{perm:h}}),m=r.backend_util.getInnerMostAxes(m.length,c)),r.backend_util.assertAxesAreInnerMostDims("sum",m,f.shape.length);const[g,y]=r.backend_util.computeOutAndReduceShapes(f.shape,m),b=r.backend_util.upcastType(f.dtype,"int32");let k=(0,Xe.l)(n,g,b);const w=r.util.sizeFromShape(y),v=n.data.get(k.dataId).values,N=n.data.get(f.dataId).values;for(let e=0;e<v.length;++e){const t=e*w;let n=0;for(let e=0;e<w;++e)n+=N[t+e];v[e]=n}if(u){const e=k;k=T({inputs:{x:k},backend:n,attrs:{shape:r.backend_util.expandShapeToKeepDim(k.shape,d)}}),n.disposeIntermediateTensorInfo(e)}return n.disposeIntermediateTensorInfo(l),null!=h&&n.disposeIntermediateTensorInfo(f),k}const Qe={kernelName:r.Sum,backendName:"cpu",kernelFunc:Ze},Ye={kernelName:r.Einsum,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{equation:s}=a,o=t,{allDims:i,summedDims:u,idDims:l}=r.backend_util.decodeEinsumEquation(s,o.length);r.backend_util.checkEinsumDimSizes(i.length,l,o);const{path:c,steps:p}=r.backend_util.getEinsumComputePath(u,l),d=p.length;let h=null,m=i.length;const f=[];for(let e=0;e<d;++e){for(const t of p[e]){const{permutationIndices:e,expandDims:a}=r.backend_util.getEinsumPermutation(m,l[t]);let s;r.backend_util.isIdentityPermutation(e)?s=o[t]:(s=(0,R.p)({inputs:{x:o[t]},backend:n,attrs:{perm:e}}),f.push(s));const i=s.shape.slice();for(let e=0;e<a.length;++e)i.splice(a[e],0,1);r.util.arraysEqual(s.shape,i)||(s=T({inputs:{x:s},backend:n,attrs:{shape:i}}),f.push(s)),null===h?h=s:(h=(0,Ke.Jp)({inputs:{a:s,b:h},backend:n}),f.push(h))}e<d-1&&(c[e]>=0&&(h=Ze({inputs:{x:h},backend:n,attrs:{axis:c[e]-(i.length-m),keepDims:!1}}),f.push(h)),m--)}for(const e of f)e!==h&&n.disposeIntermediateTensorInfo(e);return h}},Je={kernelName:r.EluGrad,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{dy:s,y:o}=t;(0,a.H)([s,o],"eluGrad");const i=new Float32Array(r.util.sizeFromShape(o.shape)),u=n.data.get(o.dataId).values,l=n.data.get(s.dataId).values;for(let e=0;e<u.length;++e){const t=u[e];i[e]=t>=1?l[e]:l[e]*(t+1)}return n.makeTensorInfo(o.shape,"float32",i)}};var et=n(3721);const tt=r.backend_util.ERF_P,nt=r.backend_util.ERF_A1,rt=r.backend_util.ERF_A2,at=r.backend_util.ERF_A3,st=r.backend_util.ERF_A4,ot=r.backend_util.ERF_A5,it=(0,u.A)(r.Erf,(e=>{const t=Math.sign(e),n=Math.abs(e),r=1/(1+tt*n);return t*(1-((((ot*r+st)*r+at)*r+rt)*r+nt)*r*Math.exp(-n*n))})),ut={kernelName:r.Erf,backendName:"cpu",kernelFunc:it};var lt=n(840);function ct(e){const{inputs:t,backend:n,attrs:a}=e,{input:s}=t,{dim:o}=a,i=s.shape.length,u=s.shape.slice();let l=o;return o<0&&(r.util.assert(-(i+1)<=o,(()=>`Axis must be in the interval [${-(i+1)}, ${i}]`)),l=i+o+1),u.splice(l,0,1),T({inputs:{x:s},backend:n,attrs:{shape:u}})}const pt={kernelName:r.ExpandDims,backendName:"cpu",kernelFunc:ct};var dt=n(2550);const ht=(0,m.b)(((e,t)=>e/t)),mt=(0,j.j)(r.RealDiv,ht),ft={kernelName:r.RealDiv,backendName:"cpu",kernelFunc:mt};var gt=n(2916);function yt(e,t,n){const a=e.shape,s=a[0],o=a[1],i=n.data.get(e.dataId),u=i.complexTensorInfos.real,l=i.complexTensorInfos.imag,c=[s,o],p=r.util.sizeFromShape(c),d=r.util.getTypedArrayFromDType("float32",p),h=r.util.getTypedArrayFromDType("float32",p);for(let e=0;e<s;e++){const a=(0,ie.tP)({inputs:{x:u},backend:n,attrs:{begin:[e,0],size:[1,o]}}),s=(0,ie.tP)({inputs:{x:l},backend:n,attrs:{begin:[e,0],size:[1,o]}}),i=(0,ge.P)({inputs:{real:a,imag:s},backend:n}),{real:c,imag:p}=bt(i,t,n),m=r.backend_util.mergeRealAndImagArrays(c,p);for(let t=0;t<o;t++){const n=r.backend_util.getComplexWithIndex(m,t);d[e*o+t]=n.real,h[e*o+t]=n.imag}n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(i)}const m=n.makeTensorInfo(c,"float32",d),f=n.makeTensorInfo(c,"float32",h),g=(0,ge.P)({inputs:{real:m,imag:f},backend:n});return n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(f),g}function bt(e,t,n){const a=r.util.sizeFromShape(e.shape),s=n.data.get(e.dataId),o=n.data.get(s.complexTensorInfos.real.dataId).values,i=n.data.get(s.complexTensorInfos.imag.dataId).values;if(0==((u=a)&u-1)){const s=kt(o,i,a,t,n),u=[e.shape[0],e.shape[1]];if(t){const e=n.makeTensorInfo(u,"float32",s.real),t=n.makeTensorInfo(u,"float32",s.imag),o=n.makeTensorInfo([],"float32",r.util.createScalarValue(a,"float32")),i=(0,p.y)({inputs:{x:o},backend:n}),l=ft.kernelFunc({inputs:{a:e,b:o},backend:n}),c=ft.kernelFunc({inputs:{a:t,b:i},backend:n}),d=n.data.get(l.dataId).values,h=n.data.get(c.dataId).values;return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(c),{real:d,imag:h}}return s}{const e=function(e,t,n){const a=new Float32Array(2*t);for(let s=0;s<t;s++){let o=0,i=0;for(let a=0;a<t;a++){const u=r.backend_util.exponent(s*a,t,n),l=r.backend_util.getComplexWithIndex(e,a);o+=l.real*u.real-l.imag*u.imag,i+=l.real*u.imag+l.imag*u.real}n&&(o/=t,i/=t),r.backend_util.assignToTypedArray(a,o,i,s)}return a}(r.backend_util.mergeRealAndImagArrays(o,i),a,t);return r.backend_util.splitRealAndImagArrays(e)}var u}function kt(e,t,n,a,s){if(1===n)return{real:e,imag:t};const o=r.backend_util.mergeRealAndImagArrays(e,t),i=n/2,u=r.backend_util.complexWithEvenIndex(o),l=u.real,c=u.imag,p=[l.length],d=s.makeTensorInfo(p,"float32",l),h=s.makeTensorInfo(p,"float32",c),m=(0,ge.P)({inputs:{real:d,imag:h},backend:s}),f=r.backend_util.complexWithOddIndex(o),g=f.real,y=f.imag,b=[g.length],k=s.makeTensorInfo(b,"float32",g),w=s.makeTensorInfo(b,"float32",y),v=(0,ge.P)({inputs:{real:k,imag:w},backend:s}),N=kt(l,c,i,a,s),x=N.real,T=N.imag,I=[x.length],_=s.makeTensorInfo(I,"float32",x),E=s.makeTensorInfo(I,"float32",T),A=(0,ge.P)({inputs:{real:_,imag:E},backend:s}),M=kt(g,y,i,a,s),D=M.real,F=M.imag,$=[D.length],O=s.makeTensorInfo($,"float32",D),B=s.makeTensorInfo($,"float32",F),R=(0,ge.P)({inputs:{real:O,imag:B},backend:s}),V=r.backend_util.exponents(n,a),C=[V.real.length],z=s.makeTensorInfo(C,"float32",V.real),P=s.makeTensorInfo(C,"float32",V.imag),L=(0,ge.P)({inputs:{real:z,imag:P},backend:s}),H=(0,Ke.Jp)({inputs:{a:L,b:R},backend:s}),W=(0,S.IH)({inputs:{a:A,b:H},backend:s}),G=(0,gt.lu)({inputs:{a:A,b:H},backend:s}),U=(0,ve.k)({inputs:{input:W},backend:s}),q=(0,ve.k)({inputs:{input:G},backend:s}),j=ke({inputs:{input:W},backend:s}),K=ke({inputs:{input:G},backend:s}),X=Ne({inputs:[U,q],backend:s,attrs:{axis:0}}),Z=Ne({inputs:[j,K],backend:s,attrs:{axis:0}}),Q=s.data.get(X.dataId).values,Y=s.data.get(Z.dataId).values;return s.disposeIntermediateTensorInfo(d),s.disposeIntermediateTensorInfo(h),s.disposeIntermediateTensorInfo(m),s.disposeIntermediateTensorInfo(k),s.disposeIntermediateTensorInfo(w),s.disposeIntermediateTensorInfo(v),s.disposeIntermediateTensorInfo(_),s.disposeIntermediateTensorInfo(E),s.disposeIntermediateTensorInfo(A),s.disposeIntermediateTensorInfo(O),s.disposeIntermediateTensorInfo(B),s.disposeIntermediateTensorInfo(R),s.disposeIntermediateTensorInfo(z),s.disposeIntermediateTensorInfo(P),s.disposeIntermediateTensorInfo(L),s.disposeIntermediateTensorInfo(H),s.disposeIntermediateTensorInfo(W),s.disposeIntermediateTensorInfo(G),s.disposeIntermediateTensorInfo(U),s.disposeIntermediateTensorInfo(j),s.disposeIntermediateTensorInfo(q),s.disposeIntermediateTensorInfo(K),s.disposeIntermediateTensorInfo(X),s.disposeIntermediateTensorInfo(Z),{real:Q,imag:Y}}const wt={kernelName:r.FFT,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:a}=t,s=r.util.sizeFromShape(a.shape),o=a.shape[a.shape.length-1],i=T({inputs:{x:a},backend:n,attrs:{shape:[s/o,o]}}),u=yt(i,!1,n),l=T({inputs:{x:u},backend:n,attrs:{shape:a.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(u),l}};function vt(e){const{backend:t,attrs:n}=e,{shape:a,value:s,dtype:o}=n,i=o||r.util.inferDtype(s),u=r.util.getArrayFromDType(i,r.util.sizeFromShape(a));return function(e,t,n){e.fill(t)}(u,s),t.makeTensorInfo(a,i,u)}const Nt={kernelName:r.Fill,backendName:"cpu",kernelFunc:vt},xt={kernelName:r.FlipLeftRight,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:a}=e,s=n,o=r.util.getTypedArrayFromDType(a.dtype,r.util.sizeFromShape(a.shape)),[i,u,l,c]=a.shape,p=s.data.get(a.dataId).values;for(let e=0;e<i;e++){const t=e*l*u*c;for(let e=0;e<u;e++){const n=e*(l*c);for(let e=0;e<l;e++){const r=e*c;for(let a=0;a<c;a++){const s=Math.round(l-e-1),i=t+n+r+a;let u=p[i];s>=0&&s<l&&(u=p[t+n+s*c+a]),o[i]=u}}}}return{dataId:s.write(o,a.shape,a.dtype),shape:a.shape,dtype:a.dtype}}};var St=n(6152);const Tt=(0,m.b)(((e,t)=>Math.floor(e/t))),It=(0,j.j)(r.FloorDiv,Tt,null,"int32"),_t={kernelName:r.FloorDiv,backendName:"cpu",kernelFunc:It},Et={kernelName:r.FusedConv2D,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,filter:s,bias:o,preluActivationWeights:i}=t,{strides:u,pad:l,dataFormat:c,dilations:p,dimRoundingMode:d,activation:h,leakyreluAlpha:m}=r;let f=Se({inputs:{x:a,filter:s},backend:n,attrs:{strides:u,pad:l,dataFormat:c,dilations:p,dimRoundingMode:d}});if(o){const e=f;if("NCHW"===c&&1===o.shape.length&&1!==o.shape[0]){const e=T({inputs:{x:o},backend:n,attrs:{shape:[o.shape[0],1,1]}});f=(0,S.IH)({inputs:{a:f,b:e},backend:n}),n.disposeIntermediateTensorInfo(e)}else f=(0,S.IH)({inputs:{a:f,b:o},backend:n});n.disposeIntermediateTensorInfo(e)}if(h){const e=f;if("NCHW"===c&&"prelu"===h&&1===i.shape.length&&1!==i.shape[0]){const e=T({inputs:{x:i},backend:n,attrs:{shape:[i.shape[0],1,1]}});f=x(n,f,h,e,m),n.disposeIntermediateTensorInfo(e)}else f=x(n,f,h,i,m);n.disposeIntermediateTensorInfo(e)}return f}},At={kernelName:r.FusedDepthwiseConv2D,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,filter:s,bias:o,preluActivationWeights:i}=t,{strides:u,pad:l,dataFormat:c,dilations:p,dimRoundingMode:d,activation:h,leakyreluAlpha:m}=r;let f=Pe({inputs:{x:a,filter:s},backend:n,attrs:{strides:u,pad:l,dataFormat:c,dilations:p,dimRoundingMode:d}});if(o){const e=f;f=(0,S.IH)({inputs:{a:f,b:o},backend:n}),n.disposeIntermediateTensorInfo(e)}if(h){const e=f;f=x(n,f,h,i,m),n.disposeIntermediateTensorInfo(e)}return f}};var Mt=n(6645);const Dt={kernelName:r.GatherNd,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:a,indices:s}=t,o=r.util.sizeFromShape(a.shape),i=s.shape,u=i[i.length-1],[l,c,p,d]=r.backend_util.prepareAndValidate(a,s);if(0===c)return n.makeTensorInfo(l,a.dtype,[]);const h=n.data.get(s.dataId).values,m=n.bufferSync(a),f=(0,Mt.m)(h,m,a.dtype,c,u,p,d,a.shape,o);return n.makeTensorInfo(l,a.dtype,f.values)}};var Ft=n(2595);const $t={kernelName:r.GatherV2,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:o,indices:i}=t,{axis:u,batchDims:l}=s;(0,a.H)([o,i],"gatherV2");const c=r.util.parseAxisParam(u,o.shape)[0],p=n.data.get(i.dataId).values,d=o.shape[c];for(let e=0;e<p.length;++e){const t=p[e];r.util.assert(t<=d-1&&t>=0,(()=>`GatherV2: the index value ${t} is not in [0, ${d-1}]`))}let h=l;null==l&&(h=0);const m=r.util.sizeFromShape(i.shape),f=r.backend_util.segment_util.collectGatherOpShapeInfo(o,i,c,h),g=T({inputs:{x:o},backend:n,attrs:{shape:[f.batchSize,f.outerSize,f.dimSize,f.sliceSize]}}),y=T({inputs:{x:i},backend:n,attrs:{shape:[f.batchSize,m/f.batchSize]}}),b=[f.batchSize,f.outerSize,m/f.batchSize,f.sliceSize],k=n.bufferSync(y),w=n.bufferSync(g),v=(0,Ft.i)(w,k,b);return n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(y),n.makeTensorInfo(f.outputShape,v.dtype,v.values)}};var Ot=n(1826),Bt=n(2680);const Rt={kernelName:r.IFFT,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:a}=t,s=r.util.sizeFromShape(a.shape),o=a.shape[a.shape.length-1],i=T({inputs:{x:a},backend:n,attrs:{shape:[s/o,o]}}),u=yt(i,!0,n),l=T({inputs:{x:u},backend:n,attrs:{shape:a.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(u),l}},Vt=(0,u.A)(r.IsFinite,(e=>Number.isFinite(e)?1:0),"bool"),Ct={kernelName:r.IsFinite,backendName:"cpu",kernelFunc:Vt},zt=(0,u.A)(r.IsInf,(e=>Math.abs(e)===1/0?1:0),"bool"),Pt={kernelName:r.IsInf,backendName:"cpu",kernelFunc:zt},Lt=(0,u.A)(r.IsNan,(e=>Number.isNaN(e)?1:0),"bool"),Ht={kernelName:r.IsNan,backendName:"cpu",kernelFunc:Lt};var Wt=n(3629),Gt=n(8288),Ut=n(8269);const qt={kernelName:r.LinSpace,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:r,stop:a,num:s}=n,o=(0,Ut.b)(r,a,s);return t.makeTensorInfo([o.length],"float32",o)}};var jt=n(8956);const Kt=(0,u.A)(r.Log1p,(e=>Math.log1p(e))),Xt={kernelName:r.Log1p,backendName:"cpu",kernelFunc:Kt},Zt=(0,m.b)(((e,t)=>e&&t)),Qt=(0,j.j)(r.LogicalAnd,Zt,null,"bool"),Yt={kernelName:r.LogicalAnd,backendName:"cpu",kernelFunc:Qt},Jt=(0,u.A)(r.LogicalNot,(e=>e?0:1),"bool"),en={kernelName:r.LogicalNot,backendName:"cpu",kernelFunc:Jt},tn=(0,m.b)(((e,t)=>e||t)),nn=(0,j.j)(r.LogicalOr,tn,null,"bool"),rn={kernelName:r.LogicalOr,backendName:"cpu",kernelFunc:nn},an={kernelName:r.LRN,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:o}=t,{depthRadius:i,bias:u,alpha:l,beta:c}=s;(0,a.H)(o,"LRN");const p=o.shape[3],d=p-1,h=n.data.get(o.dataId).values,m=r.util.sizeFromShape(o.shape),f=new Float32Array(m);function g(e){const t=e%p;let n=e-t+Math.max(0,t-i);const r=e-t+Math.min(t+i,d);let a=0;for(;n<=r;n++){const e=h[n];a+=e*e}return a}for(let e=0;e<m;e++){const t=g(e),n=h[e]*Math.pow(u+l*t,-c);f[e]=n}return n.makeTensorInfo(o.shape,o.dtype,f)}},sn={kernelName:r.LRNGrad,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:o,y:i,dy:u}=t,{depthRadius:l,bias:c,alpha:p,beta:d}=s;(0,a.H)(u,"LRNGrad");const h=r.util.sizeFromShape(u.shape),m=u.shape[3],f=n.data.get(u.dataId).values,g=n.data.get(o.dataId).values,y=n.data.get(i.dataId).values,b=new Float32Array(h),k=h;for(let e=0;e<k;e++){const t=e%m,n=e-t+Math.max(0,t-l),r=e-t+Math.min(m,t+l+1);let a=0;for(let e=n;e<r;e++)a+=Math.pow(g[e],2);a=p*a+c;for(let t=n;t<r;t++){let n=-2*p*d*g[t]*y[e]/a;e===t&&(n+=Math.pow(a,-d)),n*=f[e],b[t]+=n}}return n.makeTensorInfo(u.shape,o.dtype,b)}};var on=n(6727),un=n(1355);function ln(e){const{inputs:t,backend:n,attrs:s}=e,{x:o}=t,{reductionIndices:i,keepDims:u}=s,l=n;let c=o.shape;const p=c.length,d=r.util.parseAxisParam(i,c);let h=d;const m=r.backend_util.getAxesPermutation(h,p);let f=l.data.get(o.dataId).values;if(null!=m){const e=new Array(p);for(let t=0;t<e.length;t++)e[t]=c[m[t]];f=(0,un.H)(f,c,o.dtype,m,e),h=r.backend_util.getInnerMostAxes(h.length,p),c=e}(0,a.H)(o,"max"),r.backend_util.assertAxesAreInnerMostDims("max",h,p);const[g,y]=r.backend_util.computeOutAndReduceShapes(c,h),b=r.util.sizeFromShape(y),k=(0,on.B)(f,b,g,o.dtype),w=l.write(k,g,o.dtype);let v=g;return u&&(v=r.backend_util.expandShapeToKeepDim(g,d)),{dataId:w,shape:v,dtype:o.dtype}}const cn={kernelName:r.Max,backendName:"cpu",kernelFunc:ln};var pn=n(9223);const dn={kernelName:r.MaxPool,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:o}=t;(0,a.H)(o,"maxPool");const{filterSize:i,strides:u,pad:l,dimRoundingMode:c}=s;r.util.assert(r.backend_util.eitherStridesOrDilationsAreOne(u,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${u} and dilations '1'`));const d=r.backend_util.computePool2DInfo(o.shape,i,u,1,l,c);let h;if(1===d.filterWidth&&1===d.filterHeight&&r.util.arraysEqual(d.inShape,d.outShape))h=(0,p.y)({inputs:{x:o},backend:n});else{const e=n.data.get(o.dataId).values,t=r.util.computeStrides(o.shape),a=J(e,o.shape,o.dtype,t,d,"max");h=n.makeTensorInfo(d.outShape,o.dtype,a.values)}return h}},hn={kernelName:r.MaxPool3D,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:o}=t,{filterSize:i,strides:u,pad:l,dimRoundingMode:c,dataFormat:p}=s;(0,a.H)(o,"maxPool3d");const d=r.backend_util.computePool3DInfo(o.shape,i,u,1,l,c,p),h=te(n.data.get(o.dataId).values,o.shape,o.dtype,r.util.computeStrides(o.shape),d,"max");return n.makeTensorInfo(h.shape,"float32",h.values)}},mn={kernelName:r.MaxPool3DGrad,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:o,input:i}=t,{filterSize:u,strides:l,pad:c,dimRoundingMode:p}=s;(0,a.H)([o,i],"maxPool3DGrad");const d=r.backend_util.computePool3DInfo(i.shape,u,l,1,c,p),h=function(e,t){const n=(0,r.buffer)(t.outShape,"int32"),a=t.strideDepth,s=t.strideHeight,o=t.strideWidth,i=t.dilationDepth,u=t.dilationHeight,l=t.dilationWidth,c=t.effectiveFilterDepth,p=t.effectiveFilterHeight,d=t.effectiveFilterWidth,h=t.padInfo.front,m=t.padInfo.top,f=t.padInfo.left;for(let r=0;r<t.batchSize;++r)for(let g=0;g<t.inChannels;++g)for(let y=0;y<t.outDepth;++y){const b=y*a-h;let k=b;for(;k<0;)k+=i;const w=Math.min(t.inDepth,c+b);for(let a=0;a<t.outHeight;++a){const c=a*s-m;let h=c;for(;h<0;)h+=u;const v=Math.min(t.inHeight,p+c);for(let s=0;s<t.outWidth;++s){const m=s*o-f;let N=m;for(;N<0;)N+=l;const x=Math.min(t.inWidth,d+m);let S=Number.NEGATIVE_INFINITY,T=-1;for(let t=k;t<w;t+=i){const n=t-b;for(let a=h;a<v;a+=u){const s=a-c;for(let o=N;o<x;o+=l){const i=o-m,u=e.get(r,t,a,o,g);u>=S&&(S=u,T=n*p*d+s*p+i)}}}n.set(T,r,y,a,s,g)}}}return n}(n.bufferSync(i),d),m=d.strideDepth,f=d.strideHeight,g=d.strideWidth,y=d.dilationDepth,b=d.dilationHeight,k=d.dilationWidth,w=d.effectiveFilterDepth,v=d.effectiveFilterHeight,N=d.effectiveFilterWidth,x=w-1-d.padInfo.front,S=N-1-d.padInfo.left,T=v-1-d.padInfo.top,I=(0,r.buffer)(i.shape,"float32"),_=n.bufferSync(o);for(let e=0;e<d.batchSize;++e)for(let t=0;t<d.inChannels;++t)for(let n=0;n<d.inDepth;++n)for(let r=0;r<d.inHeight;++r)for(let a=0;a<d.inWidth;++a){const s=n-x,o=r-T,i=a-S;let u=0;for(let n=0;n<w;n+=y){const r=(s+n)/m;if(!(r<0||r>=d.outDepth||Math.floor(r)!==r))for(let a=0;a<v;a+=b){const s=(o+a)/f;if(!(s<0||s>=d.outHeight||Math.floor(s)!==s))for(let o=0;o<N;o+=k){const l=(i+o)/g;if(l<0||l>=d.outWidth||Math.floor(l)!==l)continue;const c=w*v*N-1-h.get(e,r,s,l,t)===n*v*N+a*N+o?1:0;0!==c&&(u+=_.get(e,r,s,l,t)*c)}}}I.set(u,e,n,r,a,t)}return n.makeTensorInfo(I.shape,I.dtype,I.values)}},fn={kernelName:r.MaxPoolGrad,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:o,input:i,output:u}=t,l=i;(0,a.H)([i,u],"maxPoolGrad");const{filterSize:c,strides:p,pad:d,dimRoundingMode:h}=s,m=r.backend_util.computePool2DInfo(l.shape,c,p,1,d,h),f=n.data.get(l.dataId).values,g=(0,r.buffer)(m.outShape,l.dtype,ee(f,l.shape,l.dtype,m).values),y=m.strideHeight,b=m.strideWidth,k=m.dilationHeight,w=m.dilationWidth,v=m.effectiveFilterHeight,N=m.effectiveFilterWidth,x=N-1-m.padInfo.left,S=v-1-m.padInfo.top,T=(0,r.buffer)(l.shape,"float32"),I=n.data.get(o.dataId).values,_=(0,r.buffer)(o.shape,"float32",I);for(let e=0;e<m.batchSize;++e)for(let t=0;t<m.inChannels;++t)for(let n=0;n<m.inHeight;++n)for(let r=0;r<m.inWidth;++r){const a=n-S,s=r-x;let o=0;for(let n=0;n<v;n+=k){const r=(a+n)/y;if(!(r<0||r>=m.outHeight||Math.floor(r)!==r))for(let a=0;a<N;a+=w){const i=(s+a)/b;if(i<0||i>=m.outWidth||Math.floor(i)!==i)continue;const u=v*N-1-g.get(e,r,i,t)===n*N+a?1:0;0!==u&&(o+=_.get(e,r,i,t)*u)}}T.set(o,e,n,r,t)}return n.makeTensorInfo(T.shape,T.dtype,T.values)}},gn={kernelName:r.MaxPoolWithArgmax,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{filterSize:o,strides:i,pad:u,includeBatchInIndex:l}=t,c=n;(0,a.H)(s,"MaxPoolWithArgmax");const p=c.data.get(s.dataId).values,d=r.backend_util.computePool2DInfo(s.shape,o,i,[1,1],u),[h,m]=function(e,t,n,a,s){const o=J(e,0,n,r.util.computeStrides(t),s,"max"),i=ee(e,t,n,s,!0,a);return[o.values,i.values]}(p,s.shape,s.dtype,l,d),f=c.write(h,d.outShape,s.dtype),g=c.write(m,d.outShape,s.dtype);return[{dataId:f,shape:d.outShape,dtype:s.dtype},{dataId:g,shape:d.outShape,dtype:"int32"}]}},yn={kernelName:r.Mean,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:s}=t,{axis:o,keepDims:i}=a,u=r.util.parseAxisParam(o,s.shape),l=r.backend_util.computeOutAndReduceShapes(s.shape,u)[1],c=r.util.sizeFromShape(l),p=[],d=n.makeTensorInfo([],"float32",new Float32Array([c]));p.push(d);const h=(0,de.pj)({inputs:{x:s},backend:n,attrs:{dtype:"float32"}});p.push(h);const m=mt({inputs:{a:h,b:d},backend:n});p.push(m);const f=Ze({inputs:{x:m},backend:n,attrs:{axis:o,keepDims:i}});return p.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}},bn={kernelName:r.Min,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:o}=t,{axis:i,keepDims:u}=s;(0,a.H)(o,"min");const l=r.util.parseAxisParam(i,o.shape);let c=l;const p=r.backend_util.getAxesPermutation(c,o.shape.length);let d=o;null!=p&&(d=(0,R.p)({inputs:{x:o},backend:n,attrs:{perm:p}}),c=r.backend_util.getInnerMostAxes(c.length,o.shape.length)),r.backend_util.assertAxesAreInnerMostDims("min",c,d.shape.length);const[h,m]=r.backend_util.computeOutAndReduceShapes(d.shape,c),f=r.util.sizeFromShape(m),g=r.util.makeZerosTypedArray(r.util.sizeFromShape(h),d.dtype),y=n.data.get(d.dataId).values;for(let e=0;e<g.length;++e){const t=e*f;let n=y[t];for(let e=0;e<f;++e){const r=y[t+e];(Number.isNaN(r)||r<n)&&(n=r)}g[e]=n}null!=p&&n.disposeIntermediateTensorInfo(d);const b=n.makeTensorInfo(h,d.dtype,g);if(u){const e=T({inputs:{x:b},backend:n,attrs:{shape:r.backend_util.expandShapeToKeepDim(h,l)}});return n.disposeIntermediateTensorInfo(b),e}return b}};var kn=n(2563);const wn={kernelName:r.MirrorPad,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:o}=t,{paddings:i,mode:u}=s;(0,a.H)(o,"mirrorPad");const l=i.map(((e,t)=>e[0]+o.shape[t]+e[1])),c=i.map((e=>e[0])),p=i.map(((e,t)=>e[0]+o.shape[t])),d="reflect"===u?0:1,h=n.data.get(o.dataId).values,m=o.shape.length,f=r.util.computeStrides(o.shape),g=r.util.sizeFromShape(l),y=l.length,b=r.util.computeStrides(l),k=r.util.getTypedArrayFromDType(o.dtype,g);for(let e=0;e<g;e++){let t=r.util.indexToLoc(e,y,b);for(let e=0;e<y;e++)t[e]<c[e]?t[e]=2*c[e]-t[e]-d:t[e]>=p[e]&&(t[e]=2*(p[e]-1)-t[e]+d);t=t.map(((e,t)=>e-c[t]));const n=r.util.locToIndex(t,m,f);k[e]=h[n]}return{dataId:n.write(k,l,o.dtype),shape:l,dtype:o.dtype}}},vn=(0,m.b)(((e,t)=>{const n=e%t;return e<0&&t<0||e>=0&&t>=0?n:(n+t)%t})),Nn=(0,j.j)(r.Mod,vn),xn={kernelName:r.Mod,backendName:"cpu",kernelFunc:Nn};var Sn=n(521);function Tn(e){const{inputs:t,backend:n,attrs:a}=e,{logits:s}=t,{dim:o}=a,i=s.shape.length;let u=o;if(-1===u&&(u=i-1),u!==i-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${i} and dim was ${u}`);const l=r.util.parseAxisParam([u],s.shape),c=ln({inputs:{x:s},backend:n,attrs:{reductionIndices:l,keepDims:!1}}),p=r.backend_util.expandShapeToKeepDim(c.shape,l),d=T({inputs:{x:c},backend:n,attrs:{shape:p}}),h=(0,gt.lu)({inputs:{a:s,b:d},backend:n}),m=(0,lt.Qq)({inputs:{x:h},backend:n}),f=Ze({inputs:{x:m},backend:n,attrs:{axis:l,keepDims:!1}}),g=T({inputs:{x:f},backend:n,attrs:{shape:p}}),y=mt({inputs:{a:m,b:g},backend:n});return n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(g),y}const In={kernelName:r.Softmax,backendName:"cpu",kernelFunc:Tn},_n={kernelName:r.Multinomial,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{logits:o}=t,{numSamples:i,seed:u,normalized:l}=s;(0,a.H)(o,"multinomial");const c=l?o:Tn({inputs:{logits:o},backend:n,attrs:{dim:-1}}),p=c.shape[0],d=c.shape[1],h=n.data.get(c.dataId).values,m=[p,i],f=r.util.makeZerosTypedArray(r.util.sizeFromShape(m),"int32");for(let e=0;e<p;++e){const t=e*d,n=new Float32Array(d-1);n[0]=h[t];for(let e=1;e<n.length;++e)n[e]=n[e-1]+h[t+e];const r=Sn.alea(u.toString()),a=e*i;for(let e=0;e<i;++e){const t=r();f[a+e]=n.length;for(let r=0;r<n.length;r++)if(t<n[r]){f[a+e]=r;break}}}return l||n.disposeIntermediateTensorInfo(c),n.makeTensorInfo(m,"int32",f)}};var En=n(2376);const An=r.kernel_impls.nonMaxSuppressionV3Impl,Mn={kernelName:r.NonMaxSuppressionV3,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:o}=t,{maxOutputSize:i,iouThreshold:u,scoreThreshold:l}=r;(0,a.H)(s,"NonMaxSuppression");const c=n.data.get(s.dataId).values,p=n.data.get(o.dataId).values,{selectedIndices:d}=An(c,p,i,u,l);return n.makeTensorInfo([d.length],"int32",new Int32Array(d))}},Dn=r.kernel_impls.nonMaxSuppressionV4Impl,Fn={kernelName:r.NonMaxSuppressionV4,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:o}=t,{maxOutputSize:i,iouThreshold:u,scoreThreshold:l,padToMaxOutputSize:c}=r;(0,a.H)(s,"NonMaxSuppressionPadded");const p=n.data.get(s.dataId).values,d=n.data.get(o.dataId).values,{selectedIndices:h,validOutputs:m}=Dn(p,d,i,u,l,c);return[n.makeTensorInfo([h.length],"int32",new Int32Array(h)),n.makeTensorInfo([],"int32",new Int32Array([m]))]}},$n=r.kernel_impls.nonMaxSuppressionV5Impl,On={kernelName:r.NonMaxSuppressionV5,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:o}=t,{maxOutputSize:i,iouThreshold:u,scoreThreshold:l,softNmsSigma:c}=r;(0,a.H)(s,"NonMaxSuppressionWithScore");const p=n.data.get(s.dataId).values,d=n.data.get(o.dataId).values,h=i,m=u,f=l,g=c,{selectedIndices:y,selectedScores:b}=$n(p,d,h,m,f,g);return[n.makeTensorInfo([y.length],"int32",new Int32Array(y)),n.makeTensorInfo([b.length],"float32",new Float32Array(b))]}};var Bn=n(2874);const Rn={kernelName:r.OneHot,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:o}=t,{dtype:i,depth:u,onValue:l,offValue:c}=s;(0,a.H)(o,"oneHot");const p=r.util.sizeFromShape(o.shape),d=new Float32Array(p*u);d.fill(c);const h=n.data.get(o.dataId).values;for(let e=0;e<p;++e)h[e]>=0&&h[e]<u&&(d[e*u+h[e]]=l);return n.makeTensorInfo([...o.shape,u],i,d)}};function Vn(e){const{inputs:t,backend:n}=e,{x:r}=t;if("string"===r.dtype)throw new Error("zerosLike is not supported for string tensors");if("complex64"===r.dtype){const e=(0,ve.k)({inputs:{input:r},backend:n}),t=Vn({inputs:{x:e},backend:n}),a=ke({inputs:{input:r},backend:n}),s=Vn({inputs:{x:a},backend:n}),o=(0,ge.P)({inputs:{real:t,imag:s},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(s),o}return vt({backend:n,attrs:{shape:r.shape,value:0,dtype:r.dtype}})}const Cn={kernelName:r.ZerosLike,backendName:"cpu",kernelFunc:Vn},zn={kernelName:r.OnesLike,backendName:"cpu",kernelFunc:function e(t){const{inputs:n,backend:r}=t,{x:a}=n;if("string"===a.dtype)throw new Error("onesLike is not supported for string tensors");if("complex64"===a.dtype){const t=(0,ve.k)({inputs:{input:a},backend:r}),n=e({inputs:{x:t},backend:r}),s=ke({inputs:{input:a},backend:r}),o=Vn({inputs:{x:s},backend:r}),i=(0,ge.P)({inputs:{real:n,imag:o},backend:r});return r.disposeIntermediateTensorInfo(t),r.disposeIntermediateTensorInfo(n),r.disposeIntermediateTensorInfo(s),r.disposeIntermediateTensorInfo(o),i}return vt({backend:r,attrs:{shape:a.shape,value:1,dtype:a.dtype}})}};function Pn(e){const{inputs:t,backend:n,attrs:a}=e,{axis:s}=a;if(1===t.length)return ct({inputs:{input:t[0]},backend:n,attrs:{dim:s}});const o=t[0].shape,i=t[0].dtype;t.forEach((e=>{r.util.assertShapesMatch(o,e.shape,"All tensors passed to stack must have matching shapes"),r.util.assert(i===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const u=[],l=Ne({inputs:t.map((e=>{const t=ct({inputs:{input:e},backend:n,attrs:{dim:s}});return u.push(t),t})),backend:n,attrs:{axis:s}});return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),l}const Ln={kernelName:r.Pack,backendName:"cpu",kernelFunc:Pn},Hn={kernelName:r.PadV2,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:o}=t,{paddings:i,constantValue:u}=s;(0,a.H)(o,"pad");const l=i.map(((e,t)=>e[0]+o.shape[t]+e[1])),c=i.map((e=>e[0])),p=n.data.get(o.dataId).values,d=r.util.sizeFromShape(o.shape),h=o.shape.length,m=r.util.computeStrides(o.shape),f=r.util.sizeFromShape(l),g=l.length,y=r.util.computeStrides(l),b=r.util.getTypedArrayFromDType(o.dtype,f);0!==u&&b.fill(u);for(let e=0;e<d;e++){const t=r.util.indexToLoc(e,h,m).map(((e,t)=>e+c[t]));b[r.util.locToIndex(t,g,y)]=p[e]}return{dataId:n.write(b,l,o.dtype),shape:l,dtype:o.dtype}}},Wn=(0,m.b)(((e,t)=>Math.pow(e,t))),Gn=(0,j.j)(r.Pow,Wn),Un={kernelName:r.Pow,backendName:"cpu",kernelFunc:Gn};var qn=n(6914),jn=n(793);const Kn={kernelName:r.RaggedGather,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{paramsNestedSplits:a,paramsDenseValues:s,indices:o}=t,{outputRaggedRank:i}=r,u=a.map((e=>n.data.get(e.dataId).values)),l=a.map((e=>e.shape)),c=n.data.get(s.dataId).values,p=n.data.get(o.dataId).values,[d,h,m]=(0,jn.c)(u,l,c,s.shape,s.dtype,p,o.shape,i),f=d.map((e=>n.makeTensorInfo([e.length],"int32",e))),g=n.makeTensorInfo(m,s.dtype,h);return f.concat([g])}};var Xn=n(2410);const Zn={kernelName:r.RaggedRange,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{starts:r,limits:a,deltas:s}=t,o=n.data.get(r.dataId).values,i=n.data.get(a.dataId).values,u=n.data.get(s.dataId).values,[l,c]=(0,Xn.S)(o,r.shape,r.dtype,i,a.shape,u,s.shape);return[n.makeTensorInfo([l.length],"int32",l),n.makeTensorInfo([c.length],r.dtype,c)]}};var Qn=n(5542);const Yn={kernelName:r.RaggedTensorToTensor,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{shape:a,values:s,defaultValue:o,rowPartitionTensors:i}=t,{rowPartitionTypes:u}=r,l=n.data.get(a.dataId).values,c=n.data.get(s.dataId).values,p=n.data.get(o.dataId).values,d=i.map((e=>n.data.get(e.dataId).values)),h=i.map((e=>e.shape)),[m,f]=(0,Qn.p)(l,a.shape,c,s.shape,s.dtype,p,o.shape,d,h,u);return n.makeTensorInfo(m,s.dtype,f)}};var Jn=n(9318);const er={kernelName:r.Range,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:r,stop:a,dtype:s,step:o}=n,i=(0,Jn.b)(r,a,o,s);return t.makeTensorInfo([i.length],s,i)}},tr=(0,u.A)(r.Reciprocal,(e=>1/e)),nr={kernelName:r.Reciprocal,backendName:"cpu",kernelFunc:tr},rr={kernelName:r.ResizeBilinear,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:o}=t,{alignCorners:i,halfPixelCenters:u,size:l}=s;(0,a.H)(o,"resizeBilinear");const c=r.util.computeStrides(o.shape),[p,d]=l,[h,m,f,g]=o.shape,y=n.data.get(o.dataId).values,b=new Float32Array(r.util.sizeFromShape([h,p,d,g])),k=[i&&p>1?m-1:m,i&&d>1?f-1:f],w=[i&&p>1?p-1:p,i&&d>1?d-1:d];let v=0;const N=k[0]/w[0],x=k[1]/w[1];for(let e=0;e<h;e++)for(let t=0;t<p;t++){let n;n=u?N*(t+.5)-.5:N*t;const r=Math.max(0,Math.floor(n)),a=n-r,s=Math.min(m-1,Math.ceil(n)),o=e*c[0]+r*c[1],i=e*c[0]+s*c[1];for(let e=0;e<d;e++){let t;t=u?x*(e+.5)-.5:x*e;const n=Math.max(0,Math.floor(t)),r=t-n,s=Math.min(f-1,Math.ceil(t)),l=o+n*c[2],p=i+n*c[2],d=o+s*c[2],h=i+s*c[2];for(let e=0;e<g;e++){const t=y[l+e],n=y[p+e],s=t+(y[d+e]-t)*r,o=s+(n+(y[h+e]-n)*r-s)*a;b[v++]=o}}}return n.makeTensorInfo([h,p,d,g],"float32",b)}},ar={kernelName:r.ResizeBilinearGrad,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:o,dy:i}=t,{alignCorners:u}=s;(0,a.H)([i,o],"resizeBilinearGrad");const l=r.util.computeStrides(o.shape),[c,p,d,h]=o.shape,[,m,f]=i.shape,g=new Float32Array(c*p*d*h),y=[u&&m>1?p-1:p,u&&f>1?d-1:d],b=[u&&m>1?m-1:m,u&&f>1?f-1:f],k=y[0]/b[0],w=y[1]/b[1],v=n.data.get(i.dataId).values;let N=0;for(let e=0;e<c;e++){const t=e*l[0];for(let e=0;e<m;e++){const n=e*k,r=Math.floor(n),a=Math.min(Math.ceil(n),p-1),s=t+r*l[1],o=t+a*l[1],i=n-r,u=1-i;for(let e=0;e<f;e++){const t=e*w,n=Math.floor(t),r=Math.min(Math.ceil(t),d-1),a=t-n,c=1-a,p=s+n*l[2],m=s+r*l[2],f=o+n*l[2],y=o+r*l[2],b=u*c,k=u*a,x=i*c,S=i*a;for(let e=0;e<h;e++){const t=v[N++];g[p+e]+=t*b,g[m+e]+=t*k,g[f+e]+=t*x,g[y+e]+=t*S}}}}return n.makeTensorInfo([c,d,p,h],"float32",g)}},sr={kernelName:r.ResizeNearestNeighbor,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:o}=t,{alignCorners:i,halfPixelCenters:u,size:l}=s;(0,a.H)(o,"resizeNearestNeighbor");const c=r.util.computeStrides(o.shape),[p,d]=l,[h,m,f,g]=o.shape,y=n.data.get(o.dataId).values,b=new Float32Array(h*p*d*g),k=[i&&p>1?m-1:m,i&&d>1?f-1:f],w=[i&&p>1?p-1:p,i&&d>1?d-1:d],v=k[0]/w[0],N=k[1]/w[1];let x=0;for(let e=0;e<h;e++){const t=e*c[0];for(let e=0;e<p;e++){const n=u?v*(e+.5):v*e;let r=Math.min(m-1,i?Math.round(n):Math.floor(n));u&&(r=Math.max(0,r));const a=t+r*c[1];for(let e=0;e<d;e++){const t=u?N*(e+.5):N*e;let n=Math.min(f-1,i?Math.round(t):Math.floor(t));u&&(n=Math.max(0,n));const r=a+n*c[2];for(let e=0;e<g;e++){const t=y[r+e];b[x++]=t}}}}return n.makeTensorInfo([h,p,d,g],o.dtype,b)}},or={kernelName:r.ResizeNearestNeighborGrad,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:o,dy:i}=t,{alignCorners:u}=s;(0,a.H)([i,o],"resizeNearestNeighborGrad");const l=r.util.computeStrides(o.shape),c=r.util.computeStrides(i.shape),[p,d,h,m]=o.shape,[,f,g]=i.shape,y=new Float32Array(p*d*h*m),b=n.data.get(i.dataId).values,k=[u&&f>1?d-1:d,u&&g>1?h-1:h],w=[u&&f>1?f-1:f,u&&g>1?g-1:g],v=k[0]/w[0],N=k[1]/w[1],x=1/v,S=1/N,T=2*Math.ceil(x)+2,I=2*Math.ceil(S)+2;for(let e=0;e<p;e++){const t=e*l[0];for(let e=0;e<d;e++){const n=t+e*l[1],r=Math.floor(e*x),a=Math.floor(r-T/2);for(let r=0;r<h;r++){const s=n+r*l[2],o=Math.floor(r*S),i=Math.floor(o-I/2);for(let n=0;n<m;n++){let o=0;for(let s=0;s<T;s++){const l=s+a;if(l<0||l>=f)continue;const p=t+l*c[1],m=l*v;if(e===Math.min(d-1,u?Math.round(m):Math.floor(m)))for(let e=0;e<I;e++){const t=e+i;if(t<0||t>=g)continue;const a=p+t*c[2],s=t*N;r===Math.min(h-1,u?Math.round(s):Math.floor(s))&&(o+=b[a+n])}}y[s+n]=o}}}}return n.makeTensorInfo(o.shape,o.dtype,y)}},ir={kernelName:r.Reverse,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:o}=t,{dims:i}=s;(0,a.H)(o,"reverse");const u=o.shape.length,l=r.util.parseAxisParam(i,o.shape);if(0===u)return(0,p.y)({inputs:{x:o},backend:n});const c=new r.TensorBuffer(o.shape,o.dtype),d=n.bufferSync(o);for(let e=0;e<c.size;e++){const t=c.indexToLoc(e),n=t.slice();l.forEach((e=>n[e]=o.shape[e]-1-n[e])),c.set(d.get(...n),...t)}return n.makeTensorInfo(c.shape,c.dtype,c.values)}},ur={kernelName:r.RotateWithOffset,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:a}=e,{radians:s,fillValue:o,center:i}=t,u=n,l=r.util.getTypedArrayFromDType(a.dtype,r.util.sizeFromShape(a.shape)),[c,p,d,h]=a.shape,[m,f]=r.backend_util.getImageCenter(i,p,d),g=Math.sin(s),y=Math.cos(s),b=u.data.get(a.dataId).values;for(let e=0;e<c;e++){const t=e*d*p*h;for(let e=0;e<p;e++){const n=e*(d*h);for(let r=0;r<d;r++){const a=r*h;for(let s=0;s<h;s++){const i=[c,e,r,s],u=i[2],k=i[1];let w=(u-m)*y-(k-f)*g,v=(u-m)*g+(k-f)*y;w=Math.round(w+m),v=Math.round(v+f);let N=o;"number"!=typeof o&&(N=3===s?255:o[s]),w>=0&&w<d&&v>=0&&v<p&&(N=b[t+v*(d*h)+w*h+s]),l[t+n+a+s]=N}}}}return{dataId:u.write(l,a.shape,a.dtype),shape:a.shape,dtype:a.dtype}}},lr=(0,u.A)(r.Round,(e=>{const t=Math.floor(e);return e-t<.5?Math.floor(e):e-t>.5?Math.ceil(e):t%2==0?t:t+1})),cr={kernelName:r.Round,backendName:"cpu",kernelFunc:lr};var pr=n(6989),dr=n(7114);const hr={kernelName:r.ScatterNd,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{indices:s,updates:o}=t,{shape:i}=a,{sliceRank:u,numUpdates:l,sliceSize:c,strides:p,outputSize:d}=r.backend_util.calculateShapes(o,s,i),h=n.bufferSync(s),m=n.bufferSync(o),f=(0,dr.N)(h,m,i,d,c,l,u,p,0,!0);return n.makeTensorInfo(i,f.dtype,f.values)}};function mr(e,t){let n=0,r=e.length,a=0;for(;n<r;)a=Math.floor((n+r)/2),e[a]<t?n=a+1:r=a;return r}function fr(e,t){let n=0,r=e.length,a=0;for(;n<r;)a=Math.floor((n+r)/2),e[a]<=t?n=a+1:r=a;return r}const gr={kernelName:r.SearchSorted,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{sortedSequence:s,values:o}=t,{side:i}=a,u=function(e,t,n,a,s,o){const i=r.util.getArrayFromDType("int32",n*s);for(let r=0;r<n;++r){const n=e.slice(r*a,(r+1)*a),u=r*s;for(let e=0;e<s;++e)i[u+e]="left"===o?mr(n,t[e+u]):fr(n,t[e+u])}return i}(n.data.get(s.dataId).values,n.data.get(o.dataId).values,s.shape[0],s.shape[1],o.shape[1],i);return n.makeTensorInfo(o.shape,"int32",u)}},yr={kernelName:r.Select,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:s,t:o,e:i}=t;(0,a.H)([s,o,i],"select");const u=s.shape.length,l=n.data.get(s.dataId).values,c=n.data.get(o.dataId).values,p=n.data.get(i.dataId).values,d=(0,r.upcastType)(o.dtype,i.dtype),h=r.util.makeZerosTypedArray(r.util.sizeFromShape(o.shape),d);let m=0;const f=0===u||u>1||1===o.shape.length?1:r.util.sizeFromShape(o.shape.slice(1));for(let e=0;e<l.length;e++)for(let t=0;t<f;t++)1===l[e]?h[m++]=c[e]:h[m++]=p[e];return n.makeTensorInfo(o.shape,d,h)}},br=r.backend_util.SELU_SCALEALPHA,kr=r.backend_util.SELU_SCALE,wr=(0,u.A)(r.Selu,(e=>e>=0?kr*e:br*(Math.exp(e)-1))),vr={kernelName:r.Selu,backendName:"cpu",kernelFunc:wr},Nr=(0,u.A)(r.Sign,(e=>e<0?-1:e>0?1:0)),xr={kernelName:r.Sign,backendName:"cpu",kernelFunc:Nr},Sr=(0,u.A)(r.Sin,(e=>Math.sin(e))),Tr={kernelName:r.Sin,backendName:"cpu",kernelFunc:Sr},Ir=(0,u.A)(r.Sinh,(e=>Math.sinh(e))),_r={kernelName:r.Sinh,backendName:"cpu",kernelFunc:Ir},Er=Math.log(1.1920928955078125e-7)+2,Ar=(0,u.A)(r.Softplus,(e=>{const t=e>-Er,n=e<Er,r=Math.exp(e);let a;return a=n?r:t?e:Math.log(1+r),a})),Mr={kernelName:r.Softplus,backendName:"cpu",kernelFunc:Ar},Dr={kernelName:r.SpaceToBatchND,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:o}=t,{blockShape:i,paddings:u}=s;(0,a.H)([o],"spaceToBatchND");const l=r.util.sizeFromShape(i),c=[[0,0]];c.push(...u);for(let e=1+i.length;e<o.shape.length;++e)c.push([0,0]);const p=Hn.kernelFunc({inputs:{x:o},backend:n,attrs:{paddings:c,constantValue:0}}),d=r.backend_util.getReshaped(p.shape,i,l,!1),h=r.backend_util.getPermuted(d.length,i.length,!1),m=r.backend_util.getReshapedPermuted(p.shape,i,l,!1),f=T({inputs:{x:p},backend:n,attrs:{shape:d}}),g={x:f},y={perm:h},b=(0,R.p)({inputs:g,backend:n,attrs:y}),k=T({inputs:{x:b},backend:n,attrs:{shape:m}});return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(b),k}};var Fr=n(1041);const $r={kernelName:r.SparseFillEmptyRows,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{indices:r,values:a,denseShape:s,defaultValue:o}=t;if(1!==s.shape.length)throw new Error(`Dense shape must be a vector, saw:\n        ${s.shape}`);if(2!==r.shape.length)throw new Error(`Indices must be a matrix, saw:\n        ${r.shape}`);if(1!==a.shape.length)throw new Error(`Values must be a vector, saw:\n        ${a.shape}`);if(0!==o.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${o.shape}`);const i=n.data.get(r.dataId).values,u=n.data.get(a.dataId).values,l=n.data.get(s.dataId).values,c=n.data.get(o.dataId).values[0],[p,d,h,m,f]=(0,Fr.c)(i,r.shape,r.dtype,u,a.dtype,l,c);return[n.makeTensorInfo(d,r.dtype,p),n.makeTensorInfo([d[0]],a.dtype,h),n.makeTensorInfo([m.length],"bool",new Uint8Array(m.map((e=>Number(e))))),n.makeTensorInfo([f.length],r.dtype,new Int32Array(f))]}};var Or=n(3541);const Br={kernelName:r.SparseReshape,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{inputIndices:r,inputShape:a,newShape:s}=t;if(2!==r.shape.length)throw new Error(`Input indices should be a matrix but received shape\n        ${r.shape}`);if(1!==a.shape.length)throw new Error(`Input shape should be a vector but received shape\n        ${a.shape}`);if(1!==s.shape.length)throw new Error(`Target shape should be a vector but received shape ${s.shape}`);const o=Array.from(n.data.get(a.dataId).values),i=n.data.get(r.dataId).values,u=Array.from(n.data.get(s.dataId).values),[l,c,p]=(0,Or.U)(i,r.shape,r.dtype,o,u);return[n.makeTensorInfo(c,r.dtype,l),n.makeTensorInfo([p.length],s.dtype,new Int32Array(p))]}};var Rr=n(7917);const Vr={kernelName:r.SparseSegmentMean,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:r,indices:a,segmentIds:s}=t;if(r.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==a.shape.length)throw new Error(`Indices should be a vector but received shape\n          ${a.shape}`);if(1!==s.shape.length)throw new Error(`Segment ids should be a vector but received shape\n          ${s.shape}`);if(a.shape[0]!==s.shape[0])throw new Error("segmentIds and indices should have same size.");const o=n.data.get(r.dataId).values,i=n.data.get(a.dataId).values,u=n.data.get(s.dataId).values,[l,c]=(0,Rr.V)(o,r.shape,r.dtype,i,u,!0);return n.makeTensorInfo(c,r.dtype,l)}},Cr={kernelName:r.SparseSegmentSum,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:r,indices:a,segmentIds:s}=t;if(r.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==a.shape.length)throw new Error(`Indices should be a vector but received shape\n         ${a.shape}`);if(1!==s.shape.length)throw new Error(`Segment ids should be a vector but received shape\n         ${s.shape}`);if(a.shape[0]!==s.shape[0])throw new Error("segmentIds and indices should have same size.");const o=n.data.get(r.dataId).values,i=n.data.get(a.dataId).values,u=n.data.get(s.dataId).values,[l,c]=(0,Rr.V)(o,r.shape,r.dtype,i,u);return n.makeTensorInfo(c,r.dtype,l)}},zr={kernelName:r.SparseToDense,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{sparseIndices:s,sparseValues:o,defaultValue:i}=t,{outputShape:u}=a,{sliceRank:l,numUpdates:c,sliceSize:p,strides:d,outputSize:h}=r.backend_util.calculateShapes(o,s,u),m=!1,f=n.bufferSync(s);let g;switch(o.dtype){case"bool":{const e=n.bufferSync(o),t=Boolean(n.data.get(i.dataId).values[0]);g=(0,dr.N)(f,e,u,h,p,c,l,d,t,m);break}case"float32":{const e=n.bufferSync(o),t=n.data.get(i.dataId).values[0];g=(0,dr.N)(f,e,u,h,p,c,l,d,t,m);break}case"int32":{const e=n.bufferSync(o),t=n.data.get(i.dataId).values[0];g=(0,dr.N)(f,e,u,h,p,c,l,d,t,m);break}case"string":{const e=n.bufferSync(o),t=r.util.decodeString(n.data.get(i.dataId).values[0]);g=(0,dr.N)(f,e,u,h,p,c,l,d,t,m);break}default:throw new Error(`Unsupported type ${o.dtype}`)}return n.makeTensorInfo(u,g.dtype,g.values)}},Pr={kernelName:r.SplitV,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:s}=t,{numOrSizeSplits:o,axis:i}=a,u=r.util.parseAxisParam(i,s.shape)[0],l=r.backend_util.prepareSplitSize(s,o,u),c=new Array(s.shape.length).fill(0),p=s.shape.slice();return l.map((e=>{const t=[...p];t[u]=e;const r=(0,ie.tP)({inputs:{x:s},backend:n,attrs:{begin:c,size:t}});return c[u]+=e,r}))}};var Lr=n(3911);const Hr={kernelName:r.Square,backendName:"cpu",kernelFunc:({inputs:e,backend:t})=>{const{x:n}=e,r=t;(0,a.H)(n,"square");const s=r.data.get(n.dataId).values,o=new Float32Array(s.length);for(let e=0;e<s.length;++e){const t=s[e];o[e]=t*t}return{dataId:r.write(o,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}};var Wr=n(3670);const Gr=(0,u.A)(r.Step,((e,t)=>{const n=t;return isNaN(e)?NaN:e>0?1:n.alpha})),Ur={kernelName:r.Step,backendName:"cpu",kernelFunc:Gr};var qr=n(1442);const jr={kernelName:r.StridedSlice,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:o}=t,{begin:i,end:u,strides:l,beginMask:c,endMask:p,ellipsisMask:d,newAxisMask:h,shrinkAxisMask:m}=s;(0,a.H)(o,"stridedSlice");const{finalShapeSparse:f,finalShape:g,isIdentity:y,sliceDim0:b,isSimpleSlice:k,begin:w,end:v,strides:N}=r.slice_util.sliceInfo(o.shape,i,u,l,c,p,d,h,m);let x;if(y)x=T({inputs:{x:o},backend:n,attrs:{shape:g}});else if(b||k){r.util.assert(o.shape.length>=1,(()=>`Input must have rank at least 1, got: ${o.shape.length}`));const e=r.slice_util.computeOutShape(w,v,N),t=(0,ie.tP)({inputs:{x:o},backend:n,attrs:{begin:w,size:e}});x=T({inputs:{x:t},backend:n,attrs:{shape:g}}),n.disposeIntermediateTensorInfo(t)}else{const e=n.bufferSync(o),t=(0,qr.t)(f,e,N,w);x=n.makeTensorInfo(g,t.dtype,t.values)}return x}};var Kr=n(5741);const Xr={kernelName:r.StringNGrams,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{separator:a,nGramWidths:s,leftPad:o,rightPad:i,padWidth:u,preserveShortSequences:l}=r,{data:c,dataSplits:p}=t,d=n.data.get(c.dataId).values,h=n.data.get(p.dataId).values,[m,f]=(0,Kr.A)(d,h,a,s,o,i,u,l);return[n.makeTensorInfo([m.length],"string",m),n.makeTensorInfo(p.shape,"int32",f)]}};var Zr=n(659);const Qr={kernelName:r.StringSplit,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{skipEmpty:a}=r,{input:s,delimiter:o}=t;if("string"!==s.dtype)throw new Error("Input must be of datatype string");if(1!==s.shape.length)throw new Error(`Input must be a vector, got shape: ${s.shape}`);if(0!==o.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${o.shape}`);const i=n.data.get(s.dataId).values,u=n.data.get(o.dataId).values[0],[l,c,p]=(0,Zr.Q)(i,u,a),d=c.length;return[n.makeTensorInfo([d,2],"int32",l),n.makeTensorInfo([d],"string",c),n.makeTensorInfo([2],"int32",new Int32Array(p))]}};var Yr=n(8259);const Jr={kernelName:r.StringToHashBucketFast,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{numBuckets:a}=r,{input:s}=t;if("string"!==s.dtype)throw new Error("Input must be of datatype string");if(a<=0)throw new Error("Number of buckets must be at least 1");const o=n.data.get(s.dataId).values,i=(0,Yr.h)(o,a);return n.makeTensorInfo(s.shape,"int32",i)}},ea=(0,u.A)(r.Tan,(e=>Math.tan(e))),ta={kernelName:r.Tan,backendName:"cpu",kernelFunc:ea},na=(0,u.A)(r.Tanh,(e=>Math.tanh(e))),ra={kernelName:r.Tanh,backendName:"cpu",kernelFunc:na};var aa=n(7594);const sa={kernelName:r.Tile,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{reps:o}=r;(0,a.H)(s,"tile");const i=(0,aa.R)(n.bufferSync(s),o);return n.makeTensorInfo(i.shape,i.dtype,i.values)}};var oa=n(3407);const ia={kernelName:r.TopK,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{k:o,sorted:i}=r;(0,a.H)(s,"topk");const u=n.data.get(s.dataId).values,[l,c]=(0,oa.W)(u,s.shape,s.dtype,o,i);return[n.makeTensorInfo(l.shape,l.dtype,l.values),n.makeTensorInfo(c.shape,c.dtype,c.values)]}},ua={kernelName:r.Transform,backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:a}=e,{image:s,transforms:o}=t,{interpolation:i,fillMode:u,fillValue:l,outputShape:c}=n,[p,d,h,m]=s.shape,[f,g]=null!=c?c:[d,h],y=[p,f,g,m],b=r.util.computeStrides(s.shape),k=b[0],w=b[1],v=b[2],N=r.util.computeStrides(y),x=N[0],S=N[1],T=N[2],I=r.util.getTypedArrayFromDType(s.dtype,r.util.sizeFromShape(y));I.fill(l);const _=a.data.get(s.dataId).values,E=a.data.get(o.dataId).values;for(let e=0;e<p;++e){const t=1===o.shape[0]?E:E.subarray(8*e,8*e+8);for(let n=0;n<f;++n)for(let r=0;r<g;++r)for(let a=0;a<m;++a){let s;const o=t[6]*r+t[7]*n+1;if(0===o)continue;const c=(t[0]*r+t[1]*n+t[2])/o,p=(t[3]*r+t[4]*n+t[5])/o,m=la(c,h,u),f=la(p,d,u);switch(i){case"nearest":s=pa(_,d,h,k,w,v,e,f,m,a,l);break;case"bilinear":s=da(_,d,h,k,w,v,e,f,m,a,l);break;default:throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${i}`)}I[e*x+n*S+r*T+a]=s}return a.makeTensorInfo(y,s.dtype,I)}return{dataId:a.write(I,y,s.dtype),shape:s.shape,dtype:s.dtype}}};function la(e,t,n){switch(n){case"reflect":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=2*t;n<e&&(n=e*Math.trunc(-n/e)+n),n=n<-t?n+e:-n-1}else if(n>t-1)if(t<=1)n=0;else{const e=2*t;n-=e*Math.trunc(n/e),n>=t&&(n=e-n-1)}return r.util.clamp(0,n,t-1)}(e,t);case"wrap":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=t-1;n+=t*(Math.trunc(-n/e)+1)}else if(n>t-1)if(t<=1)n=0;else{const e=t-1;n-=t*Math.trunc(n/e)}return r.util.clamp(0,n,t-1)}(e,t);case"nearest":return function(e,t){return r.util.clamp(0,e,t-1)}(e,t);case"constant":default:return function(e,t){return e}(e)}}function ca(e,t,n,r,a,s,o,i,u,l,c){return 0<=i&&i<t&&0<=u&&u<n?e[o*r+i*a+u*s+l]:c}function pa(e,t,n,r,a,s,o,i,u,l,c){return ca(e,t,n,r,a,s,o,Math.round(i),Math.round(u),l,c)}function da(e,t,n,r,a,s,o,i,u,l,c){const p=Math.floor(i),d=Math.floor(u),h=p+1,m=d+1;return(h-i)*((m-u)*ca(e,t,n,r,a,s,o,p,d,l,c)+(u-d)*ca(e,t,n,r,a,s,o,p,m,l,c))+(i-p)*((m-u)*ca(e,t,n,r,a,s,o,h,d,l,c)+(u-d)*ca(e,t,n,r,a,s,o,h,m,l,c))}var ha=n(5366);const ma={kernelName:r.Unique,backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:r}=e,{axis:s}=n,{x:o}=t;(0,a.H)(o,"unique");const i=r.data.get(o.dataId).values,{outputValues:u,outputShape:l,indices:c}=(0,ha.S)(i,s,o.shape,o.dtype);return[r.makeTensorInfo(l,o.dtype,u),r.makeTensorInfo([c.length],"int32",c)]}},fa={kernelName:r.Unpack,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{value:a}=t;let{axis:s}=r;s<0&&(s+=a.shape.length);const o=a.shape.length,i=a.shape[s],u=new Array(o-1);let l=0;for(let e=0;e<o;e++)e!==s&&(u[l++]=a.shape[e]);const c=new Array(o).fill(0),p=a.shape.slice();p[s]=1;const d=new Array(i);for(let e=0;e<d.length;e++){c[s]=e;const t=(0,ie.tP)({inputs:{x:a},backend:n,attrs:{begin:c,size:p}});d[e]=T({inputs:{x:t},backend:n,attrs:{shape:u}}),n.disposeIntermediateTensorInfo(t)}return d}},ga={kernelName:r.UnsortedSegmentSum,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:o,segmentIds:i}=t,{numSegments:u}=s;(0,a.H)(o,"unsortedSegmentSum");const l=[],c=[],p=o.shape.length-i.shape.length;let d=i;for(let e=0;e<p;++e){const t=ct({inputs:{input:d},backend:n,attrs:{dim:e+1}});d=t,c.push(t)}for(let e=0;e<u;++e){const t=r.util.createScalarValue(e,"int32"),a=n.makeTensorInfo([],"int32",t),s=(0,et.Dg)({inputs:{a,b:d},backend:n}),i=(0,de.pj)({inputs:{x:s},backend:n,attrs:{dtype:"float32"}}),u=(0,Ke.Jp)({inputs:{a:i,b:o},backend:n}),p=Ze({inputs:{x:u},backend:n,attrs:{axis:0,keepDims:!1}});l.push(p),c.push(a),c.push(s),c.push(i),c.push(u),c.push(p)}const h=Pn({inputs:l,backend:n,attrs:{axis:0}});return c.forEach((e=>n.disposeIntermediateTensorInfo(e))),h}},ya=[A,M.fC,F,O,S.j4,B,V,C,z,P,H,G,q,Z,Y,ne,re,ae,se,E,oe,ue,ce,pe,de.Mq,he.y2,fe,ge.z,ye,xe,Te,Ie,_e,Ee,Ae,Me,Fe,Oe,Be,Re,Ve,Ce,ze,Le,He,We,Ge,Ue,qe,je,Ye,c,Je,et.Kx,ut,lt.SX,pt,dt.Vu,wt,Nt,xt,St.Ao,_t,Et,At,Dt,$t,Ot.Ce,Bt.V,p.I,Rt,we,Ct,Pt,Ht,h,Wt.zh,Gt.m3,qt,jt.xM,Xt,Yt,en,rn,an,sn,cn,pn.eJ,dn,hn,mn,fn,gn,yn,bn,kn.u0,wn,xn,_n,Ke.f$,En.AF,Mn,Fn,On,Bn.nP,Rn,zn,Ln,Hn,Un,y,qn.Iz,Kn,Zn,Yn,er,ve.O,ft,nr,k,v,I,rr,ar,sr,or,ir,ur,cr,pr.FY,hr,gr,yr,vr,N.BP,xr,Tr,_r,ie.C6,In,Mr,Dr,$r,Br,Vr,Cr,zr,Pr,Lr.cz,Hr,Wr.MS,Ur,jr,Xr,Qr,Jr,gt.GR,Qe,ta,ra,sa,ia,ua,R.b,ma,fa,ga,Cn];for(const e of ya)(0,r.registerKernel)(e)},3526:(e,t,n)=>{"use strict";n.d(t,{bk:()=>s,fC:()=>o});var r=n(4656),a=n(7209);function s(e){const t=new Float32Array(e.length);for(let n=0;n<e.length;++n)t[n]=Math.abs(e[n]);return t}const o={kernelName:r.Abs,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend;(0,a.H)(t,"abs");let o=new Float32Array(r.util.sizeFromShape(t.shape));return o=s(n.data.get(t.dataId).values),n.makeOutput(o,t.shape,t.dtype)}}},3862:(e,t,n)=>{"use strict";n.d(t,{EH:()=>o,IH:()=>u,j4:()=>l});var r=n(4656),a=n(3781),s=n(3253);const o=(0,a.b)(((e,t)=>e+t)),i=(0,s.H)(((e,t,n,r)=>({real:e+n,imag:t+r}))),u=(0,s.j)(r.Add,o,i),l={kernelName:r.Add,backendName:"cpu",kernelFunc:u}},6301:(e,t,n)=>{"use strict";n.d(t,{W:()=>a,i:()=>s});var r=n(4656);function a(e,t,n,a,s){const o=r.util.sizeFromShape(a),i=r.util.makeZerosTypedArray(s,n);for(let n=0;n<e.length;n++){const r=e[n];if(r<0)throw new Error("Input x must be non-negative!");r>=s||(i[r]+=o>0?t[n]:1)}return i}function s(e,t,n,a=!1){const s=e.shape[0],o=e.shape[1],i=(0,r.buffer)([s,n],t.dtype);for(let r=0;r<s;r++)for(let s=0;s<o;s++){const o=e.get(r,s);if(o<0)throw new Error("Input x must be non-negative!");o>=n||(a?i.set(1,r,o):t.size>0?i.set(i.get(r,o)+t.get(r,s),r,o):i.set(i.get(r,o)+1,r,o))}return i}},6832:(e,t,n)=>{"use strict";n.d(t,{Mq:()=>p,pj:()=>c,sJ:()=>l});var r=n(4656),a=n(3781),s=n(2402),o=n(7390),i=n(6495),u=n(2028);function l(e,t,n,s){if("int32"===s)return[t,"int32",Int32Array.from(e)];if("bool"===s){const s=r.util.toTypedArray([0],n),[o,i]=(0,a.b)(((e,t)=>e!==t?1:0))(t,[],e,s,"bool");return[i,"bool",o]}throw new Error(`Error in Cast: failed to cast ${n} to ${s}`)}function c(e){const{inputs:t,backend:n,attrs:a}=e,{x:p}=t,{dtype:d}=a;if("complex64"===d){if("complex64"===p.dtype)return(0,i.y)({inputs:{x:p},backend:n});const e=(0,s.l)(n,p.shape,p.dtype),t=c({inputs:{x:p},backend:n,attrs:{dtype:"float32"}}),r=(0,o.P)({inputs:{real:t,imag:e},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),r}if("complex64"===p.dtype){const e=(0,u.k)({inputs:{input:p},backend:n}),t=c({inputs:{x:e},backend:n,attrs:{dtype:d}});return n.disposeIntermediateTensorInfo(e),t}if(!r.util.hasEncodingLoss(p.dtype,d)){const e=(0,i.y)({inputs:{x:p},backend:n});return{dataId:e.dataId,shape:e.shape,dtype:d}}const h=n.data.get(p.dataId).values,[m,f,g]=l(h,p.shape,p.dtype,d);return n.makeTensorInfo(m,f,g)}const p={kernelName:r.Cast,backendName:"cpu",kernelFunc:c}},2646:(e,t,n)=>{"use strict";n.d(t,{__:()=>o,y2:()=>u});var r=n(4656),a=n(9450),s=n(6802);const o=(0,a.a)((e=>Math.ceil(e))),i=(0,s.O)(r.Ceil,o),u={kernelName:r.Ceil,backendName:"cpu",kernelFunc:i}},7390:(e,t,n)=>{"use strict";function r(e){const{inputs:t,backend:n}=e,{real:r,imag:a}=t,s=n.data.get(r.dataId).values,o=n.data.get(a.dataId).values,i=n.makeTensorInfo(r.shape,"complex64");return n.data.get(i.dataId).complexTensorInfos={real:n.makeTensorInfo(r.shape,"float32",s),imag:n.makeTensorInfo(a.shape,"float32",o)},i}n.d(t,{P:()=>r,z:()=>a});const a={kernelName:n(4656).Complex,backendName:"cpu",kernelFunc:r}},796:(e,t,n)=>{"use strict";n.d(t,{j:()=>a});var r=n(4656);function a(e,t,n,a){const s=r.util.getArrayFromDType(n,r.util.sizeFromShape(t));if(a&&"string"!==n){let t=0;e.forEach((e=>{const n=r.util.sizeFromShape(e.shape);s.set(e.vals,t),t+=n}))}else{let a=0;e.forEach((e=>{const o="string"===n?r.backend_util.fromUint8ToStringArray(e.vals):e.vals;let i=0;for(let n=0;n<e.shape[0];++n){const r=n*t[1]+a;for(let t=0;t<e.shape[1];++t)s[r+t]=o[i++]}a+=e.shape[1]}))}return s}},3721:(e,t,n)=>{"use strict";n.d(t,{Dg:()=>i,Kx:()=>u,tW:()=>o});var r=n(4656),a=n(3781),s=n(3253);const o=(0,a.b)(((e,t)=>e===t?1:0)),i=(0,s.j)(r.Equal,o,null,"bool"),u={kernelName:r.Equal,backendName:"cpu",kernelFunc:i}},840:(e,t,n)=>{"use strict";n.d(t,{Qq:()=>i,Ro:()=>o,SX:()=>u});var r=n(4656),a=n(9450),s=n(6802);const o=(0,a.a)((e=>Math.exp(e))),i=(0,s.O)(r.Exp,o,"float32"),u={kernelName:r.Exp,backendName:"cpu",kernelFunc:i}},2550:(e,t,n)=>{"use strict";n.d(t,{OF:()=>o,Vu:()=>u});var r=n(4656),a=n(9450),s=n(6802);const o=(0,a.a)((e=>Math.expm1(e))),i=(0,s.O)(r.Expm1,o),u={kernelName:r.Expm1,backendName:"cpu",kernelFunc:i}},6152:(e,t,n)=>{"use strict";n.d(t,{Ao:()=>u,r6:()=>o});var r=n(4656),a=n(9450),s=n(6802);const o=(0,a.a)((e=>Math.floor(e))),i=(0,s.O)(r.Floor,o),u={kernelName:r.Floor,backendName:"cpu",kernelFunc:i}},6645:(e,t,n)=>{"use strict";n.d(t,{m:()=>a});var r=n(4656);function a(e,t,n,a,s,o,i,u,l){const c=(0,r.buffer)([a,o],n);for(let n=0;n<a;n++){const r=[];let a=0;for(let t=0;t<s;t++){const o=e[n*s+t];a+=o*i[t],r.push(o)}if(a<0||a>=l/o)throw new Error(`Invalid indices: ${r} does not index into ${u}`);for(let e=0;e<o;e++)c.values[n*o+e]=t.get(...t.indexToLoc(a*o+e))}return c}},2595:(e,t,n)=>{"use strict";n.d(t,{i:()=>a});var r=n(4656);function a(e,t,n){const a=(0,r.buffer)(n,e.dtype);for(let n=0;n<a.size;++n){const r=a.indexToLoc(n).slice(),s=r[0],o=r[2],i=t.locToIndex([s,o]);r[2]=t.values[i];const u=e.locToIndex(r);0<=u&&u<e.values.length&&(a.values[n]=e.values[u])}return a}},1826:(e,t,n)=>{"use strict";n.d(t,{Ce:()=>u,o:()=>o});var r=n(4656),a=n(3781),s=n(3253);const o=(0,a.b)(((e,t)=>e>t?1:0)),i=(0,s.j)(r.Greater,o,null,"bool"),u={kernelName:r.Greater,backendName:"cpu",kernelFunc:i}},2680:(e,t,n)=>{"use strict";n.d(t,{HL:()=>o,V:()=>u});var r=n(4656),a=n(3781),s=n(3253);const o=(0,a.b)(((e,t)=>e>=t?1:0)),i=(0,s.j)(r.GreaterEqual,o,null,"bool"),u={kernelName:r.GreaterEqual,backendName:"cpu",kernelFunc:i}},6495:(e,t,n)=>{"use strict";function r(e){const{inputs:t,backend:n}=e,{x:r}=t;return n.incRef(r.dataId),{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}n.d(t,{I:()=>a,y:()=>r});const a={kernelName:n(4656).Identity,backendName:"cpu",kernelFunc:r}},3629:(e,t,n)=>{"use strict";n.d(t,{rO:()=>o,zh:()=>u});var r=n(4656),a=n(3781),s=n(3253);const o=(0,a.b)(((e,t)=>e<t?1:0)),i=(0,s.j)(r.Less,o,null,"bool"),u={kernelName:r.Less,backendName:"cpu",kernelFunc:i}},8288:(e,t,n)=>{"use strict";n.d(t,{lx:()=>o,m3:()=>u});var r=n(4656),a=n(3781),s=n(3253);const o=(0,a.b)(((e,t)=>e<=t?1:0)),i=(0,s.j)(r.LessEqual,o,null,"bool"),u={kernelName:r.LessEqual,backendName:"cpu",kernelFunc:i}},8269:(e,t,n)=>{"use strict";n.d(t,{b:()=>a});var r=n(4656);function a(e,t,n){const a=(t-e)/(n-1),s=r.util.makeZerosTypedArray(n,"float32");s[0]=e;for(let e=1;e<s.length;e++)s[e]=s[e-1]+a;return s}},8956:(e,t,n)=>{"use strict";n.d(t,{vX:()=>o,xM:()=>u});var r=n(4656),a=n(9450),s=n(6802);const o=(0,a.a)((e=>Math.log(e))),i=(0,s.O)(r.Log,o),u={kernelName:r.Log,backendName:"cpu",kernelFunc:i}},6727:(e,t,n)=>{"use strict";n.d(t,{B:()=>a});var r=n(4656);function a(e,t,n,a){const s=r.util.getTypedArrayFromDType(a,r.util.sizeFromShape(n));for(let n=0;n<s.length;++n){const r=n*t;let a=e[r];for(let n=0;n<t;++n){const t=e[r+n];(Number.isNaN(t)||t>a)&&(a=t)}s[n]=a}return s}},9223:(e,t,n)=>{"use strict";n.d(t,{eJ:()=>u,wS:()=>o});var r=n(4656),a=n(3781),s=n(3253);const o=(0,a.b)(((e,t)=>Math.max(e,t))),i=(0,s.j)(r.Maximum,o),u={kernelName:r.Maximum,backendName:"cpu",kernelFunc:i}},2563:(e,t,n)=>{"use strict";n.d(t,{u0:()=>u,vP:()=>o});var r=n(4656),a=n(3781),s=n(3253);const o=(0,a.b)(((e,t)=>Math.min(e,t))),i=(0,s.j)(r.Minimum,o),u={kernelName:r.Minimum,backendName:"cpu",kernelFunc:i}},2820:(e,t,n)=>{"use strict";n.d(t,{$3:()=>o,Jp:()=>u,f$:()=>l});var r=n(4656),a=n(3781),s=n(3253);const o=(0,a.b)(((e,t)=>e*t)),i=(0,s.H)(((e,t,n,r)=>({real:e*n-t*r,imag:e*r+t*n}))),u=(0,s.j)(r.Multiply,o,i),l={kernelName:r.Multiply,backendName:"cpu",kernelFunc:u}},2376:(e,t,n)=>{"use strict";n.d(t,{AF:()=>i,uC:()=>o});var r=n(4656),a=n(7209),s=n(2820);function o(e,t,n){const a=r.util.createScalarValue(-1,n);return(0,s.$3)([],t,a,e,n)}const i={kernelName:r.Neg,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t;(0,a.H)(r,"neg");const s=n.data.get(r.dataId).values,[i,u]=o(s,r.shape,r.dtype);return n.makeTensorInfo(u,r.dtype,i)}}},2874:(e,t,n)=>{"use strict";n.d(t,{Gj:()=>o,nP:()=>u});var r=n(4656),a=n(3781),s=n(3253);const o=(0,a.b)(((e,t)=>e!==t?1:0)),i=(0,s.j)(r.NotEqual,o,null,"bool"),u={kernelName:r.NotEqual,backendName:"cpu",kernelFunc:i}},6914:(e,t,n)=>{"use strict";n.d(t,{Iz:()=>i,Qg:()=>o});var r=n(4656),a=n(7209),s=n(4512);function o(e,t,n,a){const[s,o]=r.backend_util.computeOutAndReduceShapes(e,a),i=(0,r.upcastType)(t,"int32"),u=r.util.makeZerosTypedArray(r.util.sizeFromShape(s),i),l=r.util.sizeFromShape(o);for(let e=0;e<u.length;++e){const t=e*l;let r=1;for(let e=0;e<l;++e)r*=n[t+e];u[e]=r}return{outVals:u,outShape:s,outDtype:i}}const i={kernelName:r.Prod,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:i}=e,{x:u}=t,{axis:l,keepDims:c}=i;(0,a.H)(u,"prod");const p=u.shape.length,d=r.util.parseAxisParam(l,u.shape),h=r.backend_util.getAxesPermutation(d,p);let m=d,f=u;const g=[];null!=h&&(f=(0,s.p)({inputs:{x:u},backend:n,attrs:{perm:h}}),g.push(f),m=r.backend_util.getInnerMostAxes(m.length,p));const y=n.data.get(f.dataId).values,{outVals:b,outShape:k,outDtype:w}=o(f.shape,f.dtype,y,m);let v=k;return c&&(v=r.backend_util.expandShapeToKeepDim(k,d)),g.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(v,w,b)}}},793:(e,t,n)=>{"use strict";n.d(t,{c:()=>s});var r=n(4656);function a(e,t){const n=e.slice(0,t);for(;n.length<t;)n.push(1);for(let r=t;r<e.length;r++)n[t-1]*=e[r];return n}function s(e,t,n,s,o,i,u,l){if(0===e.length)throw new Error("paramsNestedSplits must be non empty");if(0===t[0].length)throw new Error("Split tensors must not be scalars");if(function(e,t,n){e.forEach(((e,a)=>{if(e<0||e>=n){const s=r.util.indexToLoc(a,t.length,r.util.computeStrides(t)).join(",");throw new Error(`indices[${s}] = ${e} is not in [0, ${n})`)}}))}(i,u,t[0][0]-1),0===s.length)throw new Error("params.rank must be nonzero");const c=s[0],{outSplits:p,valueSlices:d,numValues:h}=function(e,t,n,r){const a=[];let s=0;const o=t.length-1+n.length,i=new Array(o).fill(null).map((()=>[0]));!function(e,t){for(let n=0;n<e.length;++n){const r=e[n],a=n===e.length-1?t:e[n+1].length;if(0===r.length)throw new Error("Ragged splits may not be empty");if(r[0]<0)throw new Error("Ragged splits must be non-negative");if(r[r.length-1]>a)throw new Error("Ragged splits must not point past values");for(let e=1;e<r.length;++e)if(r[e-1]>r[e])throw new Error("Ragged splits must be sorted in ascending order")}}(n,r);let u=1;for(let e=0;e<t.length-1;++e){u*=t[e];const n=t[e+1];for(let t=1;t<u+1;++t)i[e].push(t*n)}for(let r=0;r<e.length;++r){let o=e[r],u=e[r]+1;for(let e=0;e<n.length;++e){const r=n[e],a=e+t.length-1;if(a>=0){const e=i[a],t=e[e.length-1]-r[o];for(let e=o;e<u;++e)i[a].push(r[e+1]+t)}o=r[o],u=r[u]}u!==o&&(a.push([o,u]),s+=u-o)}return{outSplits:i,valueSlices:a,numValues:s}}(i,u,e,c),m=function(e){const t=[];for(let n=0;n<e.length;++n){const a=e[n].length,s=r.util.getArrayFromDType("int32",a);t.push(s),e[n].forEach(((e,t)=>s[t]=e))}return t}(p),f=function(e,t,n,s,o){const i=t.slice();i[0]=o;const u=r.util.getArrayFromDType(n,r.util.sizeFromShape(i)),l=e.length;return function(e,t,n,r,s,o){const i=a(t,2)[1],u=a(o,2)[1];let l=0;for(const t of n)for(let n=t[0];n<t[1];++n){for(let t=0;t<r;++t)s[l*u+t]=e[n*i+t];++l}}(e,t,s,0===l?0:l/t[0],u,i),[u,i]}(n,s,o,d,h);return[m,f[0],f[1]]}},2410:(e,t,n)=>{"use strict";n.d(t,{S:()=>a});var r=n(4656);function a(e,t,n,a,s,o,i){if(t.length>1)throw new Error("starts must be a scalar or vector");if(s.length>1)throw new Error("limits must be a scalar or vector");if(i.length>1)throw new Error("deltas must be a scalar or vector");const u=0===t.length,l=0===s.length,c=0===i.length,p=[];u||p.push(t[0]),l||p.push(s[0]),c||p.push(i[0]);for(let e=1;e<p.length;++e)if(p[e]!==p[e-1])throw new Error("starts, limits, and deltas must have the same shape");const d=0===p.length?1:p[0],h=r.util.getArrayFromDType("int32",d+1);h[0]=0;for(let t=0;t<d;++t){const n=u?e[0]:e[t],r=l?a[0]:a[t],s=c?o[0]:o[t];if(0===s)throw new Error("Requires delta != 0");let i;if(s>0&&r<n||s<0&&r>n)i=0;else if(i=Math.ceil(Math.abs((r-n)/s)),i>2147483647)throw new Error("Requires ((limit - start) / delta) <= 2147483647");h[t+1]=h[t]+i}const m=h[d],f=r.util.getArrayFromDType(n,m);let g=0;for(let t=0;t<d;++t){const n=h[t+1]-h[t];let r=u?e[0]:e[t];const a=c?o[0]:o[t];for(let e=0;e<n;++e)f[g++]=r,r+=a}return[h,f]}},5542:(e,t,n)=>{"use strict";n.d(t,{p:()=>u});var r=n(4656),a=r.backend_util.RowPartitionType;class s{constructor(e,t,n,a,s,o,i,u,l,c){this.shape=e,this.shapeShape=t,this.values=n,this.valuesShape=a,this.valuesDType=s,this.defaultValue=o,this.defaultValueShape=i,this.rowPartitionValues=u,this.rowPartitionValuesShapes=l,this.rowPartitionTypes=r.backend_util.getRowPartitionTypesHelper(c),this.raggedRank=r.backend_util.getRaggedRank(this.rowPartitionTypes)}getRowPartitionTypeByDimension(e){return this.rowPartitionTypes[0]===a.FIRST_DIM_SIZE?this.rowPartitionTypes[e+1]:this.rowPartitionTypes[e]}getRowPartitionTensor(e){return this.rowPartitionTypes[0]===a.FIRST_DIM_SIZE?this.rowPartitionValues[e+1]:this.rowPartitionValues[e]}getMaxWidth(e){const t=this.getRowPartitionTensor(e-1);switch(this.getRowPartitionTypeByDimension(e-1)){case a.VALUE_ROWIDS:return s.getMaxWidthValueRowID(t);case a.ROW_SPLITS:return s.getMaxWidthRowSplit(t);default:throw new Error(`Cannot handle partition type ${a[this.getRowPartitionTypeByDimension(e-1)]}`)}}static getMaxWidthRowSplit(e){const t=e.length;if(0===t||1===t)return 0;let n=0;for(let r=0;r<t-1;++r){const t=e[r+1]-e[r];t>n&&(n=t)}return n}static getMaxWidthValueRowID(e){const t=e.length;if(0===t)return 0;let n=0,r=e[0],a=0;for(let s=1;s<t;++s){const t=e[s];t!==r&&(r=t,a=Math.max(s-n,a),n=s)}return Math.max(t-n,a)}tensorShapeFromTensor(e,t,n=!0){if(0===t.length){if(-1===e[0])return[];throw new Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.")}return i(e,n)}calculateOutputSize(e){const t=this.valuesShape,n=this.defaultValueShape;r.backend_util.validateDefaultValueShape(n,t);const a=this.tensorShapeFromTensor(this.shape,this.shapeShape),s=r.backend_util.combineRaggedTensorToTensorShapes(this.raggedRank,a,t);s[0]<0&&(s[0]=e);for(let e=1;e<=this.raggedRank;++e)s[e]<0&&(s[e]=this.getMaxWidth(e));return s}calculateFirstParentOutputIndex(e,t,n){const a=Math.min(e,n),s=[];let o=0;for(let e=0;e<a;++e,o+=t)s.push(o);for(let t=a;t<e;++t)s.push(-1);return r.util.assert(s.length===e,(()=>"Final length of result must be equal to firstDimension.")),s}calculateOutputIndexRowSplit(e,t,n,r){const a=e.length,s=[];for(let o=0;o<a-1;++o){const a=e[o+1]-e[o];let i=Math.min(r,a),u=t[o];-1===u&&(i=0);for(let e=0;e<i;++e)s.push(u),u+=n;for(let e=0;e<a-i;++e)s.push(-1)}if(a>0&&s.length!==e[a-1])throw new Error("Invalid row split size.");return s}calculateOutputIndexValueRowID(e,t,n,r){const a=e.length,s=[];if(0===a)return[];let o=0,i=e[0];if(i>=t.length)throw new Error(`Got currentValueRowId=${i}, which is not less than ${t.length}`);let u=t[i];s.push(u);for(let l=1;l<a;++l){const a=e[l];if(a===i)u>=0&&(++o,o<r?u+=n:u=-1);else{if(o=0,i=a,a>=t.length)throw new Error(`Got nextValueRowId=${a} which is not less than ${t.length}`);u=t[a]}s.push(u)}if(s.length!==e.length)throw new Error("Invalid row ids.");return s}calculateOutputIndex(e,t,n,r){const s=this.getRowPartitionTensor(e),o=this.getRowPartitionTypeByDimension(e);switch(o){case a.VALUE_ROWIDS:return this.calculateOutputIndexValueRowID(s,t,n,r);case a.ROW_SPLITS:if(s.length-1>t.length)throw new Error(`Row partition size is greater than output size: ${s.length-1} > ${t.length}`);return this.calculateOutputIndexRowSplit(s,t,n,r);default:throw new Error(`Unsupported partition type: ${a[o]}`)}}getFirstDimensionSize(){const e=this.rowPartitionValues[0];if(0===this.rowPartitionTypes.length)throw new Error("No row_partition_types given.");const t=this.rowPartitionTypes[0];switch(t){case a.FIRST_DIM_SIZE:return e[0];case a.VALUE_ROWIDS:throw new Error("Cannot handle VALUE_ROWIDS in first dimension.");case a.ROW_SPLITS:return this.rowPartitionValuesShapes[0][0]-1;default:throw new Error(`Cannot handle type ${a[t]}`)}}compute(){if(this.rowPartitionValues[0].length<=0)throw new Error("Invalid first partition input. Tensor requires at least one element.");const e=this.getFirstDimensionSize(),t=this.calculateOutputSize(e),n=new Array(this.raggedRank+1);n[n.length-1]=1;for(let e=n.length-2;e>=0;--e)n[e]=n[e+1]*t[e+1];const a=i(t,!1),s=r.util.getArrayFromDType(this.valuesDType,r.util.sizeFromShape(a));if(n[0]*t[0]>0){let r=this.calculateFirstParentOutputIndex(e,n[0],t[0]);for(let e=1;e<=this.raggedRank;++e)r=this.calculateOutputIndex(e-1,r,n[e],t[e]);this.setOutput(this.raggedRank,r,s,a)}return[a,s]}setOutput(e,t,n,a){if(0===n.length)return;const s=this.values,i=n;let u=a.slice();u=u.slice(e+1);const l=r.util.sizeFromShape(u),c=t.length;let p=this.defaultValue;if(p.length!==l&&1!==p.length){const e=this.defaultValueShape;(0,r.tidy)((()=>{const t=(0,r.reshape)(p,e),n=(0,r.broadcastTo)(t,u);p=n.dataSync()}))}let d=0,h=0,m=0;for(let e=0;e<=c;++e){let r=e<c?t[e]:-1;if(r!==m){if(h<m){const e=s.subarray(d*l);o(i.subarray(h*l),e,(m-h)*l)}if(e>=c){const e=n.length;r=Math.floor(e/l)}if(r>m)if(1===this.defaultValue.length)i.subarray(m*l,r*l).fill(this.defaultValue[0]),m=r;else for(;r>m;)o(i.slice(m*l),p,l),++m;r<0?(d=e+1,h=m):(d=e,h=m,m=h+1)}else++m}}}function o(e,t,n){for(let r=0;r<n;r++)e[r]=t[r]}function i(e,t){const n=[];for(let r of e){if(r<0){if(!t)throw new Error(`Dimension ${r} must be >= 0`);if(r<-1)throw new Error(`Dimension ${r} must be >= -1`);r=-1}n.push(r)}return n}function u(e,t,n,r,a,o,i,u,l,c){return new s(e,t,n,r,a,o,i,u,l,c).compute()}},9318:(e,t,n)=>{"use strict";n.d(t,{b:()=>a});var r=n(4656);function a(e,t,n,a){if(e===t||e<t&&n<0||t<e&&n>1)return r.util.makeZerosTypedArray(0,a);const s=Math.abs(Math.ceil((t-e)/n)),o=r.util.makeZerosTypedArray(s,a);t<e&&1===n&&(n=-1),o[0]=e;for(let e=1;e<o.length;e++)o[e]=o[e-1]+n;return o}},2028:(e,t,n)=>{"use strict";function r(e){const{inputs:t,backend:n}=e,{input:r}=t,a=n.data.get(r.dataId).complexTensorInfos.real,s=n.data.get(a.dataId).values;return n.makeTensorInfo(a.shape,a.dtype,s)}n.d(t,{O:()=>a,k:()=>r});const a={kernelName:n(4656).Real,backendName:"cpu",kernelFunc:r}},6989:(e,t,n)=>{"use strict";n.d(t,{FY:()=>u,zd:()=>o});var r=n(4656),a=n(9450),s=n(6802);const o=(0,a.a)((e=>1/Math.sqrt(e))),i=(0,s.O)(r.Rsqrt,o),u={kernelName:r.Rsqrt,backendName:"cpu",kernelFunc:i}},7114:(e,t,n)=>{"use strict";n.d(t,{N:()=>a});var r=n(4656);function a(e,t,n,a,s,o,i,u,l,c){const p=[a/s,s],d=e.values,h=t.values;if(0===a)return(0,r.buffer)(n,t.dtype);const m=(0,r.buffer)(p,t.dtype);"string"==typeof l||"number"==typeof l?m.values.fill(l):"boolean"==typeof l&&m.values.fill(+l);for(let e=0;e<o;e++){const r=[];let o=0;for(let t=0;t<i;t++){const n=d[e*i+t];r.push(n),o+=n*u[t]}if(o<0||o>=a/s)throw new Error(`Invalid indices: ${r} does not index into ${n}`);for(let n=0;n<s;n++)c?m.values[o*s+n]+=h[e*s+n]:m.values[o*s+n]=0===t.rank?h[0]:h[e*s+n]}return m}},4790:(e,t,n)=>{"use strict";n.d(t,{BP:()=>u,VY:()=>o,XD:()=>i});var r=n(4656),a=n(9450),s=n(6802);const o=(0,a.a)((e=>1/(1+Math.exp(-e)))),i=(0,s.A)(r.Sigmoid,(e=>1/(1+Math.exp(-e)))),u={kernelName:r.Sigmoid,backendName:"cpu",kernelFunc:i}},9162:(e,t,n)=>{"use strict";n.d(t,{C6:()=>i,rT:()=>s,tP:()=>o});var r=n(4656),a=n(7209);function s(e,t,n,a,s){const o=r.slice_util.isSliceContinous(a,t,n),i=r.util.sizeFromShape(n),u=r.util.computeStrides(a);if(o){const n=r.slice_util.computeFlatOffset(t,u);return"string"===s?e.slice(n,n+i):e.subarray(n,n+i)}const l="string"===s?r.backend_util.fromUint8ToStringArray(e):e,c=(0,r.buffer)(a,s,l),p=(0,r.buffer)(n,s);for(let e=0;e<p.size;++e){const n=p.indexToLoc(e),r=n.map(((e,n)=>e+t[n]));p.set(c.get(...r),...n)}return"string"===s?r.backend_util.fromStringArrayToUint8(p.values):p.values}function o(e){const{inputs:t,backend:n,attrs:o}=e,{x:i}=t,{begin:u,size:l}=o;(0,a.H)(i,"slice");const[c,p]=r.slice_util.parseSliceParams(i,u,l);r.slice_util.assertParamsValid(i,c,p);const d=s(n.data.get(i.dataId).values,c,p,i.shape,i.dtype);return n.makeTensorInfo(p,i.dtype,d)}const i={kernelName:r.Slice,backendName:"cpu",kernelFunc:o}},1041:(e,t,n)=>{"use strict";n.d(t,{c:()=>a});var r=n(4656);function a(e,t,n,a,s,o,i){const u=t[0],l=o[0],c=new Array(l),p=new Array(u),d=t[1];if(0===l){if(0!==u)throw new Error(r.backend_util.getSparseFillEmptyRowsIndicesDenseShapeMismatch(u));return[r.util.getArrayFromDType(n,0),[0,d],r.util.getArrayFromDType(s,0),c,p]}let h=!0,m=0;const f=new Array(l).fill(0);for(let t=0;t<u;++t){const n=e[t*d];if(n<0)throw new Error(r.backend_util.getSparseFillEmptyRowsNegativeIndexErrorMessage(t,n));if(n>=l)throw new Error(r.backend_util.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(t,n,l));++f[n],h=h&&n>=m,m=n}let g=!0;for(let e=0;e<l;++e){const t=0===f[e];c[e]=t,g=g&&!t,f[e]=Math.max(f[e],1),e>0&&(f[e]+=f[e-1])}if(g&&h){const t=e,n=a;for(let e=0;e<u;++e)p[e]=e;return[t,[u,d],n,c,p]}{const t=f[l-1],o=r.util.getArrayFromDType(n,t*d),h=r.util.getArrayFromDType(s,t),m=new Array(l).fill(0);for(let t=0;t<u;++t){const n=e[t*d],r=m[n],s=(0===n?0:f[n-1])+r;m[n]++;for(let n=0;n<d;++n)o[s*d+n]=e[t*d+n];h[s]=a[t],p[t]=s}for(let e=0;e<l;++e)if(0===m[e]){const t=0===e?0:f[e-1];o[t*d+0]=e;for(let e=1;e<d;++e)o[t*d+e]=0;h[t]=i}return[o,[t,d],h,c,p]}}},3541:(e,t,n)=>{"use strict";n.d(t,{U:()=>a});var r=n(4656);function a(e,t,n,a,s){const o=r.util.sizeFromShape(a),i=t[0],u=s.length,l=[];let c=1,p=-1;for(let e=0;e<u;++e){const t=s[e];if(-1===t){if(-1!==p)throw new Error(r.backend_util.getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(p,e));p=e,l.push(1)}else{if(t<0)throw new Error(r.backend_util.getSparseReshapeNegativeOutputDimErrorMessage(e,t));c*=t,l.push(t)}}if(-1!==p){if(c<=0)throw new Error(r.backend_util.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());const e=Math.trunc(o/c);if(c*e!==o)throw new Error(r.backend_util.getSparseReshapeInputOutputMultipleErrorMessage(a,l));l[p]=e}if(r.util.sizeFromShape(l)!==o)throw new Error(r.backend_util.getSparseReshapeInputOutputMismatchErrorMessage(a,l));const d=a.length,h=[];if(d>0){h[d-1]=1;for(let e=d-2;e>=0;--e)h[e]=h[e+1]*a[e+1]}const m=[];if(u>0){m[u-1]=1;for(let e=u-2;e>=0;--e)m[e]=m[e+1]*l[e+1]}const f=r.util.getArrayFromDType(n,i*u);for(let t=0;t<i;++t){let n=0;for(let r=0;r<d;++r)n+=e[t*d+r]*h[r];for(let e=0;e<u;++e)f[t*u+e]=Math.trunc(n/m[e]),n%=m[e]}return[f,[i,u],l]}},7917:(e,t,n)=>{"use strict";n.d(t,{V:()=>a});var r=n(4656);function a(e,t,n,a,s,o=!1,i=0){const u=a.length,l=[t[0],e.length/t[0]],c=l[1],p=u>0?s[u-1]+1:0;if(p<0)throw new Error(r.backend_util.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());const d=t.slice();d[0]=p;const h=d.reduce(((e,t)=>e*t),1),m=r.util.getArrayFromDType(n,h);if(0===u)return p>0&&m.fill(i),[m,d];if(p<=0)throw new Error(r.backend_util.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());let f=0,g=1,y=0,b=s[f];for(;;){let t=0;if(g<u){if(t=s[g],b===t){++g;continue}if(b>=t)throw new Error(r.backend_util.getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage())}if(b<0||b>=p)throw new Error(r.backend_util.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(b,p));b>y&&m.fill(i,y*c,b*c);for(let t=f;t<g;++t){const n=a[t];if(n<0||n>=l[0])throw new Error(r.backend_util.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(t,a[t],l[0]));for(let t=0;t<c;t++)m[b*c+t]+=e[n*c+t]}if(o)for(let e=0;e<c;e++)m[b*c+e]/=g-f;if(f=g,++g,y=b+1,b=t,g>u)break}return y<p&&m.fill(i,y*c,p*c),[m,d]}},3911:(e,t,n)=>{"use strict";n.d(t,{cz:()=>u,zT:()=>o});var r=n(4656),a=n(9450),s=n(6802);const o=(0,a.a)((e=>Math.sqrt(e))),i=(0,s.A)(r.Sqrt,(e=>Math.sqrt(e))),u={kernelName:r.Sqrt,backendName:"cpu",kernelFunc:i}},3670:(e,t,n)=>{"use strict";n.d(t,{Hz:()=>o,MS:()=>u});var r=n(4656),a=n(3781),s=n(3253);const o=(0,a.b)(((e,t)=>{const n=e-t;return n*n})),i=(0,s.j)(r.SquaredDifference,o),u={kernelName:r.SquaredDifference,backendName:"cpu",kernelFunc:i}},1442:(e,t,n)=>{"use strict";n.d(t,{t:()=>a});var r=n(4656);function a(e,t,n,a){const s=(0,r.buffer)(e,t.dtype);for(let e=0;e<s.size;e++){const r=s.indexToLoc(e),o=new Array(r.length);for(let e=0;e<o.length;e++)o[e]=r[e]*n[e]+a[e];s.set(t.get(...o),...r)}return s}},5741:(e,t,n)=>{"use strict";n.d(t,{A:()=>s});var r=n(4656);class a{constructor(e,t,n,a,s,o){this.separator=r.util.encodeString(e),this.nGramWidths=t,this.leftPad=r.util.encodeString(n),this.rightPad=r.util.encodeString(a),this.padWidth=s,this.preserveShort=o}getPadWidth(e){return Math.min(this.padWidth<0?e-1:this.padWidth,e-1)}getNumNGrams(e,t){const n=this.getPadWidth(t);return Math.max(0,e+2*n-t+1)}createNGrams(e,t,n,r,a,s){for(let o=0;o<a;++o){const i=this.getPadWidth(s),u=Math.max(0,i-o),l=Math.max(0,i-(a-(o+1))),c=s-(u+l),p=t+(u>0?0:o-i);let d=0;d+=u*this.leftPad.length;for(let t=0;t<c;++t)d+=e[p+t].length;d+=l*this.rightPad.length,d+=(u+l+c-1)*this.separator.length,n[r+o]=new Uint8Array(d);const h=n[r+o];let m=0;const f=e=>e.forEach((e=>h[m++]=e));for(let e=0;e<u;++e)f(this.leftPad),f(this.separator);for(let t=0;t<c-1;++t)f(e[p+t]),f(this.separator);if(c>0){f(e[p+c-1]);for(let e=0;e<l;++e)f(this.separator),f(this.rightPad)}else{for(let e=0;e<l-1;++e)f(this.rightPad),f(this.separator);f(this.rightPad)}}}compute(e,t){const n=e.length,a=t.length;if(a>0){let e=t[0];if(0!==e)throw new Error(`First split value must be 0, got ${e}`);for(let r=1;r<a;++r){let a=t[r]>=e;if(a=a&&t[r]<=n,!a)throw new Error(`Invalid split value ${t[r]}, must be in [${e}, ${n}]`);e=t[r]}if(e!==n)throw new Error(`Last split value must be data size. Expected ${n}, got ${e}`)}const s=a-1,o=r.util.getArrayFromDType("int32",a);if(0===n||0===a){const e=new Array(n);for(let e=0;e<=s;++e)o[e]=0;return[e,o]}o[0]=0;for(let e=1;e<=s;++e){const n=t[e]-t[e-1];let r=0;this.nGramWidths.forEach((e=>{r+=this.getNumNGrams(n,e)})),this.preserveShort&&n>0&&0===r&&(r=1),o[e]=o[e-1]+r}const i=new Array(o[s]);for(let n=0;n<s;++n){const r=t[n];let a=o[n];if(this.nGramWidths.forEach((s=>{const o=t[n+1]-t[n],u=this.getNumNGrams(o,s);this.createNGrams(e,r,i,a,u,s),a+=u})),this.preserveShort&&a===o[n]){const s=t[n+1]-t[n];if(0===s)continue;const o=s+2*this.padWidth,u=1;this.createNGrams(e,r,i,a,u,o)}}return[i,o]}}function s(e,t,n,r,s,o,i,u){return new a(n,r,s,o,i,u).compute(e,t)}},659:(e,t,n)=>{"use strict";n.d(t,{Q:()=>s});var r=n(4656);function a(e,t,n,r){if(!e.length)return;if(0===t.length){for(let t=0;t<e.length;++t)r.push(e.subarray(t,t+1));return}if(1===t.length){const a=t[0];let s=e.indexOf(a);for(;-1!==s;){const t=e.subarray(0,s);n&&0===t.length||r.push(t),s=(e=e.subarray(s+1)).indexOf(a)}return void(n&&0===e.length||r.push(e))}let a=0;for(let s=0;s<e.length+1;s++)if(s===e.length||-1!==t.indexOf(e[s])){const t=e.subarray(a,s);n&&0===t.length||r.push(t),a=s+1}}function s(e,t,n){const s=e.length,o=[];let i=0,u=0;const l=new Array(s);for(let r=0;r<s;++r){const s=o.length;a(e[r],t,n,o);const c=o.length-s;l[r]=c,i+=c,u=Math.max(u,c)}const c=r.util.getArrayFromDType("int32",2*i),p=new Array(i),d=[s,u];let h=0;for(let e=0;e<s;++e)for(let t=0;t<l[e];++t)c[2*h]=e,c[2*h+1]=t,p[h]=o[h],++h;return[c,p,d]}},8259:(e,t,n)=>{"use strict";n.d(t,{h:()=>a});var r=n(4656);function a(e,t){const n=r.util.getArrayFromDType("int32",e.length);for(let a=0;a<e.length;++a)n[a]=r.util.fingerPrint64(e[a]).modulo(t).getLowBitsUnsigned();return n}},2916:(e,t,n)=>{"use strict";n.d(t,{GR:()=>l,VY:()=>o,lu:()=>u});var r=n(4656),a=n(3781),s=n(3253);const o=(0,a.b)(((e,t)=>e-t)),i=(0,s.H)(((e,t,n,r)=>({real:e-n,imag:t-r}))),u=(0,s.j)(r.Sub,o,i),l={kernelName:r.Sub,backendName:"cpu",kernelFunc:u}},7594:(e,t,n)=>{"use strict";n.d(t,{R:()=>a});var r=n(4656);function a(e,t){const n=new Array(e.rank);for(let r=0;r<n.length;r++)n[r]=e.shape[r]*t[r];const a=(0,r.buffer)(n,e.dtype);for(let t=0;t<a.values.length;++t){const n=a.indexToLoc(t),r=new Array(e.rank);for(let t=0;t<r.length;t++)r[t]=n[t]%e.shape[t];const s=e.locToIndex(r);a.values[t]=e.values[s]}return a}},3407:(e,t,n)=>{"use strict";n.d(t,{W:()=>o});var r=n(4656);const a=(e,t)=>{const n=t.value-e.value;return 0===n?e.index-t.index:n};function s(e,t,n=0,o=e.length-1){for(;o>n;){if(o-n>600){const r=o-n+1,a=t-n+1,i=Math.log(r),u=.5*Math.exp(2*i/3),l=.5*Math.sqrt(i*u*(r-u)/r)*Math.sign(a-r/2);s(e,t,Math.max(n,Math.floor(t-a*u/r+l)),Math.min(o,Math.floor(t+(r-a)*u/r+l)))}const i=e[t];let u=n,l=o;for(r.util.swap(e,n,t),a(e[o],i)>0&&r.util.swap(e,n,o);u<l;){for(r.util.swap(e,u,l),u++,l--;a(e[u],i)<0;)u+=1;for(;a(e[l],i)>0;)l-=1}0===a(e[n],i)?r.util.swap(e,n,l):(l+=1,r.util.swap(e,l,o)),l<=t&&(n=l+1),t<=l&&(o=l-1)}}function o(e,t,n,o,i){const u=t[t.length-1],[l,c]=[e.length/u,u],p=r.util.getTypedArrayFromDType(n,l*o),d=r.util.getTypedArrayFromDType("int32",l*o);for(let t=0;t<l;t++){const n=t*c,r=e.subarray(n,n+c);let u=new Array(r.length);r.forEach(((e,t)=>u[t]={value:e,index:t})),o<u.length&&(s(u,o),u=u.slice(0,o)),i&&u.sort(a);const l=t*o,h=p.subarray(l,l+o),m=d.subarray(l,l+o);for(let e=0;e<o;e++)h[e]=u[e].value,m[e]=u[e].index}const h=t.slice();return h[h.length-1]=o,[(0,r.buffer)(h,n,p),(0,r.buffer)(h,"int32",d)]}},4512:(e,t,n)=>{"use strict";n.d(t,{b:()=>i,p:()=>o});var r=n(4656),a=n(7209),s=n(1355);function o(e){const{inputs:t,attrs:n,backend:r}=e,{x:o}=t,{perm:i}=n;(0,a.H)(o,"transpose");const u=o.shape.length,l=new Array(u);for(let e=0;e<l.length;e++)l[e]=o.shape[i[e]];const c=r.data.get(o.dataId).values,p=(0,s.H)(c,o.shape,o.dtype,i,l);return{dataId:r.write(p,l,o.dtype),shape:l,dtype:o.dtype}}const i={kernelName:r.Transpose,backendName:"cpu",kernelFunc:o}},1355:(e,t,n)=>{"use strict";n.d(t,{H:()=>a});var r=n(4656);function a(e,t,n,a,s){const o=t.length,i=r.util.sizeFromShape(t),u=r.util.computeStrides(t),l=r.util.computeStrides(s),c=r.util.getTypedArrayFromDType(n,r.util.sizeFromShape(s));for(let t=0;t<i;++t){const n=r.util.indexToLoc(t,o,u),s=new Array(n.length);for(let e=0;e<s.length;e++)s[e]=n[a[e]];c[r.util.locToIndex(s,o,l)]=e[t]}return c}},5366:(e,t,n)=>{"use strict";n.d(t,{S:()=>a});var r=n(4656);function a(e,t,n,a){const s=r.util.parseAxisParam(t,n)[0],o=[1,n[0],1];for(let e=0;e<s;e++)o[0]*=n[e];o[1]=n[s];for(let e=s+1;e<n.length;e++)o[2]*=n[e];const i={},u=new Int32Array(n[s]),l=new r.TensorBuffer(o,a,e),c=[],p=1===o[0]&&1===o[2];for(let t=0;t<n[s];t++){let n;if(p)n=e[t].toString();else{const e=[];for(let n=0;n<o[0];n++)for(let r=0;r<o[2];r++)e.push(l.get(n,t,r));n=e.join(",")}if(void 0!==i[n])u[t]=i[n];else{const e=Object.keys(i).length;i[n]=e,u[t]=e,c.push(t)}}const d=o.slice();d[1]=Object.keys(i).length;const h=new r.TensorBuffer(d,a);c.forEach(((e,t)=>{for(let n=0;n<o[0];n++)for(let r=0;r<o[2];r++)h.set(l.get(n,e,r),n,t,r)}));const m=n.slice();return m[s]=d[1],{outputValues:h.values,outputShape:m,indices:u}}},3781:(e,t,n)=>{"use strict";n.d(t,{b:()=>a});var r=n(4656);function a(e){return(t,n,a,s,o)=>{const i=r.backend_util.assertAndGetBroadcastShape(t,n),u=i.length,l=r.util.computeStrides(i),c=r.util.sizeFromShape(i),p=r.util.getTypedArrayFromDType(o,c),d=t.length,h=n.length,m=r.util.computeStrides(t),f=r.util.computeStrides(n),g=r.backend_util.getBroadcastDims(t,i),y=r.backend_util.getBroadcastDims(n,i);if(g.length+y.length===0)for(let t=0;t<p.length;++t)p[t]=e(a[t%a.length],s[t%s.length]);else for(let t=0;t<p.length;++t){const n=r.util.indexToLoc(t,u,l),o=n.slice(-d);g.forEach((e=>o[e]=0));const i=r.util.locToIndex(o,d,m),c=n.slice(-h);y.forEach((e=>c[e]=0));const b=r.util.locToIndex(c,h,f);p[t]=e(a[i],s[b])}return[p,i]}}},3253:(e,t,n)=>{"use strict";n.d(t,{H:()=>u,j:()=>i});var r=n(4656),a=n(7209),s=n(6832),o=n(7390);function i(e,t,n,i){return null==n?({inputs:n,backend:s})=>{const{a:o,b:u}=n,l=s;(0,a.H)([o,u],e);const c=l.data.get(o.dataId).values,p=l.data.get(u.dataId).values,d="string"===o.dtype?r.backend_util.fromUint8ToStringArray(c):c,h="string"===o.dtype?r.backend_util.fromUint8ToStringArray(p):p,m=i||o.dtype,[f,g]=t(o.shape,u.shape,d,h,m);return l.makeTensorInfo(g,m,f)}:({inputs:e,backend:r})=>{const{a,b:u}=e,l=r;if("complex64"===a.dtype||"complex64"===u.dtype){const e=(0,s.pj)({inputs:{x:a},backend:l,attrs:{dtype:"complex64"}}),t=l.data.get(e.dataId),r=t.complexTensorInfos.real,i=t.complexTensorInfos.imag,c=l.data.get(r.dataId).values,p=l.data.get(i.dataId).values,d=(0,s.pj)({inputs:{x:u},backend:l,attrs:{dtype:"complex64"}}),h=l.data.get(d.dataId),m=h.complexTensorInfos.real,f=h.complexTensorInfos.imag,g=l.data.get(m.dataId).values,y=l.data.get(f.dataId).values,[b,k,w]=n(a.shape,u.shape,c,p,g,y),v=l.makeTensorInfo(w,"float32",b),N=l.makeTensorInfo(w,"float32",k),x=(0,o.P)({inputs:{real:v,imag:N},backend:l});return l.disposeIntermediateTensorInfo(e),l.disposeIntermediateTensorInfo(d),l.disposeIntermediateTensorInfo(v),l.disposeIntermediateTensorInfo(N),x}{const e=l.data.get(a.dataId).values,n=l.data.get(u.dataId).values,r=i||a.dtype,[s,o]=t(a.shape,u.shape,e,n,r);return l.makeTensorInfo(o,r,s)}}}function u(e){return(t,n,a,s,o,i)=>{const u=r.backend_util.assertAndGetBroadcastShape(t,n),l=r.util.sizeFromShape(u),c=u.length,p=r.util.computeStrides(u),d=r.util.getTypedArrayFromDType("float32",l),h=r.util.getTypedArrayFromDType("float32",l),m=r.backend_util.getBroadcastDims(t,u),f=r.backend_util.getBroadcastDims(n,u),g=r.backend_util.mergeRealAndImagArrays(a,s),y=r.backend_util.mergeRealAndImagArrays(o,i),b=t.length,k=r.util.computeStrides(t),w=n.length,v=r.util.computeStrides(n);if(m.length+f.length===0)for(let t=0;t<d.length;t++){const n=t%g.length,r=t%y.length,a=e(g[2*n],g[2*n+1],y[2*r],y[2*r+1]);d[t]=a.real,h[t]=a.imag}else for(let t=0;t<d.length;t++){const n=r.util.indexToLoc(t,c,p),a=n.slice(-b);m.forEach((e=>a[e]=0));const s=r.util.locToIndex(a,b,k),o=n.slice(-w);f.forEach((e=>o[e]=0));const i=r.util.locToIndex(o,w,v),u=e(g[2*s],g[2*s+1],y[2*i],y[2*i+1]);d[t]=u.real,h[t]=u.imag}return[d,h,u]}}},9450:(e,t,n)=>{"use strict";n.d(t,{a:()=>a});var r=n(4656);function a(e){return(t,n,a)=>{const s=r.util.getTypedArrayFromDType(n,t.length);for(let n=0;n<t.length;++n)s[n]=e(t[n],a);return s}}},6802:(e,t,n)=>{"use strict";n.d(t,{A:()=>s,O:()=>o});var r=n(4656),a=n(7209);function s(e,t,n){return({inputs:s,attrs:o,backend:i})=>{const{x:u}=s;if((0,a.H)(u,e),"string"===u.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const l=i,c=l.data.get(u.dataId).values,p=r.util.sizeFromShape(u.shape),d=n||u.dtype,h=r.util.getArrayFromDType(d,p);for(let e=0;e<p;++e)h[e]=t(c[e],o);return l.makeTensorInfo(u.shape,d,h)}}function o(e,t,n){return({inputs:r,attrs:s,backend:o})=>{const{x:i}=r;if((0,a.H)(i,e),"string"===i.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const u=o,l=u.data.get(i.dataId).values,c=n||i.dtype,p=t(l,c,s);return u.makeTensorInfo(i.shape,c,p)}}},2402:(e,t,n)=>{"use strict";n.d(t,{l:()=>s});var r=n(4656),a=n(7390);function s(e,t,n="float32"){if("complex64"===n){const n=s(e,t,"float32"),r=s(e,t,"float32");return(0,a.P)({inputs:{real:n,imag:r},backend:e})}const o=r.util.makeZerosTypedArray(r.util.sizeFromShape(t),n);return e.makeTensorInfo(t,n,o)}},1082:(e,t,n)=>{"use strict";n.r(t),n.d(t,{GraphModel:()=>Le,deregisterOp:()=>A,loadGraphModel:()=>He,loadGraphModelSync:()=>We,registerOp:()=>_,version_converter:()=>Ge});var r={};n.r(r),n.d(r,{json:()=>V});var a={};n.r(a),n.d(a,{json:()=>C});var s={};n.r(s),n.d(s,{json:()=>z});var o={};n.r(o),n.d(o,{json:()=>P});var i={};n.r(i),n.d(i,{json:()=>L});var u={};n.r(u),n.d(u,{json:()=>H});var l={};n.r(l),n.d(l,{json:()=>W});var c={};n.r(c),n.d(c,{json:()=>G});var p={};n.r(p),n.d(p,{json:()=>U});var d={};n.r(d),n.d(d,{json:()=>q});var h={};n.r(h),n.d(h,{json:()=>j});var m={};n.r(m),n.d(m,{json:()=>K});var f={};n.r(f),n.d(f,{json:()=>X});var g={};n.r(g),n.d(g,{json:()=>Z});var y={};n.r(y),n.d(y,{json:()=>Q});var b={};n.r(b),n.d(b,{json:()=>Y});var k={};n.r(k),n.d(k,{json:()=>J});var w={};n.r(w),n.d(w,{json:()=>ee});var v={};n.r(v),n.d(v,{json:()=>te});var N={};n.r(N),n.d(N,{OP_SCOPE_SUFFIX:()=>ke.zvA,abs:()=>ke.WnP,acos:()=>ke.Khb,acosh:()=>ke.__u,add:()=>ke.IHx,addN:()=>ke.QBD,all:()=>ke.$6P,any:()=>ke.YjB,argMax:()=>ke.NqF,argMin:()=>ke.vHJ,asin:()=>ke.ZRM,asinh:()=>ke.VfV,atan:()=>ke.z4N,atan2:()=>ke.fvJ,atanh:()=>ke.C80,avgPool:()=>ke.wS1,avgPool3d:()=>ke.uR5,basicLSTMCell:()=>ke.zEQ,batchNorm:()=>ke.tgs,batchNorm2d:()=>ke.Dxk,batchNorm3d:()=>ke.JY5,batchNorm4d:()=>ke.p3b,batchToSpaceND:()=>ke.E4h,bincount:()=>ke.yE8,booleanMaskAsync:()=>ke.anm,broadcastArgs:()=>ke.XsQ,broadcastTo:()=>ke.UFq,buffer:()=>ke.f3b,cast:()=>ke.pju,ceil:()=>ke.mDi,clipByValue:()=>ke.iUl,clone:()=>ke.d9v,complex:()=>ke.PYB,concat:()=>ke.zoF,concat1d:()=>ke.gME,concat2d:()=>ke.Izb,concat3d:()=>ke.MNy,concat4d:()=>ke.ZaL,conv1d:()=>ke.PAt,conv2d:()=>ke.Tek,conv2dTranspose:()=>ke.bc,conv3d:()=>ke.pdZ,conv3dTranspose:()=>ke.$QV,cos:()=>ke.mCk,cosh:()=>ke.f9Y,cosineWindow:()=>ke.mew,cumprod:()=>ke.$Gn,cumsum:()=>ke.zbp,denseBincount:()=>ke.ppE,depthToSpace:()=>ke.nTT,depthwiseConv2d:()=>ke.B10,diag:()=>ke.Ka3,dilation2d:()=>ke.WmZ,div:()=>ke.hiC,divNoNan:()=>ke.NTj,dot:()=>ke.AKD,dropout:()=>ke.rvX,einsum:()=>ke.WYO,elu:()=>ke.pyx,enclosingPowerOfTwo:()=>ke.GRh,equal:()=>ke.DgJ,erf:()=>ke.qNN,euclideanNorm:()=>ke.d2q,exp:()=>ke.Qqt,expandDims:()=>ke.dt4,expm1:()=>ke.t$B,eye:()=>ke.iyy,fft:()=>ke.kp_,fill:()=>ke.hlL,floor:()=>ke.GWj,floorDiv:()=>ke.qPi,fused:()=>ke.imm,gather:()=>ke.Iqj,gatherND:()=>ke.dbB,greater:()=>ke.pjt,greaterEqual:()=>ke.brS,ifft:()=>ke.Sxn,imag:()=>ke.asL,image:()=>ke.BHj,inTopKAsync:()=>ke.V3u,irfft:()=>ke.wx0,isFinite:()=>ke.xVT,isInf:()=>ke.UWc,isNaN:()=>ke.i2d,leakyRelu:()=>ke.hi7,less:()=>ke.d9m,lessEqual:()=>ke.zN1,linalg:()=>ke.$r2,linspace:()=>ke.SX3,localResponseNormalization:()=>ke.G9k,log:()=>ke.cM7,log1p:()=>ke.Krr,logSigmoid:()=>ke.e_t,logSoftmax:()=>ke.CmS,logSumExp:()=>ke.l_t,logicalAnd:()=>ke.HvI,logicalNot:()=>ke.hJK,logicalOr:()=>ke.K5V,logicalXor:()=>ke.egP,losses:()=>ke.MB5,lowerBound:()=>ke.eab,matMul:()=>ke.OI3,max:()=>ke.Fp7,maxPool:()=>ke._sB,maxPool3d:()=>ke.YQQ,maxPoolWithArgmax:()=>ke.Ip$,maximum:()=>ke.gWQ,mean:()=>ke.J69,meshgrid:()=>ke.ry_,min:()=>ke.VV$,minimum:()=>ke.LTh,mirrorPad:()=>ke.VdP,mod:()=>ke.wQq,moments:()=>ke.Gi7,movingAverage:()=>ke.p_,mul:()=>ke.dC7,multiRNNCell:()=>ke.rq4,multinomial:()=>ke.SJ_,neg:()=>ke.W76,norm:()=>ke.KOy,notEqual:()=>ke.Quu,oneHot:()=>ke.lfX,ones:()=>ke.iUs,onesLike:()=>ke.JpU,op:()=>ke.op,outerProduct:()=>ke.N2O,pad:()=>ke.vku,pad1d:()=>ke.pNR,pad2d:()=>ke.koy,pad3d:()=>ke.t1L,pad4d:()=>ke.lGY,pool:()=>ke.d_R,pow:()=>ke.sQ3,prelu:()=>ke.AL3,print:()=>ke.S0v,prod:()=>ke.WVs,raggedGather:()=>ke.$gW,raggedRange:()=>ke.VT$,raggedTensorToTensor:()=>ke.N89,rand:()=>ke.TN_,randomGamma:()=>ke.wzB,randomNormal:()=>ke.nGf,randomStandardNormal:()=>ke.ruB,randomUniform:()=>ke.LGj,range:()=>ke.w6H,real:()=>ke.kwC,reciprocal:()=>ke.M25,relu:()=>ke.UYe,relu6:()=>ke.btT,reshape:()=>ke.XLQ,reverse:()=>ke.GYS,reverse1d:()=>ke.SDf,reverse2d:()=>ke.diP,reverse3d:()=>ke.sx7,reverse4d:()=>ke.mG2,rfft:()=>ke.QEs,round:()=>ke.NMM,rsqrt:()=>ke.bp0,scalar:()=>ke.iD$,scatterND:()=>ke.snQ,searchSorted:()=>ke.zcT,selu:()=>ke.U8D,separableConv2d:()=>ke.U_I,setdiff1dAsync:()=>ke.ODp,sigmoid:()=>ke.XD2,sign:()=>ke.Xxe,signal:()=>ke.tdS,sin:()=>ke.O$l,sinh:()=>ke.R_K,slice:()=>ke.tPi,slice1d:()=>ke.jZU,slice2d:()=>ke.SmN,slice3d:()=>ke.CnO,slice4d:()=>ke.p0P,softmax:()=>ke.XAC,softplus:()=>ke.Wvh,spaceToBatchND:()=>ke.fBT,sparse:()=>ke.rVs,sparseToDense:()=>ke.ers,spectral:()=>ke.uN7,split:()=>ke.Vl2,sqrt:()=>ke._b3,square:()=>ke.h62,squaredDifference:()=>ke.$i,squeeze:()=>ke.L9e,stack:()=>ke.knu,step:()=>ke.Nbs,stridedSlice:()=>ke.NXj,string:()=>ke.Z_8,sub:()=>ke.luU,sum:()=>ke.Smz,tan:()=>ke.ORZ,tanh:()=>ke.AEp,tensor:()=>ke.XeE,tensor1d:()=>ke.RRF,tensor2d:()=>ke.odF,tensor3d:()=>ke.wOQ,tensor4d:()=>ke.yXz,tensor5d:()=>ke.Bfx,tensor6d:()=>ke.xZs,tile:()=>ke.Gg6,topk:()=>ke.hg7,transpose:()=>ke.p4s,truncatedNormal:()=>ke.Xu6,unique:()=>ke.Two,unsortedSegmentSum:()=>ke.pUJ,unstack:()=>ke.HHK,upperBound:()=>ke.GaM,variable:()=>ke.VD$,where:()=>ke.arb,whereAsync:()=>ke.itS,zeros:()=>ke.lls,zerosLike:()=>ke.P84});var x,S,T=n(4656);(0,T.env)().registerFlag("KEEP_INTERMEDIATE_TENSORS",(()=>!1),(e=>{e&&console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.")})),function(e){e[e.DT_INVALID=0]="DT_INVALID",e[e.DT_FLOAT=1]="DT_FLOAT",e[e.DT_DOUBLE=2]="DT_DOUBLE",e[e.DT_INT32=3]="DT_INT32",e[e.DT_UINT8=4]="DT_UINT8",e[e.DT_INT16=5]="DT_INT16",e[e.DT_INT8=6]="DT_INT8",e[e.DT_STRING=7]="DT_STRING",e[e.DT_COMPLEX64=8]="DT_COMPLEX64",e[e.DT_INT64=9]="DT_INT64",e[e.DT_BOOL=10]="DT_BOOL",e[e.DT_QINT8=11]="DT_QINT8",e[e.DT_QUINT8=12]="DT_QUINT8",e[e.DT_QINT32=13]="DT_QINT32",e[e.DT_BFLOAT16=14]="DT_BFLOAT16",e[e.DT_QINT16=15]="DT_QINT16",e[e.DT_QUINT16=16]="DT_QUINT16",e[e.DT_UINT16=17]="DT_UINT16",e[e.DT_COMPLEX128=18]="DT_COMPLEX128",e[e.DT_HALF=19]="DT_HALF",e[e.DT_RESOURCE=20]="DT_RESOURCE",e[e.DT_VARIANT=21]="DT_VARIANT",e[e.DT_UINT32=22]="DT_UINT32",e[e.DT_UINT64=23]="DT_UINT64",e[e.DT_FLOAT_REF=101]="DT_FLOAT_REF",e[e.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",e[e.DT_INT32_REF=103]="DT_INT32_REF",e[e.DT_UINT8_REF=104]="DT_UINT8_REF",e[e.DT_INT16_REF=105]="DT_INT16_REF",e[e.DT_INT8_REF=106]="DT_INT8_REF",e[e.DT_STRING_REF=107]="DT_STRING_REF",e[e.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",e[e.DT_INT64_REF=109]="DT_INT64_REF",e[e.DT_BOOL_REF=110]="DT_BOOL_REF",e[e.DT_QINT8_REF=111]="DT_QINT8_REF",e[e.DT_QUINT8_REF=112]="DT_QUINT8_REF",e[e.DT_QINT32_REF=113]="DT_QINT32_REF",e[e.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",e[e.DT_QINT16_REF=115]="DT_QINT16_REF",e[e.DT_QUINT16_REF=116]="DT_QUINT16_REF",e[e.DT_UINT16_REF=117]="DT_UINT16_REF",e[e.DT_COMPLEX128_REF=118]="DT_COMPLEX128_REF",e[e.DT_HALF_REF=119]="DT_HALF_REF",e[e.DT_RESOURCE_REF=120]="DT_RESOURCE_REF",e[e.DT_VARIANT_REF=121]="DT_VARIANT_REF",e[e.DT_UINT32_REF=122]="DT_UINT32_REF",e[e.DT_UINT64_REF=123]="DT_UINT64_REF"}(x||(x={})),function(e){let t;!function(e){e[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"}(t=e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}))}(S||(S={}));const I={};function _(e,t){const n={tfOpName:e,category:"custom",inputs:[],attrs:[],customExecutor:t};I[e]=n}function E(e){return I[e]}function A(e){delete I[e]}function M(e,t,n,r,a){const s=t.inputParams[e];if(s&&void 0!==s.inputIndexStart){const e=s.inputIndexStart,o=0===s.inputIndexEnd?void 0:void 0===s.inputIndexEnd?e+1:s.inputIndexEnd;if("tensor"===s.type)return D(t.inputNames[s.inputIndexStart],n,r,a);if("tensors"===s.type)return t.inputNames.slice(e,o).map((e=>D(e,n,r,a)));const i=D(t.inputNames.slice(e)[0],n,r,a),u=i.dataSync();return"number"===s.type?u[0]:T.util.toNestedArray(i.shape,u)}const o=t.attrParams[e];return o&&o.value}function D(e,t,n,r){const[a,s]=O(e);if(null!=r){const e=r.getHashTableHandleByName(a);if(null!=e)return e}const o=n.currentContextIds.find((e=>!!t[$(a,e)]));return void 0!==o?t[$(a,o)][s]:void 0}function F(e,t){const[n,r,a]=O(e);return[$(n,t&&t.currentContextId),r,a]}function $(e,t){return t?`${e}-${t}`:e}function O(e){const t=e.split(":");if(1===t.length)return[e,0,void 0];const n=t[0],r=3===t.length?t[1]:void 0;return[n,Number(t[t.length-1]),r]}function B(e,t,n){let r=M("pad",e,t,n);if("explicit"===r){r=M("explicitPaddings",e,t,n);const a=[[0,0],[0,0],[0,0],[0,0]];for(let e=0;e<4;e++)a[e][0]=r[2*e],a[e][1]=r[2*e+1];return a}return r}function R(e){return e.kept?e:(0,T.clone)(e)}const V=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],C=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],z=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcatV2",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListLength",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}]},{tfOpName:"TensorListResize",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"size",type:"number"}]}],P=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}],L=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomStandardNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}],H=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],W=[{tfOpName:"LowerBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"UpperBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}],G=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}],U=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"InitializeTable",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}]},{tfOpName:"InitializeTableV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}]}],q=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]},{tfOpName:"ImageProjectiveTransformV3",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"transforms",type:"tensor"},{start:2,name:"outputShape",type:"number[]"},{start:3,name:"fillValue",type:"number"}],attrs:[{tfName:"interpolation",name:"interpolation",type:"string"},{tfName:"fill_mode",name:"fillMode",type:"string"}]}],j=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],K=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]}],X=[{tfOpName:"EuclideanNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",defaultValue:!1}]},{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}],Z=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumprod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}],Q=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}],Y=[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}],J=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}],ee=[{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}],te=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]},{tfOpName:"BroadcastArgs",category:"transformation",inputs:[{start:0,name:"s0",type:"tensor"},{start:1,name:"s1",type:"tensor"}],attrs:[]}];var ne=n(8834).Buffer;class re{constructor(){const e=[].concat(...[r,a,s,o,i,u,l,c,p,d,h,m,f,g,y,b,k,w,v].map((e=>e.json)));this.opMappers=e.reduce(((e,t)=>(e[t.tfOpName]=t,e)),{})}static get Instance(){return this._instance||(this._instance=new this)}transformGraph(e,t={}){const n=e.node,r=[],a=[],s=[],o=n.reduce(((e,t)=>(e[t.name]=this.mapNode(t),t.op.startsWith("Placeholder")?r.push(e[t.name]):"Const"===t.op?a.push(e[t.name]):null!=t.input&&0!==t.input.length||s.push(e[t.name]),e)),{});let i=[];const u=[];let l={},c={};null!=t&&(l=this.mapSignatureEntries(t.inputs),c=this.mapSignatureEntries(t.outputs));const p=Object.keys(o);p.forEach((e=>{const t=o[e];t.inputNames.forEach(((e,n)=>{const[r,,a]=F(e),s=o[r];if(null!=s.outputs){const e=s.outputs.indexOf(a);if(-1!==e){const a=`${r}:${e}`;t.inputNames[n]=a}}t.inputs.push(s),s.children.push(t)}))})),0===Object.keys(c).length?p.forEach((e=>{const t=o[e];0===t.children.length&&u.push(t)})):Object.keys(c).forEach((e=>{const[t]=F(e),n=o[t];null!=n&&(n.signatureKey=c[e],u.push(n))})),Object.keys(l).length>0?Object.keys(l).forEach((e=>{const[t]=F(e),n=o[t];n&&(n.signatureKey=l[e],i.push(n))})):i=r;let d={};null!=e.library&&null!=e.library.function&&(d=e.library.function.reduce(((e,t)=>(e[t.signature.name]=this.mapFunction(t),e)),{}));const h={nodes:o,inputs:i,outputs:u,weights:a,placeholders:r,signature:t,functions:d};return s.length>0&&(h.initNodes=s),h}mapSignatureEntries(e){return Object.keys(e||{}).reduce(((t,n)=>(t[e[n].name]=n,t)),{})}mapNode(e){const t=E(e.op)||this.opMappers[e.op]||{};null==e.attr&&(e.attr={});const n={name:e.name,op:e.op,category:t.category,inputNames:(e.input||[]).map((e=>e.startsWith("^")?e.slice(1):e)),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:e.attr,outputs:t.outputs};return null!=t.inputs&&(n.inputParams=t.inputs.reduce(((e,t)=>(e[t.name]={type:t.type,inputIndexStart:t.start,inputIndexEnd:t.end},e)),{})),null!=t.attrs&&(n.attrParams=t.attrs.reduce(((t,n)=>{const r=n.type;let a;switch(n.type){case"string":a=se(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=se(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"string[]":a=fe(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=fe(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number":a=ie(e.attr,n.tfName,n.defaultValue||0),void 0===a&&n.tfDeprecatedName&&(a=ie(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number[]":a=me(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=me(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool":a=oe(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=oe(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool[]":a=ye(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=ye(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape":a=he(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=he(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape[]":a=ge(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=ge(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype":a=ce(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=ce(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype[]":a=pe(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=pe(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"func":a=le(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=le(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${n.type} for op: ${e.op}`)}return t[n.name]={value:a,type:r},t}),{})),n}mapFunction(e){const t=e.nodeDef,n=[];let r={};null!=t&&(r=t.reduce(((e,t)=>(e[t.name]=this.mapNode(t),"Const"===t.op&&n.push(e[t.name]),e)),{}));const a=[],s=[];e.signature.inputArg.forEach((e=>{const[t]=F(e.name),n={name:t,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:ue(e.type),type:"dtype"}},children:[]};n.signatureKey=e.name,a.push(n),r[t]=n})),Object.keys(r).forEach((e=>{const t=r[e];t.inputNames.forEach(((e,n)=>{const[a,,s]=F(e),o=r[a];if(null!=o.outputs){const e=o.outputs.indexOf(s);if(-1!==e){const r=`${a}:${e}`;t.inputNames[n]=r}}t.inputs.push(o),o.children.push(t)}))}));const o=e.ret;e.signature.outputArg.forEach((e=>{const[t,n]=F(o[e.name]),a=r[t];null!=a&&(a.defaultOutput=n,s.push(a))}));const i=this.mapArgsToSignature(e);return{nodes:r,inputs:a,outputs:s,weights:n,placeholders:[],signature:i}}mapArgsToSignature(e){return{methodName:e.signature.name,inputs:e.signature.inputArg.reduce(((e,t)=>(e[t.name]=this.mapArgToTensorInfo(t),e)),{}),outputs:e.signature.outputArg.reduce(((t,n)=>(t[n.name]=this.mapArgToTensorInfo(n,e.ret),t)),{})}}mapArgToTensorInfo(e,t){let n=e.name;return null!=t&&(n=t[n]),{name:n,dtype:e.type}}}function ae(e,t){const n=Array.isArray(e)?String.fromCharCode.apply(null,e):function(e){const t=(0,T.env)().global;if(void 0!==t.atob)return t.atob(e);if(void 0!==ne)return new ne(e,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(e);return t?n:n.toLowerCase()}function se(e,t,n,r=!1){const a=e[t];return null!=a?ae(a.s,r):n}function oe(e,t,n){const r=e[t];return r?r.b:n}function ie(e,t,n){const r=e[t]||{},a=null!=r.i?r.i:null!=r.f?r.f:n;return"number"==typeof a?a:parseInt(a,10)}function ue(e){switch("string"==typeof e&&(e=x[e]),e){case x.DT_FLOAT:case x.DT_HALF:return"float32";case x.DT_INT32:case x.DT_INT64:case x.DT_INT8:case x.DT_UINT8:return"int32";case x.DT_BOOL:return"bool";case x.DT_DOUBLE:return"float32";case x.DT_STRING:return"string";default:return null}}function le(e,t,n){const r=e[t];return r&&r.func?r.func.name:n}function ce(e,t,n){const r=e[t];return r&&r.type?ue(r.type):n}function pe(e,t,n){const r=e[t];return r&&r.list&&r.list.type?r.list.type.map((e=>ue(e))):n}function de(e){if(!e.unknownRank)return null!=e.dim?e.dim.map((e=>"number"==typeof e.size?e.size:parseInt(e.size,10))):[]}function he(e,t,n){const r=e[t];return r&&r.shape?de(r.shape):n}function me(e,t,n){const r=e[t];return r?((r.list.f&&r.list.f.length?r.list.f:r.list.i)||[]).map((e=>"number"==typeof e?e:parseInt(e,10))):n}function fe(e,t,n,r=!1){const a=e[t];return a&&a.list&&a.list.s?a.list.s.map((e=>ae(e,r))):n}function ge(e,t,n){const r=e[t];return r&&r.list&&r.list.shape?r.list.shape.map((e=>de(e))):n}function ye(e,t,n){const r=e[t];return r&&r.list&&r.list.b?r.list.b:n}class be{constructor(e,t,n){this.node=e,this.tensorMap=t,this.context=n,this.inputs=[],this.attrs={},this.inputs=e.inputNames.map((e=>this.getInput(e))),null!=e.rawAttrs&&(this.attrs=Object.keys(e.rawAttrs).reduce(((e,t)=>(e[t]=this.getAttr(t),e)),{}))}getInput(e){return D(e,this.tensorMap,this.context)}getAttr(e,t){const n=this.node.rawAttrs[e];if(null!=n.tensor)return D(e,this.tensorMap,this.context);if(null!=n.i||null!=n.f)return ie(this.node.rawAttrs,e,t);if(null!=n.s)return se(this.node.rawAttrs,e,t);if(null!=n.b)return oe(this.node.rawAttrs,e,t);if(null!=n.shape)return he(this.node.rawAttrs,e,t);if(null!=n.type)return ce(this.node.rawAttrs,e,t);if(null!=n.list){if(null!=n.list.i||null!=n.list.f)return me(this.node.rawAttrs,e,t);if(null!=n.list.s)return fe(this.node.rawAttrs,e,t);if(null!=n.list.shape)return ge(this.node.rawAttrs,e,t);if(null!=n.list.b)return ye(this.node.rawAttrs,e,t);if(null!=n.list.type)return pe(this.node.rawAttrs,e,t)}return t}}var ke=n(886);function we(e,t,n=""){if("number"!=typeof e&&"number"!=typeof t){T.util.assert(e.length===t.length,(()=>n+` Shapes ${e} and ${t} must match`));for(let r=0;r<e.length;r++){const a=e[r],s=t[r];T.util.assert(a<0||s<0||a===s,(()=>n+` Shapes ${e} and ${t} must match`))}}}function ve(e){return"number"!=typeof e&&!e.some((e=>e<0))}function Ne(e,t,n){let r=xe(e,n);const a=!ve(r);if(a&&0===t.length)throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${r}`);if(a&&t.forEach((e=>{r=xe(e.shape,r)})),!ve(r))throw new Error(`Non-fully-defined elementShape: ${r}`);return r}function xe(e,t){if("number"==typeof e)return t;if("number"==typeof t)return e;if(e.length!==t.length)throw new Error(`Incompatible ranks during merge: ${e} vs. ${t}`);const n=[];for(let r=0;r<e.length;++r){const a=e[r],s=t[r];if(a>=0&&s>=0&&a!==s)throw new Error(`Incompatible shape during merge: ${e} vs. ${t}`);n[r]=a>=0?a:s}return n}class Se{constructor(e,t,n,r,a,s,o){this.name=e,this.dtype=t,this.maxSize=n,this.elementShape=r,this.identicalElementShapes=a,this.dynamicSize=s,this.clearAfterRead=o,this.tensors=[],this.closed_=!1,this.idTensor=(0,T.scalar)(0),(0,T.keep)(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.tensor.id)||t.tensor.dispose()})),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||e>=this.size())throw new Error(`Tried to read from index ${e}, but array size is: ${this.size()}`);const t=this.tensors[e];if(t.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${e} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(t.cleared=!0),t.read=!0,t.tensor}readMany(e){return e.map((e=>this.read(e)))}write(e,t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||!this.dynamicSize&&e>=this.maxSize)throw new Error(`Tried to write to index ${e}, but array is not resizeable and size is: ${this.maxSize}`);const n=this.tensors[e]||{};if(t.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e},\n          because the value dtype is ${t.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=t.shape),we(this.elementShape,t.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${e}.`),n.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been read.`);if(n.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been written.`);n.tensor=t,(0,T.keep)(t),n.written=!0,this.tensors[e]=n}writeMany(e,t){if(e.length!==t.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${e.length} is not the same as tensors size: ${t.length}.`);e.forEach(((e,n)=>this.write(e,t[n])))}gather(e,t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${t}`);if(e)e=e.slice(0,this.size());else{e=[];for(let t=0;t<this.size();t++)e.push(t)}if(0===e.length)return(0,T.tensor)([],[0].concat(this.elementShape));const n=this.readMany(e);return we(this.elementShape,n[0].shape,"TensorArray shape mismatch: "),(0,T.stack)(n,0)}concat(e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${e}`);if(0===this.size())return(0,T.tensor)([],[0].concat(this.elementShape));const t=[];for(let e=0;e<this.size();e++)t.push(e);const n=this.readMany(t);return we(this.elementShape,n[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`),(0,T.concat)(n,0)}scatter(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);if(e.length!==t.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);const n=Math.max(...e);if(!this.dynamicSize&&n>=this.maxSize)throw new Error(`Max index must be < array size (${n}  vs. ${this.maxSize})`);this.writeMany(e,(0,T.unstack)(t,0))}split(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);let n=0;const r=e.map((e=>(n+=e,n)));if(n!==t.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${n}, and tensor's shape is: ${t.shape}`);if(!this.dynamicSize&&e.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${e.length}), and the TensorArray is not marked as dynamically resizeable`);const a=0===n?0:t.size/n,s=[];(0,T.tidy)((()=>{t=(0,T.reshape)(t,[1,n,a]);for(let n=0;n<e.length;++n){const o=[0,0===n?0:r[n-1],0],i=[1,e[n],a];s[n]=(0,T.reshape)((0,T.slice)(t,o,i),this.elementShape)}return s}));const o=[];for(let t=0;t<e.length;t++)o[t]=t;this.writeMany(o,s)}}class Te{constructor(e,t,n,r=-1){this.tensors=e,this.elementShape=t,this.elementDtype=n,null!=e&&e.forEach((e=>{if(n!==e.dtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${e.dtype}`);we(t,e.shape,"TensorList shape mismatch: "),(0,T.keep)(e)})),this.idTensor=(0,T.scalar)(0),this.maxNumElements=r,(0,T.keep)(this.idTensor)}get id(){return this.idTensor.id}copy(){return new Te([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.id)||t.dispose()})),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(e,t,n=-1){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(-1!==n&&this.tensors.length!==n)throw new Error(`Operation expected a list with ${n} elements but got a list with ${this.tensors.length} elements.`);we(e,this.elementShape,"TensorList shape mismatch: ");const r=Ne(this.elementShape,this.tensors,e);return(0,T.tidy)((()=>{const e=this.tensors.map((e=>(0,T.reshape)(e,r)));return(0,T.stack)(e,0)}))}popBack(e,t){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error("Trying to pop from an empty list.");const n=Ne(this.elementShape,this.tensors,e),r=this.tensors.pop();return r.kept=!1,we(r.shape,e,"TensorList shape mismatch: "),(0,T.reshape)(r,n)}pushBack(e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(we(e.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");(0,T.keep)(e),this.tensors.push(e)}resize(e){if(e<0)throw new Error(`TensorListResize expects size to be non-negative. Got: ${e}`);if(-1!==this.maxNumElements&&e>this.maxNumElements)throw new Error(`TensorListResize input size ${e} is greater maxNumElement ${this.maxNumElements}.`);const t=new Te([],this.elementShape,this.elementDtype,this.maxNumElements);t.tensors.length=e;for(let n=0;n<Math.min(this.tensors.length,e);++n)t.tensors[n]=this.tensors[n];return t}getItem(e,t,n){if(n!==this.elementDtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);if(e<0||e>this.tensors.length)throw new Error(`Trying to access element ${e} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[e])throw new Error(`element at index ${e} is null.`);we(this.tensors[e].shape,t,"TensorList shape mismatch: ");const r=Ne(this.elementShape,this.tensors,t);return(0,T.reshape)(this.tensors[e],r)}setItem(e,t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(e<0||-1!==this.maxNumElements&&e>=this.maxNumElements)throw new Error(`Trying to set element ${e} in a list with max ${this.maxNumElements} elements.`);we(this.elementShape,t.shape,"TensorList shape mismatch: "),(0,T.keep)(t),null!=this.tensors[e]&&(this.tensors[e].kept=!1),this.tensors[e]=t}gather(e,t,n){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);we(this.elementShape,n,"TensorList shape mismatch: "),e=e.slice(0,this.size());const r=Ne(this.elementShape,this.tensors,n);return 0===e.length?(0,T.tensor)([],[0].concat(r)):(0,T.tidy)((()=>{const t=e.map((e=>(0,T.reshape)(this.tensors[e],r)));return(0,T.stack)(t,0)}))}concat(e,t){if(e&&e!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${e}`);we(this.elementShape,t,"TensorList shape mismatch: ");const n=Ne(this.elementShape,this.tensors,t);return 0===this.size()?(0,T.tensor)([],[0].concat(n)):(0,T.tidy)((()=>{const e=this.tensors.map((e=>(0,T.reshape)(e,n)));return(0,T.concat)(e,0)}))}}function Ie(e,t,n){const[r,a]=M("fusedOps",e,t,n),s="biasadd"===r,o=!s,i="prelu"===a,u="fusedbatchnorm"===r,l=M("numArgs",e,t,n);if(s){if(i&&2!==l)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&s&&1!==l)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(u)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");const c=M("strides",e,t,n),p=B(e,t,n),d=M("dataFormat",e,t,n).toUpperCase(),h=M("dilations",e,t,n);let[m,f]=M("args",e,t,n);return o&&(f=m,m=void 0),{stride:c,pad:p,dataFormat:d,dilations:h,biasArg:m,preluArg:f,activationFunc:a,leakyreluAlpha:M("leakyreluAlpha",e,t,n)}}function _e(e,t,n){return{boxes:M("boxes",e,t,n),scores:M("scores",e,t,n),maxOutputSize:M("maxOutputSize",e,t,n),iouThreshold:M("iouThreshold",e,t,n),scoreThreshold:M("scoreThreshold",e,t,n),softNmsSigma:M("softNmsSigma",e,t,n)}}var Ee=n(2502);class Ae{constructor(e,t){this.keyDType=e,this.valueDType=t,this.handle=(0,T.scalar)(0),this.tensorMap=new Map,(0,T.keep)(this.handle)}get id(){return this.handle.id}clearAndClose(){this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}tensorSize(){return Ee.i(this.size(),"int32")}async import(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),(0,T.tidy)((()=>{const e=(0,T.unstack)(t),r=n.length,a=e.length;T.util.assert(r===a,(()=>`The number of elements doesn't match, keys has ${r} elements, the values has ${a} elements.`));for(let t=0;t<r;t++){const r=n[t],a=e[t];(0,T.keep)(a),this.tensorMap.set(r,a)}return this.handle}))}async find(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return(0,T.tidy)((()=>{const e=[];for(let r=0;r<n.length;r++){const a=n[r],s=this.findWithDefault(a,t);e.push(s)}return(0,T.stack)(e)}))}findWithDefault(e,t){const n=this.tensorMap.get(e);return null!=n?n:t}checkKeyAndValueTensor(e,t){if(e.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got ${e.dtype}`);if(t.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got ${t.dtype}`)}}function Me(e,t,n,r,a=T.tidy){const s=((e,t,n)=>{switch(e.category){case"arithmetic":return a((()=>((e,t,n,r=N)=>{switch(e.op){case"BiasAdd":case"AddV2":case"Add":return[r.add(M("a",e,t,n),M("b",e,t,n))];case"AddN":return[r.addN(M("tensors",e,t,n))];case"FloorMod":case"Mod":return[r.mod(M("a",e,t,n),M("b",e,t,n))];case"Mul":return[r.mul(M("a",e,t,n),M("b",e,t,n))];case"RealDiv":case"Div":return[r.div(M("a",e,t,n),M("b",e,t,n))];case"DivNoNan":return[r.divNoNan(M("a",e,t,n),M("b",e,t,n))];case"FloorDiv":return[r.floorDiv(M("a",e,t,n),M("b",e,t,n))];case"Sub":return[r.sub(M("a",e,t,n),M("b",e,t,n))];case"Minimum":return[r.minimum(M("a",e,t,n),M("b",e,t,n))];case"Maximum":return[r.maximum(M("a",e,t,n),M("b",e,t,n))];case"Pow":return[r.pow(M("a",e,t,n),M("b",e,t,n))];case"SquaredDifference":return[r.squaredDifference(M("a",e,t,n),M("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"basic_math":return a((()=>((e,t,n,r=N)=>{switch(e.op){case"Abs":case"ComplexAbs":return[r.abs(M("x",e,t,n))];case"Acos":return[r.acos(M("x",e,t,n))];case"Acosh":return[r.acosh(M("x",e,t,n))];case"Asin":return[r.asin(M("x",e,t,n))];case"Asinh":return[r.asinh(M("x",e,t,n))];case"Atan":return[r.atan(M("x",e,t,n))];case"Atan2":return[r.atan2(M("x",e,t,n),M("y",e,t,n))];case"Atanh":return[r.atanh(M("x",e,t,n))];case"Ceil":return[r.ceil(M("x",e,t,n))];case"Complex":return[r.complex(M("real",e,t,n),M("imag",e,t,n))];case"Cos":return[r.cos(M("x",e,t,n))];case"Cosh":return[r.cosh(M("x",e,t,n))];case"Elu":return[r.elu(M("x",e,t,n))];case"Erf":return[r.erf(M("x",e,t,n))];case"Exp":return[r.exp(M("x",e,t,n))];case"Expm1":return[r.expm1(M("x",e,t,n))];case"Floor":return[r.floor(M("x",e,t,n))];case"Log":return[r.log(M("x",e,t,n))];case"Log1p":return[r.log1p(M("x",e,t,n))];case"Imag":return[r.imag(M("x",e,t,n))];case"Neg":return[r.neg(M("x",e,t,n))];case"Reciprocal":return[r.reciprocal(M("x",e,t,n))];case"Real":return[r.real(M("x",e,t,n))];case"Relu":return[r.relu(M("x",e,t,n))];case"Round":return[r.round(M("x",e,t,n))];case"Selu":return[r.selu(M("x",e,t,n))];case"Sigmoid":return[r.sigmoid(M("x",e,t,n))];case"Sin":return[r.sin(M("x",e,t,n))];case"Sign":return[r.sign(M("x",e,t,n))];case"Sinh":return[r.sinh(M("x",e,t,n))];case"Softplus":return[r.softplus(M("x",e,t,n))];case"Sqrt":return[r.sqrt(M("x",e,t,n))];case"Square":return[r.square(M("x",e,t,n))];case"Tanh":return[r.tanh(M("x",e,t,n))];case"Tan":return[r.tan(M("x",e,t,n))];case"ClipByValue":return[r.clipByValue(M("x",e,t,n),M("clipValueMin",e,t,n),M("clipValueMax",e,t,n))];case"Relu6":return[r.relu6(M("x",e,t,n))];case"Rsqrt":return[r.rsqrt(D(e.inputNames[0],t,n))];case"Prod":return[r.prod(M("x",e,t,n),M("axes",e,t,n))];case"LeakyRelu":return[r.leakyRelu(M("x",e,t,n),M("alpha",e,t,n))];case"Prelu":return[r.prelu(M("x",e,t,n),M("alpha",e,t,n))];case"IsNan":return[r.isNaN(D(e.inputNames[0],t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"control":return(async(e,t,n)=>{switch(e.op){case"If":case"StatelessIf":{const r=M("thenBranch",e,t,n),a=M("elseBranch",e,t,n),s=M("cond",e,t,n),o=M("args",e,t,n);return(await s.data())[0]?n.functionMap[r].executeFunctionAsync(o,n.tensorArrayMap,n.tensorListMap):n.functionMap[a].executeFunctionAsync(o,n.tensorArrayMap,n.tensorListMap)}case"While":case"StatelessWhile":{const r=M("body",e,t,n),a=M("cond",e,t,n),s=M("args",e,t,n),o=await n.functionMap[a].executeFunctionAsync(s,n.tensorArrayMap,n.tensorListMap),i=s.map((e=>e.id));let u=await o[0].data();o.forEach((e=>{e.kept||-1!==i.indexOf(e.id)||e.dispose()}));let l=s;for(;u[0];){const e=l;l=await n.functionMap[r].executeFunctionAsync(l,n.tensorArrayMap,n.tensorListMap);const t=l.map((e=>e.id));e.forEach((e=>{e.kept||-1!==i.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}));const s=await n.functionMap[a].executeFunctionAsync(l,n.tensorArrayMap,n.tensorListMap);u=await s[0].data(),s.forEach((e=>{e.kept||-1!==i.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}))}return l}case"LoopCond":return[R(M("pred",e,t,n))];case"Switch":{const r=M("pred",e,t,n);let a=M("data",e,t,n);return a.kept||(a=R(a)),(await r.data())[0]?[void 0,a]:[a,void 0]}case"Merge":{const r=e.inputNames.find((e=>void 0!==D(e,t,n)));return r?[R(D(r,t,n))]:void 0}case"Enter":{const r=M("frameName",e,t,n),a=M("tensor",e,t,n);return n.enterFrame(r),[R(a)]}case"Exit":{const r=M("tensor",e,t,n);return n.exitFrame(),[R(r)]}case"NextIteration":{const r=M("tensor",e,t,n);return n.nextIteration(),[R(r)]}case"TensorArrayV3":{const r=M("size",e,t,n),a=M("dtype",e,t,n),s=M("elementShape",e,t,n),o=M("dynamicSize",e,t,n),i=M("clearAfterRead",e,t,n),u=M("identicalElementShapes",e,t,n),l=M("name",e,t,n),c=new Se(l,a,r,s,u,o,i);return n.addTensorArray(c),[c.idTensor,(0,T.scalar)(1)]}case"TensorArrayWriteV3":{const r=M("tensorArrayId",e,t,n),a=M("index",e,t,n),s=M("tensor",e,t,n),o=n.getTensorArray(r.id);return o.write(a,s),[o.idTensor]}case"TensorArrayReadV3":{const r=M("tensorArrayId",e,t,n),a=M("index",e,t,n);return[n.getTensorArray(r.id).read(a)]}case"TensorArrayGatherV3":{const r=M("tensorArrayId",e,t,n),a=M("indices",e,t,n),s=M("dtype",e,t,n);return[n.getTensorArray(r.id).gather(a,s)]}case"TensorArrayScatterV3":{const r=M("tensorArrayId",e,t,n),a=M("indices",e,t,n),s=M("tensor",e,t,n),o=n.getTensorArray(r.id);return o.scatter(a,s),[o.idTensor]}case"TensorArrayConcatV3":{const r=M("tensorArrayId",e,t,n),a=n.getTensorArray(r.id),s=M("dtype",e,t,n);return[a.concat(s)]}case"TensorArraySplitV3":{const r=M("tensorArrayId",e,t,n),a=M("tensor",e,t,n),s=M("lengths",e,t,n),o=n.getTensorArray(r.id);return o.split(s,a),[o.idTensor]}case"TensorArraySizeV3":{const r=M("tensorArrayId",e,t,n),a=n.getTensorArray(r.id);return[(0,T.scalar)(a.size(),"int32")]}case"TensorArrayCloseV3":{const r=M("tensorArrayId",e,t,n),a=n.getTensorArray(r.id);return a.clearAndClose(),[a.idTensor]}case"TensorListSetItem":{const r=M("tensorListId",e,t,n),a=M("index",e,t,n),s=M("tensor",e,t,n),o=n.getTensorList(r.id);return o.setItem(a,s),[o.idTensor]}case"TensorListGetItem":{const r=M("tensorListId",e,t,n),a=M("index",e,t,n),s=M("elementShape",e,t,n),o=M("elementDType",e,t,n);return[n.getTensorList(r.id).getItem(a,s,o)]}case"TensorListScatterV2":case"TensorListScatter":{const r=M("indices",e,t,n),a=function(e,t,n,r){if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);const a=Math.max(...t);if(null!=r&&-1!==r&&a>=r)throw new Error(`Max index must be < array size (${a}  vs. ${r})`);const s=new Te([],n,e.dtype,r),o=(0,T.unstack)(e,0);return t.forEach(((e,t)=>{s.setItem(e,o[t])})),s}(M("tensor",e,t,n),r,M("elementShape",e,t,n),M("numElements",e,t,n));return n.addTensorList(a),[a.idTensor]}case"TensorListReserve":case"EmptyTensorList":{const r=M("elementShape",e,t,n),a=M("elementDType",e,t,n);let s;s="TensorListReserve"===e.op?"numElements":"maxNumElements";const o=M(s,e,t,n),i=function(e,t,n,r){return new Te([],e,t,r)}(r,a,0,"TensorListReserve"===e.op?-1:o);return n.addTensorList(i),[i.idTensor]}case"TensorListGather":{const r=M("tensorListId",e,t,n),a=M("indices",e,t,n),s=M("elementShape",e,t,n),o=M("elementDType",e,t,n);return[n.getTensorList(r.id).gather(a,o,s)]}case"TensorListStack":{const r=M("tensorListId",e,t,n),a=M("elementShape",e,t,n),s=M("elementDType",e,t,n),o=M("numElements",e,t,n);return[n.getTensorList(r.id).stack(a,s,o)]}case"TensorListFromTensor":{const r=function(e,t,n){const r=e.dtype;if(e.shape.length<1)throw new Error(`Tensor must be at least a vector, but saw shape: ${e.shape}`);if(e.dtype!==n)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${n}`);we(e.shape.slice(1),t,"TensorList shape mismatch: ");const a=(0,T.unstack)(e);return new Te(a,t,r)}(M("tensor",e,t,n),M("elementShape",e,t,n),M("elementDType",e,t,n));return n.addTensorList(r),[r.idTensor]}case"TensorListConcat":case"TensorListConcatV2":{const r=M("tensorListId",e,t,n),a=n.getTensorList(r.id),s=M("dtype",e,t,n),o=M("elementShape",e,t,n);return[a.concat(s,o)]}case"TensorListPushBack":{const r=M("tensorListId",e,t,n),a=M("tensor",e,t,n),s=n.getTensorList(r.id);return s.pushBack(a),[s.idTensor]}case"TensorListPopBack":{const r=M("tensorListId",e,t,n),a=M("elementShape",e,t,n),s=M("elementDType",e,t,n);return[n.getTensorList(r.id).popBack(a,s)]}case"TensorListSplit":{const r=M("tensor",e,t,n),a=M("elementShape",e,t,n),s=function(e,t,n){let r=0;const a=t.map((e=>(r+=e,r)));if(r!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${r}, and tensor's shape is: ${e.shape}`);const s=xe(e.shape.slice(1),n),o=0===r?0:e.size/r,i=(0,T.tidy)((()=>{const n=[];e=(0,T.reshape)(e,[1,r,o]);for(let r=0;r<t.length;++r){const i=[0,0===r?0:a[r-1],0],u=[1,t[r],o];n[r]=(0,T.reshape)((0,T.slice)(e,i,u),s)}return e.dispose(),n})),u=new Te([],n,e.dtype,t.length);for(let e=0;e<i.length;e++)u.setItem(e,i[e]);return u}(r,M("lengths",e,t,n),a);return n.addTensorList(s),[s.idTensor]}case"TensorListLength":{const r=M("tensorListId",e,t,n),a=n.getTensorList(r.id);return[(0,T.scalar)(a.size(),"int32")]}case"TensorListResize":{const r=M("tensorListId",e,t,n),a=M("size",e,t,n),s=n.getTensorList(r.id).resize(a);return n.addTensorList(s),[s.idTensor]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n);case"convolution":return a((()=>((e,t,n,r=N)=>{switch(e.op){case"Conv1D":{const a=M("stride",e,t,n),s=M("pad",e,t,n),o=M("dataFormat",e,t,n).toUpperCase(),i=M("dilation",e,t,n);return[r.conv1d(M("x",e,t,n),M("filter",e,t,n),a,s,o,i)]}case"Conv2D":{const a=M("strides",e,t,n),s=B(e,t,n),o=M("dataFormat",e,t,n).toUpperCase(),i=M("dilations",e,t,n);return[r.conv2d(M("x",e,t,n),M("filter",e,t,n),[a[1],a[2]],s,o,[i[1],i[2]])]}case"_FusedConv2D":{const{stride:a,pad:s,dataFormat:o,dilations:i,biasArg:u,preluArg:l,activationFunc:c,leakyreluAlpha:p}=Ie(e,t,n);return[r.fused.conv2d({x:M("x",e,t,n),filter:M("filter",e,t,n),strides:[a[1],a[2]],pad:s,dataFormat:o,dilations:[i[1],i[2]],bias:u,activation:c,preluActivationWeights:l,leakyreluAlpha:p})]}case"FusedDepthwiseConv2dNative":{const{stride:a,pad:s,dataFormat:o,dilations:i,biasArg:u,preluArg:l,activationFunc:c,leakyreluAlpha:p}=Ie(e,t,n);return[r.fused.depthwiseConv2d({x:M("x",e,t,n),filter:M("filter",e,t,n),strides:[a[1],a[2]],pad:s,dataFormat:o,dilations:[i[1],i[2]],bias:u,activation:c,preluActivationWeights:l,leakyreluAlpha:p})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const a=M("outputShape",e,t,n),s=M("strides",e,t,n),o=B(e,t,n);return[r.conv2dTranspose(M("x",e,t,n),M("filter",e,t,n),a,[s[1],s[2]],o)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const a=M("strides",e,t,n),s=B(e,t,n),o=M("dilations",e,t,n),i=M("dataFormat",e,t,n).toUpperCase();return[r.depthwiseConv2d(M("input",e,t,n),M("filter",e,t,n),[a[1],a[2]],s,i,[o[1],o[2]])]}case"Conv3D":{const a=M("strides",e,t,n),s=M("pad",e,t,n),o=M("dataFormat",e,t,n).toUpperCase(),i=M("dilations",e,t,n);return[r.conv3d(M("x",e,t,n),M("filter",e,t,n),[a[1],a[2],a[3]],s,o,[i[1],i[2],i[3]])]}case"AvgPool":{const a=M("strides",e,t,n),s=M("pad",e,t,n),o=M("kernelSize",e,t,n);return[r.avgPool(M("x",e,t,n),[o[1],o[2]],[a[1],a[2]],s)]}case"MaxPool":{const a=M("strides",e,t,n),s=M("pad",e,t,n),o=M("kernelSize",e,t,n);return[r.maxPool(M("x",e,t,n),[o[1],o[2]],[a[1],a[2]],s)]}case"MaxPoolWithArgmax":{const a=M("strides",e,t,n),s=M("pad",e,t,n),o=M("kernelSize",e,t,n),i=M("includeBatchInIndex",e,t,n),{result:u,indexes:l}=r.maxPoolWithArgmax(M("x",e,t,n),[o[1],o[2]],[a[1],a[2]],s,i);return[u,l]}case"AvgPool3D":{const a=M("strides",e,t,n),s=M("pad",e,t,n),o=M("kernelSize",e,t,n);return[r.avgPool3d(M("x",e,t,n),[o[1],o[2],o[3]],[a[1],a[2],a[3]],s)]}case"MaxPool3D":{const a=M("strides",e,t,n),s=M("pad",e,t,n),o=M("kernelSize",e,t,n);return[r.maxPool3d(M("x",e,t,n),[o[1],o[2],o[3]],[a[1],a[2],a[3]],s)]}case"Dilation2D":{const a=M("strides",e,t,n),s=M("pad",e,t,n),o=M("dilations",e,t,n),i=a[1],u=a[2],l=o[1],c=o[2];return[r.dilation2d(M("x",e,t,n),M("filter",e,t,n),[i,u],s,[l,c],"NHWC")]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"creation":return a((()=>((e,t,n,r=N)=>{switch(e.op){case"Fill":{const a=M("shape",e,t,n),s=M("dtype",e,t,n),o=M("value",e,t,n);return[r.fill(a,o,s)]}case"LinSpace":{const a=M("start",e,t,n),s=M("stop",e,t,n),o=M("num",e,t,n);return[r.linspace(a,s,o)]}case"Multinomial":{const a=M("logits",e,t,n),s=M("numSamples",e,t,n),o=M("seed",e,t,n);return[r.multinomial(a,s,o)]}case"OneHot":{const a=M("indices",e,t,n),s=M("depth",e,t,n),o=M("onValue",e,t,n),i=M("offValue",e,t,n),u=M("dtype",e,t,n);return[r.oneHot(a,s,o,i,u)]}case"Ones":return[r.ones(M("shape",e,t,n),M("dtype",e,t,n))];case"OnesLike":return[r.onesLike(M("x",e,t,n))];case"RandomStandardNormal":return[r.randomStandardNormal(M("shape",e,t,n),M("dtype",e,t,n),M("seed",e,t,n))];case"RandomUniform":return[r.randomUniform(M("shape",e,t,n),M("minval",e,t,n),M("maxval",e,t,n),M("dtype",e,t,n))];case"Range":{const a=M("start",e,t,n),s=M("stop",e,t,n),o=M("step",e,t,n);return[r.range(a,s,o,M("dtype",e,t,n))]}case"TruncatedNormal":{const a=M("shape",e,t,n),s=M("mean",e,t,n),o=M("stdDev",e,t,n),i=M("seed",e,t,n);return[r.truncatedNormal(a,s,o,M("dtype",e,t,n),i)]}case"Zeros":return[r.zeros(M("shape",e,t,n),M("dtype",e,t,n))];case"ZerosLike":return[r.zerosLike(M("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"dynamic":return(async(e,t,n,r,a=N)=>{switch(e.op){case"NonMaxSuppressionV5":{const{boxes:r,scores:s,maxOutputSize:o,iouThreshold:i,scoreThreshold:u,softNmsSigma:l}=_e(e,t,n),c=await a.image.nonMaxSuppressionWithScoreAsync(r,s,o,i,u,l);return[c.selectedIndices,c.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:r,scores:s,maxOutputSize:o,iouThreshold:i,scoreThreshold:u}=_e(e,t,n),l=M("padToMaxOutputSize",e,t,n),c=await a.image.nonMaxSuppressionPaddedAsync(r,s,o,i,u,l);return[c.selectedIndices,c.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:r,scores:s,maxOutputSize:o,iouThreshold:i,scoreThreshold:u}=_e(e,t,n);return[await a.image.nonMaxSuppressionAsync(r,s,o,i,u)]}case"Where":{const r=a.cast(M("condition",e,t,n),"bool"),s=[await a.whereAsync(r)];return r.dispose(),s}case"ListDiff":return a.setdiff1dAsync(M("x",e,t,n),M("y",e,t,n));default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n);case"evaluation":return a((()=>((e,t,n,r=N)=>{switch(e.op){case"LowerBound":{const a=M("sortedSequence",e,t,n),s=M("values",e,t,n);return[r.lowerBound(a,s)]}case"TopKV2":{const a=M("x",e,t,n),s=M("k",e,t,n),o=M("sorted",e,t,n),i=r.topk(a,s,o);return[i.values,i.indices]}case"UpperBound":{const a=M("sortedSequence",e,t,n),s=M("values",e,t,n);return[r.upperBound(a,s)]}case"Unique":{const a=M("x",e,t,n),s=r.unique(a);return[s.values,s.indices]}case"UniqueV2":{const a=M("x",e,t,n),s=M("axis",e,t,n),o=r.unique(a,s);return[o.values,o.indices]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"image":return a((()=>((e,t,n,r=N)=>{switch(e.op){case"ResizeBilinear":{const a=M("images",e,t,n),s=M("size",e,t,n),o=M("alignCorners",e,t,n),i=M("halfPixelCenters",e,t,n);return[r.image.resizeBilinear(a,[s[0],s[1]],o,i)]}case"ResizeNearestNeighbor":{const a=M("images",e,t,n),s=M("size",e,t,n),o=M("alignCorners",e,t,n),i=M("halfPixelCenters",e,t,n);return[r.image.resizeNearestNeighbor(a,[s[0],s[1]],o,i)]}case"CropAndResize":{const a=M("image",e,t,n),s=M("boxes",e,t,n),o=M("boxInd",e,t,n),i=M("cropSize",e,t,n),u=M("method",e,t,n),l=M("extrapolationValue",e,t,n);return[r.image.cropAndResize(a,s,o,i,u,l)]}case"ImageProjectiveTransformV3":{const a=M("images",e,t,n),s=M("transforms",e,t,n),o=M("outputShape",e,t,n),i=M("fillValue",e,t,n),u=M("interpolation",e,t,n),l=M("fillMode",e,t,n);return[r.image.transform(a,s,u.toLowerCase(),l.toLowerCase(),i,o)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"graph":return a((()=>((e,t,n,r=N)=>{switch(e.op){case"Const":return t[e.name];case"PlaceholderWithDefault":const a=M("default",e,t,n);return[D(e.name,t,n)||a];case"Placeholder":return[D(e.name,t,n)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":return[R(M("x",e,t,n))];case"IdentityN":return M("x",e,t,n).map((e=>R(e)));case"Snapshot":return[R(M("x",e,t,n))];case"Shape":return[r.tensor1d(M("x",e,t,n).shape,"int32")];case"ShapeN":return M("x",e,t,n).map((e=>r.tensor1d(e.shape)));case"Size":return[r.scalar(M("x",e,t,n).size,"int32")];case"Rank":return[r.scalar(M("x",e,t,n).rank,"int32")];case"NoOp":return[r.scalar(1)];case"Print":const s=M("x",e,t,n),o=M("data",e,t,n),i=M("message",e,t,n),u=M("summarize",e,t,n);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(i);for(let e=0;e<o.length;e++)console.log(Array.prototype.slice.call(o[e].dataSync()).slice(0,u));return[s];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"logical":return a((()=>((e,t,n,r=N)=>{switch(e.op){case"Equal":return[r.equal(M("a",e,t,n),M("b",e,t,n))];case"NotEqual":return[r.notEqual(M("a",e,t,n),M("b",e,t,n))];case"Greater":return[r.greater(M("a",e,t,n),M("b",e,t,n))];case"GreaterEqual":return[r.greaterEqual(M("a",e,t,n),M("b",e,t,n))];case"Less":return[r.less(M("a",e,t,n),M("b",e,t,n))];case"LessEqual":return[r.lessEqual(M("a",e,t,n),M("b",e,t,n))];case"LogicalAnd":return[r.logicalAnd(M("a",e,t,n),M("b",e,t,n))];case"LogicalNot":return[r.logicalNot(M("a",e,t,n))];case"LogicalOr":return[r.logicalOr(M("a",e,t,n),M("b",e,t,n))];case"Select":case"SelectV2":return[r.where(M("condition",e,t,n),M("a",e,t,n),M("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"matrices":return a((()=>((e,t,n,r=N)=>{switch(e.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[r.matMul(M("a",e,t,n),M("b",e,t,n),M("transposeA",e,t,n),M("transposeB",e,t,n))];case"Einsum":return[r.einsum(M("equation",e,t,n),...M("tensors",e,t,n))];case"Transpose":return[r.transpose(M("x",e,t,n),M("perm",e,t,n))];case"_FusedMatMul":const[a,s]=M("fusedOps",e,t,n),o="biasadd"===a,i="prelu"===s,u=M("numArgs",e,t,n),l=M("leakyreluAlpha",e,t,n);if(o){if(i&&2!==u)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&1!==u)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[c,p]=M("args",e,t,n);return[r.fused.matMul({a:M("a",e,t,n),b:M("b",e,t,n),transposeA:M("transposeA",e,t,n),transposeB:M("transposeB",e,t,n),bias:c,activation:s,preluActivationWeights:p,leakyreluAlpha:l})];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"normalization":return a((()=>((e,t,n,r=N)=>{switch(e.op){case"EuclideanNorm":return[r.euclideanNorm(M("x",e,t,n),M("axis",e,t,n),M("keepDims",e,t,n))];case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[r.batchNorm(M("x",e,t,n),M("mean",e,t,n),M("variance",e,t,n),M("offset",e,t,n),M("scale",e,t,n),M("epsilon",e,t,n))];case"LRN":return[r.localResponseNormalization(M("x",e,t,n),M("radius",e,t,n),M("bias",e,t,n),M("alpha",e,t,n),M("beta",e,t,n))];case"Softmax":return[r.softmax(M("x",e,t,n))];case"LogSoftmax":return[r.logSoftmax(M("x",e,t,n))];case"SparseToDense":return[r.sparseToDense(M("sparseIndices",e,t,n),M("outputShape",e,t,n),M("sparseValues",e,t,n),M("defaultValue",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"ragged":return a((()=>((e,t,n,r=N)=>{switch(e.op){case"RaggedGather":{const{outputNestedSplits:a,outputDenseValues:s}=r.raggedGather(M("paramsNestedSplits",e,t,n),M("paramsDenseValues",e,t,n),M("indices",e,t,n),M("outputRaggedRank",e,t,n));return a.concat(s)}case"RaggedRange":{const{rtNestedSplits:a,rtDenseValues:s}=r.raggedRange(M("starts",e,t,n),M("limits",e,t,n),M("splits",e,t,n));return[a,s]}case"RaggedTensorToTensor":return[r.raggedTensorToTensor(M("shape",e,t,n),M("values",e,t,n),M("defaultValue",e,t,n),M("rowPartitionTensors",e,t,n),M("rowPartitionTypes",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"reduction":return a((()=>((e,t,n,r=N)=>{switch(e.op){case"Max":{const a=M("axis",e,t,n),s=M("keepDims",e,t,n);return[r.max(M("x",e,t,n),a,s)]}case"Mean":{const a=M("axis",e,t,n),s=M("keepDims",e,t,n);return[r.mean(M("x",e,t,n),a,s)]}case"Min":{const a=M("axis",e,t,n),s=M("keepDims",e,t,n);return[r.min(M("x",e,t,n),a,s)]}case"Sum":{const a=M("axis",e,t,n),s=M("keepDims",e,t,n);return[r.sum(M("x",e,t,n),a,s)]}case"All":{const a=M("axis",e,t,n),s=M("keepDims",e,t,n);return[r.all(M("x",e,t,n),a,s)]}case"Any":{const a=M("axis",e,t,n),s=M("keepDims",e,t,n);return[r.any(M("x",e,t,n),a,s)]}case"ArgMax":{const a=M("axis",e,t,n);return[r.argMax(M("x",e,t,n),a)]}case"ArgMin":{const a=M("axis",e,t,n);return[r.argMin(M("x",e,t,n),a)]}case"Prod":{const a=M("axis",e,t,n),s=M("keepDims",e,t,n);return[r.prod(M("x",e,t,n),a,s)]}case"Cumprod":{const a=M("axis",e,t,n),s=M("exclusive",e,t,n),o=M("reverse",e,t,n);return[r.cumprod(M("x",e,t,n),a,s,o)]}case"Cumsum":{const a=M("axis",e,t,n),s=M("exclusive",e,t,n),o=M("reverse",e,t,n);return[r.cumsum(M("x",e,t,n),a,s,o)]}case"Bincount":const a=M("x",e,t,n),s=M("weights",e,t,n),o=M("size",e,t,n);return[r.bincount(a,s,o)];case"DenseBincount":{const a=M("x",e,t,n),s=M("weights",e,t,n),o=M("size",e,t,n),i=M("binaryOutput",e,t,n);return[r.denseBincount(a,s,o,i)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"slice_join":return a((()=>((e,t,n,r=N)=>{switch(e.op){case"ConcatV2":case"Concat":{const a=M("n",e,t,n),s=M("axis",e,t,n);let o=M("tensors",e,t,n);return o=o.slice(0,a),[r.concat(o,s)]}case"Gather":{const a=M("x",e,t,n),s=M("indices",e,t,n);return[r.gather(a,r.cast(s,"int32"),0)]}case"GatherV2":{const a=M("axis",e,t,n),s=M("batchDims",e,t,n),o=M("x",e,t,n),i=M("indices",e,t,n);return[r.gather(o,r.cast(i,"int32"),a,s)]}case"Reverse":{const a=M("dims",e,t,n),s=[];for(let e=0;e<a.length;e++)a[e]&&s.push(e);const o=M("x",e,t,n);return[r.reverse(o,s)]}case"ReverseV2":{const a=M("axis",e,t,n),s=M("x",e,t,n);return[r.reverse(s,a)]}case"Slice":{const a=M("begin",e,t,n),s=M("size",e,t,n);return[r.slice(M("x",e,t,n),a,s)]}case"StridedSlice":{const a=M("begin",e,t,n),s=M("end",e,t,n),o=M("strides",e,t,n),i=M("beginMask",e,t,n),u=M("endMask",e,t,n),l=M("ellipsisMask",e,t,n),c=M("newAxisMask",e,t,n),p=M("shrinkAxisMask",e,t,n),d=M("x",e,t,n);return[r.stridedSlice(d,a,s,o,i,u,l,c,p)]}case"Pack":return(0,T.tidy)((()=>{const a=M("axis",e,t,n),s=M("tensors",e,t,n),o=s[0].shape,i=r.squeeze(s[0]).shape,u=s.map((e=>{const t=T.util.arraysEqual(e.shape,o);if(!t&&!T.util.arraysEqual(r.squeeze(e).shape,i))throw new Error("the input tensors shape does not match");return t?e:r.reshape(e,o)}));return[r.stack(u,a)]}));case"Unpack":{const a=M("axis",e,t,n),s=M("tensor",e,t,n);return r.unstack(s,a)}case"Tile":{const a=M("reps",e,t,n);return[r.tile(M("x",e,t,n),a)]}case"Split":case"SplitV":{const a=M("axis",e,t,n),s=M("numOrSizeSplits",e,t,n),o=M("x",e,t,n);return r.split(o,s,a)}case"ScatterNd":{const a=M("indices",e,t,n),s=M("values",e,t,n),o=M("shape",e,t,n);return[r.scatterND(a,s,o)]}case"GatherNd":{const a=M("x",e,t,n),s=M("indices",e,t,n);return[r.gatherND(a,s)]}case"SparseToDense":{const a=M("sparseIndices",e,t,n),s=M("outputShape",e,t,n),o=M("sparseValues",e,t,n),i=M("defaultValue",e,t,n);return[r.sparseToDense(a,o,s,o.dtype===i.dtype?i:r.cast(i,o.dtype))]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"sparse":return a((()=>((e,t,n,r=N)=>{switch(e.op){case"SparseFillEmptyRows":{const{outputIndices:a,outputValues:s,emptyRowIndicator:o,reverseIndexMap:i}=r.sparse.sparseFillEmptyRows(M("indices",e,t,n),M("values",e,t,n),M("denseShape",e,t,n),M("defaultValue",e,t,n));return[a,s,o,i]}case"SparseReshape":{const{outputIndices:a,outputShape:s}=r.sparse.sparseReshape(M("inputIndices",e,t,n),M("inputShape",e,t,n),M("newShape",e,t,n));return[a,s]}case"SparseSegmentMean":return[r.sparse.sparseSegmentMean(M("data",e,t,n),M("indices",e,t,n),M("segmentIds",e,t,n))];case"SparseSegmentSum":return[r.sparse.sparseSegmentSum(M("data",e,t,n),M("indices",e,t,n),M("segmentIds",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"spectral":return a((()=>((e,t,n,r=N)=>{switch(e.op){case"FFT":return[r.fft(M("x",e,t,n))];case"IFFT":return[r.ifft(M("x",e,t,n))];case"RFFT":return[r.rfft(M("x",e,t,n))];case"IRFFT":return[r.irfft(M("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"string":return a((()=>((e,t,n,r=N)=>{switch(e.op){case"StringNGrams":{const{nGrams:a,nGramsSplits:s}=r.string.stringNGrams(M("data",e,t,n),M("dataSplits",e,t,n),M("separator",e,t,n),M("nGramWidths",e,t,n),M("leftPad",e,t,n),M("rightPad",e,t,n),M("padWidth",e,t,n),M("preserveShortSequences",e,t,n));return[a,s]}case"StringSplit":{const{indices:a,values:s,shape:o}=r.string.stringSplit(M("input",e,t,n),M("delimiter",e,t,n),M("skipEmpty",e,t,n));return[a,s,o]}case"StringToHashBucketFast":return[r.string.stringToHashBucketFast(M("input",e,t,n),M("numBuckets",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"transformation":return a((()=>((e,t,n,r=N)=>{switch(e.op){case"Cast":return[r.cast(M("x",e,t,n),M("dtype",e,t,n))];case"ExpandDims":{const a=M("axis",e,t,n);return[r.expandDims(M("x",e,t,n),a)]}case"Squeeze":{const a=M("axis",e,t,n);return[r.squeeze(M("x",e,t,n),a)]}case"Reshape":return[r.reshape(M("x",e,t,n),M("shape",e,t,n))];case"MirrorPad":return[r.mirrorPad(M("x",e,t,n),M("padding",e,t,n),M("mode",e,t,n))];case"PadV2":case"Pad":return[r.pad(M("x",e,t,n),M("padding",e,t,n),M("constantValue",e,t,n))];case"SpaceToBatchND":{const a=M("blockShape",e,t,n),s=M("paddings",e,t,n);return[r.spaceToBatchND(M("x",e,t,n),a,s)]}case"BatchToSpaceND":{const a=M("blockShape",e,t,n),s=M("crops",e,t,n);return[r.batchToSpaceND(M("x",e,t,n),a,s)]}case"DepthToSpace":{const a=M("blockSize",e,t,n),s=M("dataFormat",e,t,n).toUpperCase();return[r.depthToSpace(M("x",e,t,n),a,s)]}case"BroadcastTo":return[r.broadcastTo(M("x",e,t,n),M("shape",e,t,n))];case"BroadcastArgs":return[r.broadcastArgs(M("s0",e,t,n),M("s1",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"hash_table":return(async(e,t,n,r)=>{switch(e.op){case"HashTable":case"HashTableV2":{const a=r.getHashTableHandleByName(e.name);if(null!=a)return[a];{const a=M("keyDType",e,t,n),s=M("valueDType",e,t,n),o=new Ae(a,s);return r.addHashTable(e.name,o),[o.handle]}}case"InitializeTable":case"InitializeTableV2":case"LookupTableImport":case"LookupTableImportV2":{const a=M("tableHandle",e,t,n,r),s=M("keys",e,t,n),o=M("values",e,t,n),i=r.getHashTableById(a.id);return[await i.import(s,o)]}case"LookupTableFind":case"LookupTableFindV2":{const a=M("tableHandle",e,t,n,r),s=M("keys",e,t,n),o=M("defaultValue",e,t,n),i=r.getHashTableById(a.id);return[await i.find(s,o)]}case"LookupTableSize":case"LookupTableSizeV2":{const a=M("tableHandle",e,t,n,r);return[r.getHashTableById(a.id).tensorSize()]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n,r);case"custom":const s=E(e.op);if(s&&s.customExecutor)return s.customExecutor(new be(e,t,n));throw TypeError(`Custom op ${e.op} is not registered.`);default:throw TypeError(`Unknown op '${e.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(e,t,n);return T.util.isPromise(s)?s.then((e=>[].concat(e))):[].concat(s)}class De{constructor(e={},t={},n={},r={}){this.weightMap=e,this.tensorArrayMap=t,this.tensorListMap=n,this.functionMap=r,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(e,t){return{id:e,frameName:t,iterationId:0}}set currentContext(e){this.contexts!==e&&(this.contexts=e,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const e=[];for(let t=0;t<this.contexts.length-1;t++){const n=this.contexts.slice(0,this.contexts.length-t);e.push(this.contextIdforContexts(n))}e.push(""),this._currentContextIds=e}contextIdforContexts(e){return e?e.map((e=>0===e.id&&0===e.iterationId?"":`${e.frameName}-${e.iterationId}`)).join("/"):""}enterFrame(e){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,e)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const e=Object.assign({},this.contexts[this.contexts.length-1]);e.iterationId+=1,e.id=this.lastId,this.contexts.splice(-1,1,e),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(e){return this.weightMap[e]}addTensorArray(e){this.tensorArrayMap[e.id]=e}getTensorArray(e){return this.tensorArrayMap[e]}addTensorList(e){this.tensorListMap[e.id]=e}getTensorList(e){return this.tensorListMap[e]}dispose(e){for(const t in this.tensorArrayMap)this.tensorArrayMap[t].clearAndClose(e);for(const t in this.tensorListMap)this.tensorListMap[t].clearAndClose(e)}}function Fe(e,t,n,r){const a=new Set,s=[];let o=null,i=null;const u=new Set,l=Object.keys(e).map((e=>O(e)[0]));let c=[];null!=r&&(c=r.map((e=>O(e.name)[0])));const p=[...t];for(;p.length>0;){const e=p.pop();(Re(e)||Ve(e)||Ce(e))&&null==o&&(o=e,i=o.children.map((e=>e.name)).filter((e=>a.has(e)))),a.add(e.name),null==n[e.name]&&-1===l.indexOf(e.name)&&-1===c.indexOf(e.name)&&(0!==e.inputs.length?e.inputs.forEach((e=>{u.has(e.name)||(u.add(e.name),p.push(e))})):s.push(e.name))}return{inputs:e,outputs:t,usedNodes:a,missingInputs:s,dynamicNode:o,syncInputs:i}}const $e=["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"],Oe=["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"],Be=["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2","LookupTableSize","LookupTableSizeV2"];function Re(e){return $e.indexOf(e.op)>=0}function Ve(e){return Oe.indexOf(e.op)>=0}function Ce(e){return Be.indexOf(e.op)>=0}class ze{constructor(e,t){this.graph=e,this.parent=t,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=",",this._functions={},this._functionExecutorMap={},this.keepIntermediateTensors=!1,this._outputs=e.outputs,this._inputs=e.inputs,this._initNodes=e.initNodes,this._signature=e.signature,this._functions=e.functions,null!=e.functions&&Object.keys(e.functions).forEach((t=>{this._functionExecutorMap[t]=new ze(e.functions[t],this)}))}get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(e){const t=Object.keys(e).map((t=>e[t].map((e=>e.id))));this._weightIds=[].concat(...t),this._weightMap=e}set resourceManager(e){this._resourceManager=e}get inputs(){return this._inputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get outputs(){return this._outputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get inputNodes(){return this._inputs.map((e=>e.signatureKey||e.name))}get outputNodes(){return this._outputs.map((e=>{const t=e.signatureKey||e.name;return e.defaultOutput?`${t}:${e.defaultOutput}`:t}))}get functions(){return Object.keys(this._functions).reduce(((e,t)=>(e[t]=this._functions[t].signature,e)),{})}getCompilationKey(e,t){const n=e.map((e=>e.name)).sort(),r=t.map((e=>e.name)).sort();return n.join(this.SEPERATOR)+"--"+r.join(this.SEPERATOR)}compile(e,t){const n=Fe(e,t,this.weightMap,this._initNodes),{missingInputs:r,dynamicNode:a,syncInputs:s}=n;if(null!=a)throw new Error(`This execution contains the node '${a.name}', which has the dynamic op '${a.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${s}]`);if(r.length>0){const n=t.map((e=>e.name)),a=Object.keys(e);throw new Error(`Cannot compute the outputs [${n}] from the provided inputs [${a}]. Missing the following inputs: [${r}]`)}return function(e,t,n){const{usedNodes:r,inputs:a}=n,s=[],o=Object.keys(a).map((e=>O(e)[0])).map((t=>e.nodes[t])),i=e.initNodes;o.forEach((e=>{r.has(e.name)&&s.push(e)})),e.weights.forEach((e=>{r.has(e.name)&&s.push(e)})),null!=i&&i.forEach((e=>{r.has(e.name)&&s.push(e)}));const u=new Set,l=[];for(;s.length>0;){const e=s.pop();u.add(e.name),t[e.name]||l.push(e),e.children.forEach((e=>{!u.has(e.name)&&r.has(e.name)&&e.inputs.every((e=>u.has(e.name)))&&s.push(e)}))}return l}(this.graph,this.weightMap,n)}cloneAndKeepTensor(e){if(null==e)return null;const t=e.clone();return(0,T.keep)(t),t}cloneTensorList(e){return e?e.map((e=>this.cloneAndKeepTensor(e))):null}cloneTensorMap(e){return Object.fromEntries(Object.entries(e).map((([e,t])=>[e,this.cloneTensorList(t)])))}execute(e,t){this.disposeIntermediateTensors(),e=this.mapInputs(e);const n=Object.keys(e).sort();this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t);const r=n.map((e=>this.graph.nodes[O(e)[0]])),a=t.map((e=>O(e)[0]));let s=a.map((e=>this.graph.nodes[e]));0===s.length&&(s=this._outputs);const o=this.getCompilationKey(r,s);let i=this.compiledMap.get(o);null==i&&(i=this.compile(e,s),this.compiledMap.set(o,i));try{this.keepIntermediateTensors=(0,T.env)().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(e){this.keepIntermediateTensors=!1,console.warn(e.message)}const u={},l={};return(0,T.tidy)((()=>{const n=new De(this.weightMap,u,l,this.functionExecutorMap),r=Object.assign({},this.weightMap);this.keepIntermediateTensors&&(this.clonedTensorsMap=this.cloneTensorMap(this.weightMap)),Object.keys(e).forEach((t=>{const[n,a]=O(t),s=[];s[a]=e[t],r[n]=s,this.keepIntermediateTensors&&(this.clonedTensorsMap[n]=this.cloneTensorList(s))}));const s=this.getFrozenTensorIds(r),o={};for(let e=0;e<i.length;e++){const t=i[e];if(!r[t.name]){const e=Me(t,r,n,this._resourceManager);if(T.util.isPromise(e))throw new Error(`The execution of the op '${t.op}' returned a promise. Please use model.executeAsync() instead.`);r[t.name]=e,this.keepIntermediateTensors&&(this.clonedTensorsMap[t.name]=this.cloneTensorList(e)),this.checkTensorForDisposal(t.name,t,r,n,s,a,o)}}return null==this.parent&&n.dispose(s),t.map((e=>D(e,r,n)))}))}getFrozenTensorIds(e){const t=[].concat.apply([],Object.keys(e).map((t=>e[t])).map((e=>e.map((e=>e.id)))));return new Set(t)}checkTensorForDisposal(e,t,n,r,a,s,o){"control"!==t.category&&-1===s.indexOf(e)&&(n[e].forEach((e=>{null!=e&&(o[e.id]=(o[e.id]||0)+t.children.length)})),t.inputs.forEach((e=>{if("control"!==e.category){const t=function(e,t,n){return t[$(e,n.currentContextId)]}(e.name,n,r);null!=t&&t.forEach((e=>{if(e&&!e.kept&&!a.has(e.id)){const t=o[e.id];1===t?(e.dispose(),delete o[e.id]):null!=t&&o[e.id]--}}))}})))}async executeAsync(e,t){return this._executeAsync(e,t)}disposeIntermediateTensors(){this.clonedTensorsMap&&(Object.values(this.clonedTensorsMap).forEach((e=>{for(const t of e)t&&!t.isDisposed&&t.dispose()})),this.clonedTensorsMap=null)}getIntermediateTensors(){return this.clonedTensorsMap}async _executeAsync(e,t,n=!1,r={},a={}){this.disposeIntermediateTensors(),n||(e=this.mapInputs(e),this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t));try{this.keepIntermediateTensors=(0,T.env)().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(e){this.keepIntermediateTensors=!1,console.warn(e.message)}const s=new De(this.weightMap,r,a,this.functionExecutorMap);this.keepIntermediateTensors&&(this.clonedTensorsMap=this.cloneTensorMap(this.weightMap));const o=await this.executeWithControlFlow(e,s,t,n),i=t.map((e=>D(e,o,s))),u=i.map((e=>e.id)),l=Object.keys(e).map((t=>e[t].id)),c=new Set([...u,...l,...this.weightIds]);return Object.values(o).forEach((e=>{e.forEach((e=>{!e||e.isDisposed||c.has(e.id)||e.dispose()}))})),null==this.parent&&s.dispose(c),i}async executeFunctionAsync(e,t,n){const r=e.reduce(((e,t,n)=>(e[this.inputs[n].name]=t,e)),{});return this._executeAsync(r,this.outputNodes,!0,t,n)}async executeWithControlFlow(e,t,n,r){const a=Object.keys(e),s=a.map((e=>this.graph.nodes[O(e)[0]])),o=n.map((e=>O(e)[0]));let i=o.map((e=>this.graph.nodes[e]));0===i.length&&(i=this._outputs);const{usedNodes:u,missingInputs:l,dynamicNode:c,syncInputs:p}=Fe(e,i,this.weightMap,this._initNodes),d=[...s,...this.graph.weights,...this._initNodes||[]].map((e=>({node:e,contexts:t.currentContext}))),h=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[n,r]=O(t),a=[];a[r]=e[t],h[n]=a}));const m={},f=this.getFrozenTensorIds(h),g={};for(;d.length>0;){const e=this.processStack(s,d,t,h,g,f,o,m,u);await Promise.all(e)}null!=c||r||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const y=i.filter((e=>!Re(e)&&!D(e.name,h,t))).map((e=>e.name));if(y.length>0){let e="";throw null!=c&&(e=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${p}]`),new Error(`Cannot compute the outputs [${y}] from the provided inputs [${a}]. Consider providing the following inputs: [${l}]. ${e}`)}return h}processStack(e,t,n,r,a,s,o,i,u){const l=[];for(;t.length>0;){const e=t.pop();n.currentContext=e.contexts;let c="";if("Enter"===e.node.op&&M("isConstant",e.node,r,n)&&([c]=F(e.node.name,n)),null==r[e.node.name]){const p=Me(e.node,r,n,this._resourceManager);c||([c]=F(e.node.name,n));const d=n.currentContext;T.util.isPromise(p)?l.push(p.then((l=>(r[c]=l,this.keepIntermediateTensors&&(this.clonedTensorsMap[c]=this.cloneTensorList(l)),n.currentContext=d,this.checkTensorForDisposal(c,e.node,r,n,s,o,i),this.processChildNodes(e.node,t,n,r,a,u),l)))):(r[c]=p,this.keepIntermediateTensors&&(this.clonedTensorsMap[c]=this.cloneTensorList(p)),this.checkTensorForDisposal(c,e.node,r,n,s,o,i),this.processChildNodes(e.node,t,n,r,a,u))}else this.processChildNodes(e.node,t,n,r,a,u)}return l}processChildNodes(e,t,n,r,a,s){e.children.forEach((e=>{const[o]=F(e.name,n);!a[o]&&s.has(e.name)&&("Merge"===e.op?e.inputNames.some((e=>!!D(e,r,n)))&&(a[o]=!0,t.push({contexts:n.currentContext,node:e})):e.inputNames.every((e=>!!D(e,r,n)))&&(a[o]=!0,t.push({contexts:n.currentContext,node:e})))}))}dispose(){Object.keys(this.weightMap).forEach((e=>this.weightMap[e].forEach((e=>e.dispose()))))}checkInputShapeAndType(e){Object.keys(e).forEach((t=>{const n=e[t],[r]=O(t),a=this.graph.nodes[r];if(a.attrParams.shape&&a.attrParams.shape.value){const e=a.attrParams.shape.value,t=e.length===n.shape.length&&n.shape.every(((t,n)=>-1===e[n]||e[n]===t));T.util.assert(t,(()=>`The shape of dict['${a.name}'] provided in model.execute(dict) must be [${e}], but was [${n.shape}]`))}a.attrParams.dtype&&a.attrParams.dtype.value&&T.util.assert(n.dtype===a.attrParams.dtype.value,(()=>`The dtype of dict['${a.name}'] provided in model.execute(dict) must be ${a.attrParams.dtype.value}, but was ${n.dtype}`))}))}mapInputs(e){var t,n;const r={};for(const a in e){const s=null===(n=null===(t=this._signature)||void 0===t?void 0:t.inputs)||void 0===n?void 0:n[a];null!=s?r[s.name]=e[a]:r[a]=e[a]}return r}checkInputs(e){const t=Object.keys(e).filter((e=>{const[t]=O(e);return null==this.graph.nodes[t]}));if(t.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${t}] that are not part of graph`)}mapOutputs(e){return e.map((e=>{var t,n;const r=null===(n=null===(t=this._signature)||void 0===t?void 0:t.outputs)||void 0===n?void 0:n[e];return null!=r?r.name:e}),{})}checkOutputs(e){e.forEach((e=>{const[t]=O(e);if(!this.graph.nodes[t])throw new Error(`The output '${e}' is not found in the graph`)}))}}class Pe{constructor(e={},t={}){this.hashTableNameToHandle=e,this.hashTableMap=t}addHashTable(e,t){this.hashTableNameToHandle[e]=t.handle,this.hashTableMap[t.id]=t}getHashTableHandleByName(e){return this.hashTableNameToHandle[e]}getHashTableById(e){return this.hashTableMap[e]}dispose(){for(const e in this.hashTableMap)this.hashTableMap[e].clearAndClose(),delete this.hashTableMap[e];for(const e in this.hashTableNameToHandle)this.hashTableNameToHandle[e].dispose(),delete this.hashTableNameToHandle[e]}}class Le{constructor(e,t={},n=T.io){this.modelUrl=e,this.loadOptions=t,this.version="n/a",this.io=n,null==t&&(this.loadOptions={}),this.resourceManager=new Pe}get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}get modelStructuredOutputKeys(){return this.structuredOutputKeys}findIOHandler(){const e=this.modelUrl;if(null!=e.load)this.handler=e;else if(null!=this.loadOptions.requestInit)this.handler=this.io.browserHTTPRequest(e,this.loadOptions);else{const t=this.io.getLoadHandlers(e,this.loadOptions);if(0===t.length)t.push(this.io.browserHTTPRequest(e,this.loadOptions));else if(t.length>1)throw new Error(`Found more than one (${t.length}) load handlers for URL '${[e]}'`);this.handler=t[0]}}load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const e=this.handler.load();return T.util.isPromise(e)?e.then((e=>this.loadSync(e))):this.loadSync(e)}loadSync(e){this.artifacts=e;const t=this.artifacts.modelTopology;let n=this.artifacts.signature;if(null!=this.artifacts.userDefinedMetadata){const e=this.artifacts.userDefinedMetadata;null!=e.signature&&(n=e.signature),null!=e.structuredOutputKeys&&(this.structuredOutputKeys=e.structuredOutputKeys)}this.signature=n,this.version=`${t.versions.producer}.${t.versions.minConsumer}`;const r=this.io.decodeWeights(this.artifacts.weightData,this.artifacts.weightSpecs);if(this.executor=new ze(re.Instance.transformGraph(t,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(r),this.executor.resourceManager=this.resourceManager,null!=e.modelInitializer&&null!=e.modelInitializer.node){const t=re.Instance.transformGraph(e.modelInitializer);this.initializer=new ze(t),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializerSignature=e.initializerSignature}return!0}async save(e,t){if("string"==typeof e){const t=this.io.getSaveHandlers(e);if(0===t.length)throw new Error(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new Error(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return e.save(this.artifacts)}addStructuredOutputNames(e){if(this.structuredOutputKeys){const t=e instanceof T.Tensor?[e]:e,n={};return t.forEach(((e,t)=>n[this.structuredOutputKeys[t]]=e)),n}return e}predict(e,t){const n=this.execute(e,this.outputNodes);return this.addStructuredOutputNames(n)}async predictAsync(e,t){const n=await this.executeAsync(e,this.outputNodes);return this.addStructuredOutputNames(n)}normalizeInputs(e){var t;if(!(e instanceof T.Tensor||Array.isArray(e))){const n=null===(t=this.signature)||void 0===t?void 0:t.inputs;if(null!=n)for(const t in n){const r=n[t];null!=r.resourceId&&(e[t]=this.resourceIdToCapturedInput[r.resourceId])}return e}e=Array.isArray(e)?e:[e];const n=Object.keys(this.resourceIdToCapturedInput).length;if(e.length+n!==this.inputNodes.length)throw new Error(`Input tensor count mismatch, the graph model has ${this.inputNodes.length-n} non-resource placeholders, while there are ${e.length} input tensors provided.`);let r=0;return this.inputNodes.reduce(((t,n)=>{var a,s,o;const i=null===(o=null===(s=null===(a=this.signature)||void 0===a?void 0:a.inputs)||void 0===s?void 0:s[n])||void 0===o?void 0:o.resourceId;return t[n]=null!=i?this.resourceIdToCapturedInput[i]:e[r++],t}),{})}normalizeOutputs(e){return e=e||this.outputNodes,Array.isArray(e)?e:[e]}executeInitializerGraph(){return null==this.initializer?[]:null==this.initializerSignature?this.initializer.execute({},[]):this.initializer.execute({},Object.keys(this.initializerSignature.outputs))}async executeInitializerGraphAsync(){return null==this.initializer?[]:null==this.initializerSignature?this.initializer.executeAsync({},[]):this.initializer.executeAsync({},Object.keys(this.initializerSignature.outputs))}setResourceIdToCapturedInput(e){if(this.resourceIdToCapturedInput={},this.initializerSignature){const t=this.initializerSignature.outputs,n=Object.keys(t);for(let r=0;r<n.length;r++){const a=t[n[r]];this.resourceIdToCapturedInput[a.resourceId]=e[r]}}}execute(e,t){null==this.resourceIdToCapturedInput&&this.setResourceIdToCapturedInput(this.executeInitializerGraph()),e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=this.executor.execute(e,t);return n.length>1?n:n[0]}async executeAsync(e,t){null==this.resourceIdToCapturedInput&&this.setResourceIdToCapturedInput(await this.executeInitializerGraphAsync()),e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=await this.executor.executeAsync(e,t);return n.length>1?n:n[0]}getIntermediateTensors(){return this.executor.getIntermediateTensors()}disposeIntermediateTensors(){this.executor.disposeIntermediateTensors()}convertTensorMapToTensorsMap(e){return Object.keys(e).reduce(((t,n)=>(t[n]=[e[n]],t)),{})}dispose(){this.executor.dispose(),this.initializer&&(this.initializer.dispose(),this.resourceIdToCapturedInput&&(0,T.dispose)(this.resourceIdToCapturedInput)),this.resourceManager.dispose()}}async function He(e,t={},n=T.io){if(null==e)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==t&&(t={}),t.fromTFHub&&"string"==typeof e&&(e=function(e){return e.endsWith("/")||(e+="/"),`${e}model.json?tfjs-format=file`}(e));const r=new Le(e,t,n);return await r.load(),r}function We(e){if(null==e)throw new Error("modelUrl in loadGraphModelSync() cannot be null. Please provide model artifacts or an IOHandler that loads the model");let t;if(e instanceof Array){const[n,r]=e;if(!n)throw new Error("modelJSON must be the first element of the array");if(!(r&&r instanceof ArrayBuffer))throw new Error("An ArrayBuffer of weights must be the second element of the array");if(!("modelTopology"in n))throw new Error("Model JSON is missing 'modelTopology'");if(!("weightsManifest"in n))throw new Error("Model JSON is missing 'weightsManifest'");const a=T.io.getWeightSpecs(n.weightsManifest),s=T.io.getModelArtifactsForJSONSync(n,a,r);t=T.io.fromMemorySync(s)}else if("load"in e)t=e;else{if(!("modelTopology"in e&&"weightSpecs"in e&&"weightData"in e))throw new Error("Unknown model format");t=T.io.fromMemorySync(e)}const n=new Le(t);return n.load(),n}const Ge="4.2.0"},9941:(e,t,n)=>{"use strict";n.d(t,{JL:()=>r,Zu:()=>a});class r{constructor(e,t){this.backend=e,this.dataMover=t,this.data=new WeakMap,this.dataIdsCount=0}get(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)}set(e,t){this.dataIdsCount++,this.data.set(e,t)}has(e){return this.data.has(e)}delete(e){return this.dataIdsCount--,this.data.delete(e)}numDataIds(){return this.dataIdsCount}}class a{refCount(e){return s("refCount")}incRef(e){return s("incRef")}timerAvailable(){return!0}time(e){return s("time")}read(e){return s("read")}readSync(e){return s("readSync")}readToGPU(e,t){return s("readToGPU")}numDataIds(){return s("numDataIds")}disposeData(e,t){return s("disposeData")}write(e,t,n){return s("write")}move(e,t,n,r,a){return s("move")}createTensorFromGPUData(e,t,n){return s("createTensorFromGPUData")}memory(){return s("memory")}floatPrecision(){return s("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return s("dispose")}}function s(e){throw new Error(`'${e}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}},9180:(e,t,n)=>{"use strict";function r(e,t,n){const r=function(e,t,n){return function(e,t,n){let r=0,a=e.length,s=0,o=!1;for(;r<a;){s=r+(a-r>>>1);const i=n(t,e[s]);i>0?r=s+1:(a=s,o=!i)}return o?r:-r-1}(e,t,n||a)}(e,t,n),s=r<0?-(r+1):r;e.splice(s,0,t)}function a(e,t){return e>t?1:e<t?-1:0}function s(e,t,n,r,a){return u(e,t,n,r,a,0)}function o(e,t,n,r,a,s){return u(e,t,n,r,a,0,!1,s,!0)}function i(e,t,n,r,a,s){return u(e,t,n,r,a,s,!0)}function u(e,t,n,a,s,o,i=!1,u=!1,d=!1){const h=[];for(let e=0;e<t.length;e++)t[e]>s&&h.push({score:t[e],boxIndex:e,suppressBeginIndex:0});h.sort(p);const m=o>0?-.5/o:0,f=[],g=[];for(;f.length<n&&h.length>0;){const t=h.pop(),{score:n,boxIndex:o,suppressBeginIndex:i}=t;if(n<s)break;let u=!1;for(let n=f.length-1;n>=i;--n){const r=l(e,o,f[n]);if(r>=a){u=!0;break}if(t.score=t.score*c(a,m,r),t.score<=s)break}t.suppressBeginIndex=f.length,u||(t.score===n?(f.push(o),g.push(t.score)):t.score>s&&r(h,t,p))}const y=f.length,b=n-y;u&&b>0&&(f.push(...new Array(b).fill(0)),g.push(...new Array(b).fill(0)));const k={selectedIndices:f};return i&&(k.selectedScores=g),d&&(k.validOutputs=y),k}function l(e,t,n){const r=e.subarray(4*t,4*t+4),a=e.subarray(4*n,4*n+4),s=Math.min(r[0],r[2]),o=Math.min(r[1],r[3]),i=Math.max(r[0],r[2]),u=Math.max(r[1],r[3]),l=Math.min(a[0],a[2]),c=Math.min(a[1],a[3]),p=Math.max(a[0],a[2]),d=Math.max(a[1],a[3]),h=(i-s)*(u-o),m=(p-l)*(d-c);if(h<=0||m<=0)return 0;const f=Math.max(s,l),g=Math.max(o,c),y=Math.min(i,p),b=Math.min(u,d),k=Math.max(y-f,0)*Math.max(b-g,0);return k/(h+m-k)}function c(e,t,n){const r=Math.exp(t*n*n);return n<=e?r:0}function p(e,t){return e.score-t.score||e.score===t.score&&t.boxIndex-e.boxIndex}n.d(t,{GP:()=>s,qP:()=>o,pA:()=>i})},6133:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(1744);function a(e,t){const n=[];for(let e=0;e<t.length;e++)t[e]&&n.push(e);const a=(0,r.f)(e,"int32"),s=(0,r.f)([n.length,e.length],"int32");for(let t=0;t<n.length;t++){const r=a.indexToLoc(n[t]),o=t*e.length;s.values.set(r,o)}return s.toTensor()}},3421:(e,t,n)=>{"use strict";n.d(t,{BV:()=>w,wv:()=>k});var r=n(9941),a=n(3535),s=n(7944),o=n(5202),i=n(8307),u=n(56),l=n(4003),c=n(9740);class p{constructor(e,t){this.backendTimer=e,this.logger=t,null==t&&(this.logger=new h)}profileKernel(e,t,n){let r;const s=()=>{r=n()};let o;const i=l.now();if(this.backendTimer.timerAvailable())o=this.backendTimer.time(s);else{s();for(const e of r)e.dataSync();o=Promise.resolve({kernelMs:l.now()-i})}if((0,a.OB)().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let t=0;t<r.length;t++){const n=r[t];n.data().then((t=>{d(t,n.dtype,e)}))}return{kernelName:e,outputs:r,inputs:t,timeMs:o.then((e=>e.kernelMs)),extraInfo:o.then((e=>null!=e.getExtraProfileInfo?e.getExtraProfileInfo():""))}}logKernelProfile(e){const{kernelName:t,outputs:n,timeMs:r,inputs:a,extraInfo:s}=e;n.forEach((e=>{Promise.all([e.data(),r,s]).then((n=>{this.logger.logKernelProfile(t,e,n[0],n[1],a,n[2])}))}))}}function d(e,t,n){if("float32"!==t)return!1;for(let t=0;t<e.length;t++){const r=e[t];if(isNaN(r)||!isFinite(r))return console.warn(`Found ${r} in the result of '${n}'`),!0}return!1}class h{logKernelProfile(e,t,n,r,a,s){const o="number"==typeof r?c.oj(`${r}ms`,9):r.error,i=c.oj(e,25),u=t.rank,l=t.size,p=c.oj(t.shape.toString(),14);let d="";for(const e in a){const n=a[e];if(null!=n){const r=n.shape||t.shape,a=r.length;d+=`${e}: ${a}D ${a>0?r:""} `}}console.log(`%c${i}\t%c${o}\t%c${u}D ${p}\t%c${l}\t%c${d}\t%c${s}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}var m=n(1313),f=n(9201);function g(e){return null!=e.kernelName}class y{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map((e=>e.name))))}}}dispose(){for(const e in this.registeredVariables)this.registeredVariables[e].dispose()}}class b{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new y}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then((()=>{}));if(null!=this.backendInstance)return;const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:t}=this.initializeBackend(e);if(t)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,n=1){return e in this.registryFactory?(u.Z(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:t,priority:n},!0)}async setBackend(e){if(null==this.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;const{success:t,asyncInit:n}=this.initializeBackend(e);if(!(n?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new p(this.backendInstance),!0}setupRegisteredKernels(){(0,i.tr)(this.backendName).forEach((e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)}))}disposeRegisteredKernels(e){(0,i.tr)(e).forEach((t=>{null!=t.disposeFunc&&t.disposeFunc(this.registry[e])}))}initializeBackend(e){const t=this.registryFactory[e];if(null==t)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const n=t.factory();if(!n||n instanceof r.Zu||"function"!=typeof n.then)return this.registry[e]=n,{success:!0,asyncInit:!1};{const t=++this.pendingBackendInitId,r=n.then((n=>!(t<this.pendingBackendInitId||(this.registry[e]=n,this.pendingBackendInit=null,0)))).catch((n=>(t<this.pendingBackendInitId||(this.pendingBackendInit=null,u.Z(`Initialization of backend ${e} failed`),u.Z(n.stack||n.message)),!1)));return this.pendingBackendInit=r,{success:r,asyncInit:!0}}}catch(t){return u.Z(`Initialization of backend ${e} failed`),u.Z(t.stack||t.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort(((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority))}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t],{success:r,asyncInit:a}=this.initializeBackend(n);if(a||r)return{name:n,asyncInit:a}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){const n=this.state.tensorInfo.get(t),r=n.backend,a=this.readSync(t),s=r.refCount(t);r.disposeData(t,!0),n.backend=e,e.move(t,a,n.shape,n.dtype,s),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let n,r=null;if(null==t){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");t=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof t)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");r=e}return this.scopedRun((()=>this.startScope(r)),(()=>this.endScope(n)),(()=>(n=t(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n)))}scopedRun(e,t,n){e();try{const e=n();return t(),e}catch(e){throw t(),e}}nextTensorId(){return b.nextTensorId++}nextVariableId(){return b.nextVariableId++}clone(e){const t=w.runKernel(o.iJz,{x:e}),n={x:e};return this.addTapeNode(this.state.activeScope.name,n,[t],(e=>({x:()=>{const t={x:e};return w.runKernel(o.RFZ,t,{dtype:"float32"})}})),[],{}),t}runKernel(e,t,n){if(null==this.backendName&&this.backend,null==(0,i.pI)(e,this.backendName))throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:t,attrs:n})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,n){const r=this.backend.numDataIds();let a=0;n.forEach((e=>{a+="complex64"===e.dtype?3:1}));const s=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],o=r-t-a-s;if(o>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${o} data ids) after running '${e}'`)}runKernelFunc(e){let t,n=[];const r=this.isTapeOn(),a=this.state.numBytes,s=this.state.numTensors;let o,u;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0),null==this.backendName&&this.backend;const l=g(e)?e.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(g(e)){const{kernelName:t,inputs:a,attrs:s}=e;null==this.backendName&&this.backend;const l=(0,i.pI)(t,this.backendName);c.hu(null!=l,(()=>`Cannot find registered kernel '${t}' for backend '${this.backendName}'`)),o=()=>{const e=this.backend.numDataIds();u=l.kernelFunc({inputs:a,attrs:s,backend:this.backend});const o=Array.isArray(u)?u:[u];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(t,e,o);const i=o.map((e=>null!=e.rank?e:this.makeTensorFromTensorInfo(e)));if(r){const e=this.getTensorsForGradient(t,a,i);n=this.saveTensorsForBackwardMode(e)}return i}}else{const{forwardFunc:t}=e,a=e=>{r&&(n=e.map((e=>this.keep(this.clone(e)))))};o=()=>{const e=this.backend.numDataIds();u=this.tidy((()=>t(this.backend,a)));const n=Array.isArray(u)?u:[u];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(l,e,n),n}}const{inputs:p,attrs:d}=e,h=g(e)?null:e.backwardsFunc;let m;return this.scopedRun((()=>this.state.kernelDepth++),(()=>this.state.kernelDepth--),(()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(m=this.profiler.profileKernel(l,p,(()=>o())),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(m),t=m.outputs):t=o()})),r&&this.addTapeNode(l,p,t,h,n,d),this.state.profiling&&this.state.activeProfile.kernels.push({name:l,bytesAdded:this.state.numBytes-a,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-s,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(p).map((e=>null!=p[e]?p[e].shape:null)),outputShapes:t.map((e=>e.shape)),kernelTimeMs:m.timeMs,extraInfo:m.extraInfo}),Array.isArray(u)?t:t[0]}saveTensorsForBackwardMode(e){return e.map((e=>this.keep(this.clone(e))))}getTensorsForGradient(e,t,n){const r=(0,i.uk)(e);if(null!=r){const e=r.inputsToSave||[],a=r.outputsToSave||[];let s;r.saveAllInputs?(c.hu(Array.isArray(t),(()=>"saveAllInputs is true, expected inputs to be an array.")),s=Object.keys(t).map((e=>t[e]))):s=e.map((e=>t[e]));const o=n.filter(((e,t)=>a[t]));return s.concat(o)}return[]}makeTensor(e,t,n,r){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",r=r||this.backend;let a=e;"string"===n&&c.HD(e[0])&&(a=e.map((e=>l.encodeString(e))));const s=r.write(a,t,n),o=new m.es(t,n,s,this.nextTensorId());if(this.trackTensor(o,r),"string"===n){const e=this.state.tensorInfo.get(s),t=(0,c.Ub)(a);this.state.numBytes+=t-e.bytes,e.bytes=t}return o}makeTensorFromDataId(e,t,n,r){const a={dataId:e,shape:t,dtype:n=n||"float32"};return this.makeTensorFromTensorInfo(a,r)}makeTensorFromTensorInfo(e,t){const{dataId:n,shape:r,dtype:a}=e,s=new m.es(r,a,n,this.nextTensorId());return this.trackTensor(s,t),s}makeVariable(e,t=!0,n,r){n=n||this.nextVariableId().toString(),null!=r&&r!==e.dtype&&(e=e.cast(r));const a=new m._w(e,t,n,this.nextTensorId());if(null!=this.state.registeredVariables[a.name])throw new Error(`Variable with name ${a.name} was already registered`);return this.state.registeredVariables[a.name]=a,this.incRef(a,this.backend),a}trackTensor(e,t){this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++;let n=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(n=e.size*c.bT(e.dtype)),this.state.numBytes+=n,this.state.tensorInfo.has(e.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:n})),e instanceof m._w||this.track(e)}incRef(e,t){this.trackTensor(e,t),this.backend.incRef(e.dataId)}removeDataId(e,t){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===t&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;const t=this.state.tensorInfo.get(e.dataId);if(this.state.numTensors--,"string"===e.dtype&&(this.state.numStringTensors--,this.state.numBytes-=t.bytes),"complex64"!==e.dtype&&"string"!==e.dtype){const t=e.size*c.bT(e.dtype);this.state.numBytes-=t}t.backend.disposeData(e.dataId)&&this.removeDataId(e.dataId,t.backend)}disposeVariables(){for(const e in this.state.registeredVariables){const t=this.state.registeredVariables[e];this.disposeVariable(t)}}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;const t=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map((e=>e.totalBytesSnapshot))),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const e of this.state.activeProfile.kernels)e.kernelTimeMs=await e.kernelTimeMs,e.extraInfo=await e.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,t,n,r,a,s){const o={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:n,saved:a},u=(0,i.uk)(e);null!=u&&(r=u.gradFunc),null!=r&&(o.gradient=e=>(e=e.map(((e,t)=>{if(null==e){const e=n[t],r=c.wT(e.size,e.dtype);return this.makeTensor(r,e.shape,e.dtype)}return e})),r(e.length>1?e:e[0],a,s))),this.state.activeTape.push(o)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){const t=(0,f.getTensorsInContainer)(e),n=new Set(t.map((e=>e.id)));for(let e=0;e<this.state.activeScope.track.length;e++){const t=this.state.activeScope.track[e];t.kept||n.has(t.id)||t.dispose()}const r=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach((e=>{e.kept||e.scopeId!==r.id||this.track(e)}))}gradients(e,t,n,r=!1){if(c.hu(t.length>0,(()=>"gradients() received an empty list of xs.")),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const a=this.scopedRun((()=>this.startTape()),(()=>this.endTape()),(()=>this.tidy("forward",e)));c.hu(a instanceof m.es,(()=>"The result y returned by f() must be a tensor."));const s=function(e,t,n){const r={},a={};for(let e=0;e<t.length;e++)r[t[e].id]=!0;for(let n=0;n<e.length;n++){const s=e[n],o=s.inputs;for(const e in o){const n=o[e];let i=!1;for(let e=0;e<t.length;e++)if(r[n.id]){s.outputs.forEach((e=>r[e.id]=!0)),i=!0,a[s.id]=!0;break}if(i)break}}const s={};s[n.id]=!0;const o={};for(let t=e.length-1;t>=0;t--){const n=e[t],r=n.inputs;for(let e=0;e<n.outputs.length;e++)if(s[n.outputs[e].id]){for(const e in r)s[r[e].id]=!0,o[n.id]=!0;break}}const i=[];for(let t=0;t<e.length;t++){const n=e[t];if(a[n.id]&&o[n.id]){const e={};for(const t in n.inputs){const a=n.inputs[t];r[a.id]&&(e[t]=a)}const t=Object.assign({},n);t.inputs=e,t.outputs=n.outputs,i.push(t)}}return i}(this.state.activeTape,t,a);if(!r&&0===s.length&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",(()=>{const e={};e[a.id]=null==n?function(e){const t=(0,c.p8)((0,c.NA)(e),"float32");return w.makeTensor(t,e,"float32")}(a.shape):n,function(e,t,n,r){for(let a=t.length-1;a>=0;a--){const s=t[a],o=[];if(s.outputs.forEach((t=>{const n=e[t.id];null!=n?o.push(n):o.push(null)})),null==s.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${s.kernelName}.`);const i=s.gradient(o);for(const t in s.inputs){if(!(t in i))throw new Error(`Cannot backprop through input ${t}. Available gradients found: ${Object.keys(i)}.`);const a=n((()=>i[t]()));if("float32"!==a.dtype)throw new Error(`Error in gradient for op ${s.kernelName}. The gradient of input ${t} must have 'float32' dtype, but has '${a.dtype}'`);const o=s.inputs[t];if(!c.cO(a.shape,o.shape))throw new Error(`Error in gradient for op ${s.kernelName}. The gradient of input '${t}' has shape '${a.shape}', which does not match the shape of the input '${o.shape}'`);if(null==e[o.id])e[o.id]=a;else{const t=e[o.id];e[o.id]=r(t,a),t.dispose()}}}}(e,s,(e=>this.tidy(e)),v);const r=t.map((t=>e[t.id]));return 0===this.state.gradientDepth&&(this.state.activeTape.forEach((e=>{for(const t of e.saved)t.dispose()})),this.state.activeTape=null),{value:a,grads:r}}))}customGrad(e){return c.hu(c.mf(e),(()=>"The f passed in customGrad(f) must be a function.")),(...t)=>{let n;c.hu(t.every((e=>e instanceof m.es)),(()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors"));const r={};return t.forEach(((e,t)=>{r[t]=e})),this.runKernelFunc({forwardFunc:(r,a)=>(n=e(...t,a),c.hu(n.value instanceof m.es,(()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor")),c.hu(c.mf(n.gradFunc),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.")),n.value),backwardsFunc:(e,r)=>{const a=n.gradFunc(e,r),s=Array.isArray(a)?a:[a];c.hu(s.length===t.length,(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).")),c.hu(s.every((e=>e instanceof m.es)),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."));const o={};return s.forEach(((e,t)=>{o[t]=()=>e})),o},inputs:r})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}readToGPU(e,t){return this.state.tensorInfo.get(e).backend.readToGPU(e,t)}async time(e){const t=(0,l.now)(),n=await this.backend.time(e);return n.wallMs=(0,l.now)()-t,n}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new y;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function k(){const e=(0,s.D)();if(null==e._tfengine){const t=new a.qA(e);e._tfengine=new b(t)}return(0,a.iG)(e._tfengine.ENV),(0,m.Vi)((()=>e._tfengine)),e._tfengine}b.nextTensorId=0,b.nextVariableId=0;const w=k();function v(e,t){const n={a:e,b:t};return w.runKernel(o.mm_,n)}},3535:(e,t,n)=>{"use strict";n.d(t,{OB:()=>o,Vi:()=>i,iG:()=>u,qA:()=>a});var r=n(9740);class a{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=s,this.populateURLFlags()}setPlatform(e,t){null!=this.platform&&(o().getBool("IS_TEST")||o().getBool("PROD")||console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`)),this.platformName=e,this.platform=t}registerFlag(e,t,n){if(this.flagRegistry[e]={evaluationFn:t,setHook:n},null!=this.urlFlags[e]){const t=this.urlFlags[e];o().getBool("IS_TEST")||o().getBool("PROD")||console.warn(`Setting feature override from URL ${e}: ${t}.`),this.set(e,t)}}async getAsync(e){return e in this.flags||(this.flags[e]=await this.evaluateFlag(e)),this.flags[e]}get(e){if(e in this.flags)return this.flags[e];const t=this.evaluateFlag(e);if((0,r.tI)(t))throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(null==this.flagRegistry[e])throw new Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(null==this.flagRegistry[e])throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const e=this.getQueryParams(this.global.location.search);"tfjsflags"in e&&e.tfjsflags.split(",").forEach((e=>{const[t,n]=e.split(":");this.urlFlags[t]=function(e,t){if("true"===(t=t.toLowerCase())||"false"===t)return"true"===t;if(""+ +t===t)return+t;throw new Error(`Could not parse value flag value ${t} for flag ${e}.`)}(t,n)}))}}function s(e){const t={};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,((e,...n)=>(function(e,t,n){e[decodeURIComponent(t)]=decodeURIComponent(n||"")}(t,n[0],n[1]),n.join("=")))),t}function o(){return i}let i=null;function u(e){i=e}},7944:(e,t,n)=>{"use strict";let r;function a(){if(null==r){let e;if("undefined"!=typeof window)e=window;else if(void 0!==n.g)e=n.g;else if("undefined"!=typeof process)e=process;else{if("undefined"==typeof self)throw new Error("Could not find a global object");e=self}r=e}return r}function s(e,t){const n=function(){const e=a();return null==e._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals}();if(n.has(e))return n.get(e);{const r=t();return n.set(e,r),n.get(e)}}n.d(t,{D:()=>a,R:()=>s})},6021:(e,t,n)=>{"use strict";n.d(t,{B9:()=>g,CQ:()=>k,Cd:()=>w,Cn:()=>y,G4:()=>i,MX:()=>c,N5:()=>m,N8:()=>p,N_:()=>v,R:()=>u,SR:()=>d,VY:()=>_,XV:()=>b,cF:()=>l,cj:()=>N,jq:()=>T,lu:()=>f,sq:()=>h,x3:()=>x,y3:()=>I,ze:()=>S});var r=n(3421),a=n(3535),s=n(1313),o=n(9201);function i(){(0,a.OB)().set("PROD",!0)}function u(){(0,a.OB)().set("DEBUG",!0)}function l(){(0,a.OB)().set("DEPRECATION_WARNINGS_ENABLED",!1),console.warn("TensorFlow.js deprecation warnings have been disabled.")}function c(e){(0,a.OB)().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(e+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}function p(){r.BV.disposeVariables()}function d(){return r.BV}function h(){return r.BV.memory()}function m(e){return r.BV.profile(e)}function f(e,t){return r.BV.tidy(e,t)}function g(e){(0,o.getTensorsInContainer)(e).forEach((e=>e.dispose()))}function y(e){return r.BV.keep(e)}function b(e){return r.BV.time(e)}function k(e){return r.BV.setBackend(e)}function w(){return r.BV.ready()}function v(){return r.BV.backendName}function N(e){r.BV.removeBackend(e)}function x(e){return r.BV.findBackend(e)}function S(e){return r.BV.findBackendFactory(e)}function T(e,t,n=1){return r.BV.registerBackend(e,t,n)}function I(){return r.BV.backend}function _(e,t){(0,a.OB)().setPlatform(e,t)}(0,s.FZ)(c)},3184:(e,t,n)=>{"use strict";n.d(t,{UQ:()=>i,cb:()=>d,fN:()=>c,h7:()=>l,pn:()=>p,ti:()=>u});var r=n(3421),a=n(1313),s=n(8516),o=n(9740);function i(e){return o.hu(o.mf(e),(()=>"The f passed in grad(f) must be a function")),(t,n)=>{const a=(0,s._1)(t,"x","tf.grad","string_or_numeric"),i=null!=n?(0,s._1)(n,"dy","tf.grad"):null;return r.BV.tidy((()=>{const{value:t,grads:n}=r.BV.gradients((()=>e(a)),[a],i);return null!=i&&o.k5(t.shape,i.shape,"The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"),h(n),n[0]}))}}function u(e){return o.hu(o.mf(e),(()=>"The f passed in grads(f) must be a function")),(t,n)=>{o.hu(Array.isArray(t),(()=>"The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s"));const a=(0,s.sI)(t,"args","tf.grads","string_or_numeric"),i=null!=n?(0,s._1)(n,"dy","tf.grads"):null;return r.BV.tidy((()=>{const{value:t,grads:n}=r.BV.gradients((()=>e(...a)),a,i);return null!=i&&o.k5(t.shape,i.shape,"The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),h(n),n}))}}function l(e){return o.hu(o.mf(e),(()=>"The f passed in valueAndGrad(f) must be a function")),(t,n)=>{o.hu(t instanceof a.es,(()=>"The x passed in valueAndGrad(f)(x) must be a tensor")),o.hu(null==n||n instanceof a.es,(()=>"The dy passed in valueAndGrad(f)(x, dy) must be a tensor"));const{grads:s,value:i}=r.BV.gradients((()=>e(t)),[t],n);return h(s),{grad:s[0],value:i}}}function c(e){return o.hu(o.mf(e),(()=>"The f passed in valueAndGrads(f) must be a function")),(t,n)=>{o.hu(Array.isArray(t)&&t.every((e=>e instanceof a.es)),(()=>"The args passed in valueAndGrads(f)(args) must be array of tensors")),o.hu(null==n||n instanceof a.es,(()=>"The dy passed in valueAndGrads(f)(args, dy) must be a tensor"));const s=r.BV.gradients((()=>e(...t)),t,n);return null!=n&&o.k5(s.value.shape,n.shape,"The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),h(s.grads),s}}function p(e,t){o.hu(o.mf(e),(()=>"The f passed in variableGrads(f) must be a function")),o.hu(null==t||Array.isArray(t)&&t.every((e=>e instanceof a._w)),(()=>"The varList passed in variableGrads(f, varList) must be an array of variables"));const n=null!=t;if(!n){t=[];for(const e in r.BV.registeredVariables)t.push(r.BV.registeredVariables[e])}const s=n?t.filter((e=>!e.trainable)):null,i=t.length;t=t.filter((e=>e.trainable)),o.hu(t.length>0,(()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${i} variables is trainable.`));const{value:u,grads:l}=r.BV.gradients(e,t,null,!0);o.hu(l.some((e=>null!=e)),(()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize().")),o.hu(0===u.rank,(()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${u.rank} tensor`));const c={};return t.forEach(((e,t)=>{null!=l[t]&&(c[e.name]=l[t])})),null!=s&&s.forEach((e=>c[e.name]=null)),{value:u,grads:c}}function d(e){return r.BV.customGrad(e)}function h(e){if(e.filter((e=>null==e)).length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.")}},4656:(e,t,n)=>{"use strict";n.r(t),n.d(t,{Abs:()=>Tt.SYM,Acos:()=>Tt.VGw,Acosh:()=>Tt.SpW,AdadeltaOptimizer:()=>ze,AdagradOptimizer:()=>Le,AdamOptimizer:()=>Ge,AdamaxOptimizer:()=>je,Add:()=>Tt.mm_,AddN:()=>Tt.Xze,All:()=>Tt.oT6,Any:()=>Tt.IKK,ArgMax:()=>Tt.sJF,ArgMin:()=>Tt.aJk,Asin:()=>Tt.M2y,Asinh:()=>Tt.qw7,Atan:()=>Tt.jMg,Atan2:()=>Tt.QCc,Atanh:()=>Tt.Oyi,AvgPool:()=>Tt.JhU,AvgPool3D:()=>Tt._k9,AvgPool3DGrad:()=>Tt.IMb,AvgPoolGrad:()=>Tt.ROF,BatchMatMul:()=>Tt.XLW,BatchToSpaceND:()=>Tt.zws,Bincount:()=>Tt.zvY,BroadcastArgs:()=>Tt.eEB,BroadcastTo:()=>Tt.Ly9,Cast:()=>Tt.RFZ,Ceil:()=>Tt.gJX,ClipByValue:()=>Tt.xnO,Complex:()=>Tt.Zz9,ComplexAbs:()=>Tt.yj2,Concat:()=>Tt.Eh3,Conv2D:()=>Tt.mhS,Conv2DBackpropFilter:()=>Tt.wUP,Conv2DBackpropInput:()=>Tt.wm,Conv3D:()=>Tt.x12,Conv3DBackpropFilterV2:()=>Tt.o2y,Conv3DBackpropInputV2:()=>Tt.ik2,Cos:()=>Tt.mc4,Cosh:()=>Tt.TR1,CropAndResize:()=>Tt.VcC,Cumprod:()=>Tt.Byc,Cumsum:()=>Tt.iHb,DataStorage:()=>hr.JL,DenseBincount:()=>Tt.QRR,DepthToSpace:()=>Tt.T0n,DepthwiseConv2dNative:()=>Tt.cie,DepthwiseConv2dNativeBackpropFilter:()=>Tt.sL$,DepthwiseConv2dNativeBackpropInput:()=>Tt.y7R,Diag:()=>Tt.$w,Dilation2D:()=>Tt.p4S,Dilation2DBackpropFilter:()=>Tt.Vn9,Dilation2DBackpropInput:()=>Tt.ekb,ENV:()=>b.Vi,Einsum:()=>Tt.$g6,Elu:()=>Tt.SX0,EluGrad:()=>Tt.HEU,Environment:()=>b.qA,Equal:()=>Tt.hdR,Erf:()=>Tt.Omj,Exp:()=>Tt.NEP,ExpandDims:()=>Tt.YFo,Expm1:()=>Tt.Y0y,FFT:()=>Tt.vwp,Fill:()=>Tt.deh,FlipLeftRight:()=>Tt.Uyb,Floor:()=>Tt.OR,FloorDiv:()=>Tt.jeX,FromPixels:()=>Tt.eBW,FusedBatchNorm:()=>Tt.sHE,FusedConv2D:()=>Tt._V0,FusedDepthwiseConv2D:()=>Tt.luS,GatherNd:()=>Tt.q1x,GatherV2:()=>Tt.qi_,Greater:()=>Tt.iZT,GreaterEqual:()=>Tt.Acj,IFFT:()=>Tt.Qg5,Identity:()=>Tt.iJz,Imag:()=>Tt.J_u,IsFinite:()=>Tt.avt,IsInf:()=>Tt.iWB,IsNan:()=>Tt.r7n,KernelBackend:()=>hr.Zu,LRN:()=>Tt.eZ0,LRNGrad:()=>Tt.Hhh,LeakyRelu:()=>Tt.J$2,Less:()=>Tt.vtC,LessEqual:()=>Tt.CAk,LinSpace:()=>Tt.e7N,Log:()=>Tt.ZbH,Log1p:()=>Tt.kU,LogSoftmax:()=>Tt.qCd,LogicalAnd:()=>Tt.PYm,LogicalNot:()=>Tt.VfG,LogicalOr:()=>Tt.MZg,LogicalXor:()=>Tt.w6g,LowerBound:()=>Tt.qIC,Max:()=>Tt.YoZ,MaxPool:()=>Tt.mTV,MaxPool3D:()=>Tt.OAf,MaxPool3DGrad:()=>Tt.OU7,MaxPoolGrad:()=>Tt.OV7,MaxPoolWithArgmax:()=>Tt.vFR,Maximum:()=>Tt.BMI,Mean:()=>Tt.q2K,Min:()=>Tt.c17,Minimum:()=>Tt.q8u,MirrorPad:()=>Tt.jQs,Mod:()=>Tt.Vbg,MomentumOptimizer:()=>Xe,Multinomial:()=>Tt.NZg,Multiply:()=>Tt.wYn,Neg:()=>Tt.kuV,NonMaxSuppressionV3:()=>Tt.uv1,NonMaxSuppressionV4:()=>Tt.cye,NonMaxSuppressionV5:()=>Tt.W0H,NotEqual:()=>Tt.yQU,OP_SCOPE_SUFFIX:()=>en.zvA,OneHot:()=>Tt.we_,OnesLike:()=>Tt.qWM,Optimizer:()=>Ce,OptimizerConstructors:()=>Yt,Pack:()=>Tt.QiL,PadV2:()=>Tt.lyA,Pool:()=>Tt.Kgp,Pow:()=>Tt.pe_,Prelu:()=>Tt.o0g,Prod:()=>Tt.DlI,RMSPropOptimizer:()=>Ze,RaggedGather:()=>Tt.dDz,RaggedRange:()=>Tt.CQl,RaggedTensorToTensor:()=>Tt.BiW,Range:()=>Tt.e6w,Rank:()=>Jt.yw,Real:()=>Tt.xJR,RealDiv:()=>Tt.oHH,Reciprocal:()=>Tt.$HU,Reduction:()=>tn.I,Relu:()=>Tt.qkr,Relu6:()=>Tt.SbG,Reshape:()=>Tt.HZH,ResizeBilinear:()=>Tt._Yw,ResizeBilinearGrad:()=>Tt.zbQ,ResizeNearestNeighbor:()=>Tt.dpD,ResizeNearestNeighborGrad:()=>Tt.Hmb,Reverse:()=>Tt.mKl,RotateWithOffset:()=>Tt.b9H,Round:()=>Tt.e07,Rsqrt:()=>Tt.bV0,SGDOptimizer:()=>Ke,ScatterNd:()=>Tt.xQA,SearchSorted:()=>Tt.nr8,Select:()=>Tt.PhF,Selu:()=>Tt.oFR,Sigmoid:()=>Tt.a5O,Sign:()=>Tt.i5y,Sin:()=>Tt.RQH,Sinh:()=>Tt.wYB,Slice:()=>Tt.p2w,Softmax:()=>Tt.Gcp,Softplus:()=>Tt.MRv,SpaceToBatchND:()=>Tt.TQc,SparseFillEmptyRows:()=>Tt.O3z,SparseReshape:()=>Tt.nhH,SparseSegmentMean:()=>Tt.w3H,SparseSegmentSum:()=>Tt.ZjV,SparseToDense:()=>Tt.D2d,SplitV:()=>Tt.L8s,Sqrt:()=>Tt.FKq,Square:()=>Tt.bK0,SquaredDifference:()=>Tt._tC,Step:()=>Tt.h8e,StridedSlice:()=>Tt.jQk,StringNGrams:()=>Tt._JP,StringSplit:()=>Tt.s1s,StringToHashBucketFast:()=>Tt.XkS,Sub:()=>Tt.Tr8,Sum:()=>Tt.GBy,Tan:()=>Tt.sEM,Tanh:()=>Tt.MIZ,Tensor:()=>Se.es,TensorBuffer:()=>Se.YD,Tile:()=>Tt.n9L,TopK:()=>Tt.cWu,Transform:()=>Tt.wx7,Transpose:()=>Tt.G3Y,Unique:()=>Tt.kpP,Unpack:()=>Tt.ToN,UnsortedSegmentSum:()=>Tt.Qvg,UpperBound:()=>Tt.XDQ,Variable:()=>Se._w,ZerosLike:()=>Tt.RuY,_FusedMatMul:()=>Tt.usg,abs:()=>en.WnP,acos:()=>en.Khb,acosh:()=>en.__u,add:()=>en.IHx,addN:()=>en.QBD,all:()=>en.$6P,any:()=>en.YjB,argMax:()=>en.NqF,argMin:()=>en.vHJ,asin:()=>en.ZRM,asinh:()=>en.VfV,atan:()=>en.z4N,atan2:()=>en.fvJ,atanh:()=>en.C80,avgPool:()=>en.wS1,avgPool3d:()=>en.uR5,backend:()=>Ie.y3,backend_util:()=>p,basicLSTMCell:()=>en.zEQ,batchNorm:()=>en.tgs,batchNorm2d:()=>en.Dxk,batchNorm3d:()=>en.JY5,batchNorm4d:()=>en.p3b,batchToSpaceND:()=>en.E4h,bincount:()=>en.yE8,booleanMaskAsync:()=>en.anm,broadcastArgs:()=>en.XsQ,broadcastTo:()=>en.UFq,broadcast_util:()=>St,browser:()=>i,buffer:()=>en.f3b,cast:()=>en.pju,ceil:()=>en.mDi,clipByValue:()=>en.iUl,clone:()=>en.d9v,complex:()=>en.PYB,concat:()=>en.zoF,concat1d:()=>en.gME,concat2d:()=>en.Izb,concat3d:()=>en.MNy,concat4d:()=>en.ZaL,conv1d:()=>en.PAt,conv2d:()=>en.Tek,conv2dTranspose:()=>en.bc,conv3d:()=>en.pdZ,conv3dTranspose:()=>en.$QV,copyRegisteredKernels:()=>It.T3,cos:()=>en.mCk,cosh:()=>en.f9Y,cosineWindow:()=>en.mew,cumprod:()=>en.$Gn,cumsum:()=>en.zbp,customGrad:()=>$e.cb,denseBincount:()=>en.ppE,deprecationWarn:()=>Ie.MX,depthToSpace:()=>en.nTT,depthwiseConv2d:()=>en.B10,device_util:()=>r,diag:()=>en.Ka3,dilation2d:()=>en.WmZ,disableDeprecationWarnings:()=>Ie.cF,dispose:()=>Ie.B9,disposeVariables:()=>Ie.N8,div:()=>en.hiC,divNoNan:()=>en.NTj,dot:()=>en.AKD,dropout:()=>en.rvX,einsum:()=>en.WYO,elu:()=>en.pyx,enableDebugMode:()=>Ie.R,enableProdMode:()=>Ie.G4,enclosingPowerOfTwo:()=>en.GRh,engine:()=>Ie.SR,env:()=>b.OB,equal:()=>en.DgJ,erf:()=>en.qNN,euclideanNorm:()=>en.d2q,exp:()=>en.Qqt,expandDims:()=>en.dt4,expm1:()=>en.t$B,eye:()=>en.iyy,fft:()=>en.kp_,fill:()=>en.hlL,findBackend:()=>Ie.x3,findBackendFactory:()=>Ie.ze,floor:()=>en.GWj,floorDiv:()=>en.qPi,fused:()=>en.imm,gather:()=>en.Iqj,gatherND:()=>en.dbB,gather_util:()=>u,getBackend:()=>Ie.N_,getGradient:()=>It.uk,getKernel:()=>It.pI,getKernelsForBackend:()=>It.tr,grad:()=>$e.UQ,grads:()=>$e.ti,greater:()=>en.pjt,greaterEqual:()=>en.brS,ifft:()=>en.Sxn,imag:()=>en.asL,image:()=>en.BHj,inTopKAsync:()=>en.V3u,io:()=>s,irfft:()=>en.wx0,isFinite:()=>en.xVT,isInf:()=>en.UWc,isNaN:()=>en.i2d,keep:()=>Ie.Cn,kernel_impls:()=>d,leakyRelu:()=>en.hi7,less:()=>en.d9m,lessEqual:()=>en.zN1,linalg:()=>en.$r2,linspace:()=>en.SX3,localResponseNormalization:()=>en.G9k,log:()=>en.cM7,log1p:()=>en.Krr,logSigmoid:()=>en.e_t,logSoftmax:()=>en.CmS,logSumExp:()=>en.l_t,logicalAnd:()=>en.HvI,logicalNot:()=>en.hJK,logicalOr:()=>en.K5V,logicalXor:()=>en.egP,losses:()=>en.MB5,lowerBound:()=>en.eab,matMul:()=>en.OI3,math:()=>o,max:()=>en.Fp7,maxPool:()=>en._sB,maxPool3d:()=>en.YQQ,maxPoolWithArgmax:()=>en.Ip$,maximum:()=>en.gWQ,mean:()=>en.J69,memory:()=>Ie.sq,meshgrid:()=>en.ry_,min:()=>en.VV$,minimum:()=>en.LTh,mirrorPad:()=>en.VdP,mod:()=>en.wQq,moments:()=>en.Gi7,movingAverage:()=>en.p_,mul:()=>en.dC7,multiRNNCell:()=>en.rq4,multinomial:()=>en.SJ_,neg:()=>en.W76,nextFrame:()=>an,norm:()=>en.KOy,notEqual:()=>en.Quu,oneHot:()=>en.lfX,ones:()=>en.iUs,onesLike:()=>en.JpU,op:()=>en.op,outerProduct:()=>en.N2O,pad:()=>en.vku,pad1d:()=>en.pNR,pad2d:()=>en.koy,pad3d:()=>en.t1L,pad4d:()=>en.lGY,pool:()=>en.d_R,pow:()=>en.sQ3,prelu:()=>en.AL3,print:()=>en.S0v,prod:()=>en.WVs,profile:()=>Ie.N5,raggedGather:()=>en.$gW,raggedRange:()=>en.VT$,raggedTensorToTensor:()=>en.N89,rand:()=>en.TN_,randomGamma:()=>en.wzB,randomNormal:()=>en.nGf,randomStandardNormal:()=>en.ruB,randomUniform:()=>en.LGj,range:()=>en.w6H,ready:()=>Ie.Cd,real:()=>en.kwC,reciprocal:()=>en.M25,registerBackend:()=>Ie.jq,registerGradient:()=>It.Li,registerKernel:()=>It.wC,relu:()=>en.UYe,relu6:()=>en.btT,removeBackend:()=>Ie.cj,reshape:()=>en.XLQ,reverse:()=>en.GYS,reverse1d:()=>en.SDf,reverse2d:()=>en.diP,reverse3d:()=>en.sx7,reverse4d:()=>en.mG2,rfft:()=>en.QEs,round:()=>en.NMM,rsqrt:()=>en.bp0,scalar:()=>en.iD$,scatterND:()=>en.snQ,scatter_util:()=>Ot,searchSorted:()=>en.zcT,selu:()=>en.U8D,separableConv2d:()=>en.U_I,serialization:()=>a,setBackend:()=>Ie.CQ,setPlatform:()=>Ie.VY,setdiff1dAsync:()=>en.ODp,sigmoid:()=>en.XD2,sign:()=>en.Xxe,signal:()=>en.tdS,sin:()=>en.O$l,sinh:()=>en.R_K,slice:()=>en.tPi,slice1d:()=>en.jZU,slice2d:()=>en.SmN,slice3d:()=>en.CnO,slice4d:()=>en.p0P,slice_util:()=>Bt,softmax:()=>en.XAC,softplus:()=>en.Wvh,spaceToBatchND:()=>en.fBT,sparse:()=>en.rVs,sparseToDense:()=>en.ers,spectral:()=>en.uN7,split:()=>en.Vl2,sqrt:()=>en._b3,square:()=>en.h62,squaredDifference:()=>en.$i,squeeze:()=>en.L9e,stack:()=>en.knu,step:()=>en.Nbs,stridedSlice:()=>en.NXj,string:()=>en.Z_8,sub:()=>en.luU,sum:()=>en.Smz,sumOutType:()=>Jt.z4,tan:()=>en.ORZ,tanh:()=>en.AEp,tensor:()=>en.XeE,tensor1d:()=>en.RRF,tensor2d:()=>en.odF,tensor3d:()=>en.wOQ,tensor4d:()=>en.yXz,tensor5d:()=>en.Bfx,tensor6d:()=>en.xZs,tensor_util:()=>Rt,test_util:()=>l,tidy:()=>Ie.lu,tile:()=>en.Gg6,time:()=>Ie.XV,topk:()=>en.hg7,train:()=>nn,transpose:()=>en.p4s,truncatedNormal:()=>en.Xu6,unique:()=>en.Two,unregisterGradient:()=>It.bt,unregisterKernel:()=>It.nE,unsortedSegmentSum:()=>en.pUJ,unstack:()=>en.HHK,upcastType:()=>Jt.x8,upperBound:()=>en.GaM,util:()=>Vt,valueAndGrad:()=>$e.h7,valueAndGrads:()=>$e.fN,variable:()=>en.VD$,variableGrads:()=>$e.pn,version_core:()=>Qt,where:()=>en.arb,whereAsync:()=>en.itS,zeros:()=>en.lls,zerosLike:()=>en.P84});var r={};n.r(r),n.d(r,{isBrowser:()=>y,isMobile:()=>g,mockIsMobile:()=>f});var a={};n.r(a),n.d(a,{Serializable:()=>Be,SerializationMap:()=>Re,registerClass:()=>Ve});var s={};n.r(s),n.d(s,{browserFiles:()=>tt,browserHTTPRequest:()=>ct,concatenateArrayBuffers:()=>M,copyModel:()=>ge,decodeWeights:()=>I,encodeWeights:()=>T,fromMemory:()=>mt,fromMemorySync:()=>ft,getLoadHandlers:()=>H,getModelArtifactsForJSON:()=>O,getModelArtifactsForJSONSync:()=>$,getModelArtifactsInfoForJSON:()=>B,getSaveHandlers:()=>L,getWeightSpecs:()=>R,http:()=>lt,isHTTPScheme:()=>it,listModels:()=>me,loadWeights:()=>at,moveModel:()=>ye,registerLoadRouter:()=>P,registerSaveRouter:()=>z,removeModel:()=>fe,weightsLoaderFactory:()=>st,withSaveHandler:()=>gt,withSaveHandlerSync:()=>yt});var o={};n.r(o),n.d(o,{confusionMatrix:()=>xt});var i={};n.r(i),n.d(i,{fromPixels:()=>Ft,fromPixelsAsync:()=>Mt,toPixels:()=>Dt});var u={};n.r(u),n.d(u,{prepareAndValidate:()=>$t});var l={};n.r(l),n.d(l,{TEST_EPSILON_FLOAT16:()=>Ct,createVideoElement:()=>Xt,encodeStrings:()=>Kt,expectArrayBuffersEqual:()=>jt,expectArraysClose:()=>zt,expectArraysEqual:()=>Wt,expectNumbersClose:()=>Gt,expectPromiseToFail:()=>Ht,expectValuesInRange:()=>qt,play:()=>Zt,testEpsilon:()=>Pt});var c={};n.r(c),n.d(c,{collectGatherOpShapeInfo:()=>ur,computeOutShape:()=>ir,segOpComputeOptimalWindowSize:()=>or});var p={};n.r(p),n.d(p,{ERF_A1:()=>In,ERF_A2:()=>_n,ERF_A3:()=>En,ERF_A4:()=>An,ERF_A5:()=>Mn,ERF_P:()=>Tn,PARALLELIZE_THRESHOLD:()=>gn,RowPartitionType:()=>ln,SELU_SCALE:()=>Sn.$,SELU_SCALEALPHA:()=>Sn.y,applyActivation:()=>pn.QH,assertAndGetBroadcastShape:()=>St.assertAndGetBroadcastShape,assertAxesAreInnerMostDims:()=>sn.lB,assertParamsConsistent:()=>on,assignToTypedArray:()=>Vn,axesAreInnerMostDims:()=>sn.YB,calculateShapes:()=>Ot.calculateShapes,checkEinsumDimSizes:()=>Wn,checkPadOnDimRoundingMode:()=>cn.m,combineLocations:()=>sn.Vh,combineRaggedTensorToTensorShapes:()=>dn,complexWithEvenIndex:()=>On,complexWithOddIndex:()=>Bn,computeConv2DInfo:()=>cn.Ix,computeConv3DInfo:()=>cn.jw,computeDefaultPad:()=>cn.aO,computeDilation2DInfo:()=>cn.Rf,computeOptimalWindowSize:()=>yn,computeOutAndReduceShapes:()=>sn.kz,computeOutShape:()=>un,computePool2DInfo:()=>cn.Xw,computePool3DInfo:()=>cn.pl,convertConv2DDataFormat:()=>cn.sl,decodeEinsumEquation:()=>Ln,eitherStridesOrDilationsAreOne:()=>cn.jT,expandShapeToKeepDim:()=>sn.rv,exponent:()=>zn,exponents:()=>Cn,fromStringArrayToUint8:()=>cr,fromUint8ToStringArray:()=>lr,getAxesPermutation:()=>sn.Q3,getBroadcastDims:()=>St.getBroadcastDims,getComplexWithIndex:()=>Rn,getEinsumComputePath:()=>Gn,getEinsumPermutation:()=>Hn,getFusedBiasGradient:()=>pn.pf,getFusedDyActivation:()=>pn.Fr,getImageCenter:()=>bn,getInnerMostAxes:()=>sn.sY,getPermuted:()=>wn,getRaggedRank:()=>mn,getReductionAxes:()=>St.getReductionAxes,getReshaped:()=>kn,getReshapedPermuted:()=>vn,getRowPartitionTypesHelper:()=>hn,getSliceBeginCoords:()=>Nn,getSliceSize:()=>xn,getSparseFillEmptyRowsIndicesDenseShapeMismatch:()=>Kn,getSparseFillEmptyRowsNegativeIndexErrorMessage:()=>Xn,getSparseFillEmptyRowsOutOfRangeIndexErrorMessage:()=>Zn,getSparseReshapeEmptyTensorZeroOutputDimErrorMessage:()=>Jn,getSparseReshapeInputOutputMismatchErrorMessage:()=>tr,getSparseReshapeInputOutputMultipleErrorMessage:()=>er,getSparseReshapeMultipleNegativeOneOutputDimErrorMessage:()=>Qn,getSparseReshapeNegativeOutputDimErrorMessage:()=>Yn,getSparseSegmentReductionIndicesOutOfRangeErrorMessage:()=>sr,getSparseSegmentReductionNegativeSegmentIdsErrorMessage:()=>nr,getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage:()=>rr,getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage:()=>ar,getUndoAxesPermutation:()=>sn.LJ,isIdentityPermutation:()=>Un,log:()=>Dn.c,mergeRealAndImagArrays:()=>Fn,prepareAndValidate:()=>$t,prepareSplitSize:()=>jn,segment_util:()=>c,shouldFuse:()=>pn.uy,slice_util:()=>Bt,splitRealAndImagArrays:()=>$n,stridesOrDilationsArePositive:()=>cn.U3,tupleValuesAreOne:()=>cn.I0,upcastType:()=>Jt.x8,validateDefaultValueShape:()=>fn,validateInput:()=>Ot.validateInput,validateUpdateShape:()=>Ot.validateUpdateShape,warn:()=>Dn.Z});var d={};n.r(d),n.d(d,{nonMaxSuppressionV3Impl:()=>pr.GP,nonMaxSuppressionV4Impl:()=>pr.qP,nonMaxSuppressionV5Impl:()=>pr.pA,whereImpl:()=>dr.Z});var h=n(3421);let m;function f(e){m=e}function g(e){if(void 0!==m)return m;if(e||"undefined"!=typeof navigator&&null!=navigator){if(e||(e=navigator),"ReactNative"===e.product)return!0;const t=e.userAgent||e.vendor||("undefined"!=typeof window?window.opera:"");if(!t){const t=e;return t.userAgentData&&t.userAgentData.mobile}return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))}return!1}function y(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}var b=n(3535);const k=(0,b.OB)();k.registerFlag("DEBUG",(()=>!1),(e=>{e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")})),k.registerFlag("IS_BROWSER",(()=>y())),k.registerFlag("IS_NODE",(()=>"undefined"!=typeof process&&void 0!==process.versions&&void 0!==process.versions.node)),k.registerFlag("IS_CHROME",(()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor))),k.registerFlag("PROD",(()=>!1)),k.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",(()=>k.getBool("DEBUG"))),k.registerFlag("DEPRECATION_WARNINGS_ENABLED",(()=>!0)),k.registerFlag("IS_TEST",(()=>!1)),k.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",(()=>!0)),k.registerFlag("WRAP_TO_IMAGEBITMAP",(()=>!1)),k.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU",(()=>!1)),k.registerFlag("USE_SETTIMEOUTCUSTOM",(()=>!1));var w=n(6609),v=n(7316),N=n(9740);const x={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};var S=n(8834).Buffer;async function T(e,t){const n=[],r=[],a=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);for(let s=0;s<a.length;++s){const o=a[s],i=Array.isArray(e)?e[s].tensor:e[o];if("float32"!==i.dtype&&"int32"!==i.dtype&&"bool"!==i.dtype&&"string"!==i.dtype&&"complex64"!==i.dtype)throw new Error(`Unsupported dtype in weight '${o}': ${i.dtype}`);const u={name:o,shape:i.shape,dtype:i.dtype};if("string"===i.dtype){const e=new Promise((async e=>{const t=await i.bytes(),n=t.reduce(((e,t)=>e+t.length),0)+4*t.length,r=new Uint8Array(n);let a=0;for(let e=0;e<t.length;e++){const n=t[e],s=new Uint8Array(new Uint32Array([n.length]).buffer);r.set(s,a),a+=4,r.set(n,a),a+=n.length}e(r)}));r.push(e)}else r.push(i.data());null!=t&&(u.group=t),n.push(u)}return{data:_(await Promise.all(r)),specs:n}}function I(e,t){const n={};let r,a=0;for(const s of t){const t=s.name,o=s.dtype,i=s.shape,u=(0,N.NA)(i);let l;if("quantization"in s){const n=s.quantization;if("uint8"===n.dtype||"uint16"===n.dtype){if(!("min"in n)||!("scale"in n))throw new Error(`Weight ${s.name} with quantization ${n.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==n.dtype)throw new Error(`Weight ${s.name} has unknown quantization dtype ${n.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==o)throw new Error(`Weight ${s.name} is quantized with ${n.dtype} which only supports weights of type float32 not ${o}.`)}const i=x[n.dtype],c=e.slice(a,a+u*i),p="uint8"===n.dtype?new Uint8Array(c):new Uint16Array(c);if("float32"===o)if("uint8"===n.dtype||"uint16"===n.dtype){l=new Float32Array(p.length);for(let e=0;e<p.length;e++){const t=p[e];l[e]=t*n.scale+n.min}}else{if("float16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type float32.`);void 0===r&&(r=V()),l=r(p)}else{if("int32"!==o)throw new Error(`Unsupported dtype in weight '${t}': ${o}`);if("uint8"!==n.dtype&&"uint16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type int32.`);l=new Int32Array(p.length);for(let e=0;e<p.length;e++){const t=p[e];l[e]=Math.round(t*n.scale+n.min)}}a+=u*i}else if("string"===o){const t=(0,N.NA)(s.shape);l=[];for(let n=0;n<t;n++){const t=new Uint32Array(e.slice(a,a+4))[0];a+=4;const n=new Uint8Array(e.slice(a,a+t));l.push(n),a+=t}}else{const r=x[o],s=e.slice(a,a+u*r);if("float32"===o)l=new Float32Array(s);else if("int32"===o)l=new Int32Array(s);else if("bool"===o)l=new Uint8Array(s);else{if("complex64"!==o)throw new Error(`Unsupported dtype in weight '${t}': ${o}`);{l=new Float32Array(s);const e=new Float32Array(l.length/2),r=new Float32Array(l.length/2);for(let t=0;t<e.length;t++)e[t]=l[2*t],r[t]=l[2*t+1];const a=(0,v.X)(e,i,"float32"),o=(0,v.X)(r,i,"float32");n[t]=(0,w.P)(a,o),a.dispose(),o.dispose()}}a+=u*r}"complex64"!==o&&(n[t]=(0,v.X)(l,i,o))}return n}function _(e){if(null===e)throw new Error(`Invalid input value: ${JSON.stringify(e)}`);let t=0;const n=[];e.forEach((e=>{if(t+=e.byteLength,n.push(e.byteLength===e.buffer.byteLength?e:new e.constructor(e)),!(e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${e.constructor.name}`)}));const r=new Uint8Array(t);let a=0;return n.forEach((e=>{r.set(new Uint8Array(e.buffer),a),a+=e.byteLength})),r.buffer}const E=void 0!==S&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function A(e){return E?S.byteLength(e):new Blob([e]).size}function M(e){if(1===e.length)return e[0];let t=0;e.forEach((e=>{t+=e.byteLength}));const n=new Uint8Array(t);let r=0;return e.forEach((e=>{n.set(new Uint8Array(e),r),r+=e.byteLength})),n.buffer}function D(e){for(e=e.trim();e.endsWith("/");)e=e.slice(0,e.length-1);const t=e.split("/");return t[t.length-1]}function F(e,t){const n={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:t};return null!=e.signature&&(n.signature=e.signature),null!=e.userDefinedMetadata&&(n.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(n.modelInitializer=e.modelInitializer),null!=e.initializerSignature&&(n.initializerSignature=e.initializerSignature),null!=e.trainingConfig&&(n.trainingConfig=e.trainingConfig),n}function $(e,t,n){const r={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy};if(null!=e.trainingConfig&&(r.trainingConfig=e.trainingConfig),null!=e.weightsManifest){if(!t)throw new Error("modelJSON has weightsManifest but weightSpecs is null");if(!n)throw new Error("modelJSON has weightsManifest but weightData is null");r.weightSpecs=t,r.weightData=n}return null!=e.signature&&(r.signature=e.signature),null!=e.userDefinedMetadata&&(r.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(r.modelInitializer=e.modelInitializer),null!=e.initializerSignature&&(r.initializerSignature=e.initializerSignature),r}async function O(e,t){let n,r;return null!=e.weightsManifest&&([n,r]=await t(e.weightsManifest)),$(e,n,r)}function B(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:A(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:A(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:e.weightData.byteLength}}function R(e){const t=[];for(const n of e)t.push(...n.weights);return t}function V(){const e=function(){const e=e=>{let t=e<<13,n=0;for(;0==(8388608&t);)n-=8388608,t<<=1;return t&=-8388609,n+=947912704,t|n},t=new Uint32Array(2048);t[0]=0;for(let n=1;n<1024;n++)t[n]=e(n);for(let e=1024;e<2048;e++)t[e]=939524096+(e-1024<<13);return t}(),t=function(){const e=new Uint32Array(64);e[0]=0,e[31]=1199570944,e[32]=2147483648,e[63]=3347054592;for(let t=1;t<31;t++)e[t]=t<<23;for(let t=33;t<63;t++)e[t]=2147483648+(t-32<<23);return e}(),n=function(){const e=new Uint32Array(64);for(let t=0;t<64;t++)e[t]=1024;return e[0]=e[32]=0,e}();return r=>{const a=new ArrayBuffer(4*r.length),s=new Uint32Array(a);for(let a=0;a<r.length;a++){const o=r[a],i=e[n[o>>10]+(1023&o)]+t[o>>10];s[a]=i}return new Float32Array(a)}}class C{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==C.instance&&(C.instance=new C),C.instance}static registerSaveRouter(e){C.getInstance().saveRouters.push(e)}static registerLoadRouter(e){C.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return C.getHandlers(e,"save")}static getLoadHandlers(e,t){return C.getHandlers(e,"load",t)}static getHandlers(e,t,n){const r=[];return("load"===t?C.getInstance().loadRouters:C.getInstance().saveRouters).forEach((t=>{const a=t(e,n);null!==a&&r.push(a)})),r}}const z=e=>C.registerSaveRouter(e),P=e=>C.registerLoadRouter(e),L=e=>C.getSaveHandlers(e),H=(e,t)=>C.getLoadHandlers(e,t),W="tensorflowjs",G="models_store",U="model_info_store";function q(){if(!(0,b.OB)().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const e="undefined"==typeof window?self:window,t=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function j(e){const t=e.result;t.createObjectStore(G,{keyPath:"modelPath"}),t.createObjectStore(U,{keyPath:"modelPath"})}class K{constructor(e){if(this.indexedDB=q(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise(((e,n)=>{const r=this.indexedDB.open(W,1);r.onupgradeneeded=()=>j(r),r.onsuccess=()=>{const a=r.result;if(null==t){const t=a.transaction(G,"readonly"),r=t.objectStore(G).get(this.modelPath);r.onsuccess=()=>{if(null==r.result)return a.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));e(r.result.modelArtifacts)},r.onerror=e=>(a.close(),n(r.error)),t.oncomplete=()=>a.close()}else{const r=B(t),s=a.transaction(U,"readwrite");let o=s.objectStore(U);const i=o.put({modelPath:this.modelPath,modelArtifactsInfo:r});let u;i.onsuccess=()=>{u=a.transaction(G,"readwrite");const i=u.objectStore(G).put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:r});i.onsuccess=()=>e({modelArtifactsInfo:r}),i.onerror=e=>{o=s.objectStore(U);const t=o.delete(this.modelPath);t.onsuccess=()=>(a.close(),n(i.error)),t.onerror=e=>(a.close(),n(i.error))}},i.onerror=e=>(a.close(),n(i.error)),s.oncomplete=()=>{null==u?a.close():u.oncomplete=()=>a.close()}}},r.onerror=e=>n(r.error)}))}}K.URL_SCHEME="indexeddb://";const X=e=>{return(0,b.OB)().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(K.URL_SCHEME)?(t=e.slice(K.URL_SCHEME.length),new K(t)):null;var t};C.registerSaveRouter(X),C.registerLoadRouter(X);class Z{constructor(){this.indexedDB=q()}async listModels(){return new Promise(((e,t)=>{const n=this.indexedDB.open(W,1);n.onupgradeneeded=()=>j(n),n.onsuccess=()=>{const r=n.result,a=r.transaction(U,"readonly"),s=a.objectStore(U).getAll();s.onsuccess=()=>{const t={};for(const e of s.result)t[e.modelPath]=e.modelArtifactsInfo;e(t)},s.onerror=e=>(r.close(),t(s.error)),a.oncomplete=()=>r.close()},n.onerror=e=>t(n.error)}))}async removeModel(e){var t;return e=(t=e).startsWith(K.URL_SCHEME)?t.slice(K.URL_SCHEME.length):t,new Promise(((t,n)=>{const r=this.indexedDB.open(W,1);r.onupgradeneeded=()=>j(r),r.onsuccess=()=>{const a=r.result,s=a.transaction(U,"readwrite"),o=s.objectStore(U),i=o.get(e);let u;i.onsuccess=()=>{if(null==i.result)return a.close(),n(new Error(`Cannot find model with path '${e}' in IndexedDB.`));{const r=o.delete(e),s=()=>{u=a.transaction(G,"readwrite");const r=u.objectStore(G).delete(e);r.onsuccess=()=>t(i.result.modelArtifactsInfo),r.onerror=e=>n(i.error)};r.onsuccess=s,r.onerror=e=>(s(),a.close(),n(i.error))}},i.onerror=e=>(a.close(),n(i.error)),s.oncomplete=()=>{null==u?a.close():u.oncomplete=()=>a.close()}},r.onerror=e=>n(r.error)}))}}const Q="/",Y="tensorflowjs_models",J="info",ee="model_topology",te="weight_specs",ne="weight_data",re="model_metadata";function ae(e){return{info:[Y,e,J].join(Q),topology:[Y,e,ee].join(Q),weightSpecs:[Y,e,te].join(Q),weightData:[Y,e,ne].join(Q),modelMetadata:[Y,e,re].join(Q)}}function se(e){for(const t of Object.values(e))window.localStorage.removeItem(t)}function oe(e){const t=e.split(Q);if(t.length<3)throw new Error(`Invalid key format: ${e}`);return t.slice(1,t.length-1).join(Q)}class ie{constructor(e){if(!(0,b.OB)().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=ae(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const t=JSON.stringify(e.modelTopology),n=JSON.stringify(e.weightSpecs),r=B(e);try{this.LS.setItem(this.keys.info,JSON.stringify(r)),this.LS.setItem(this.keys.topology,t),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,function(e){if(E)return S.from(e).toString("base64");const t=new Uint8Array(e);let n="";for(let e=0,r=t.length;e<r;e++)n+=String.fromCharCode(t[e]);return btoa(n)}(e.weightData));const a={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,signature:null!=e.signature?e.signature:void 0,userDefinedMetadata:null!=e.userDefinedMetadata?e.userDefinedMetadata:void 0,modelInitializer:null!=e.modelInitializer?e.modelInitializer:void 0,initializerSignature:null!=e.initializerSignature?e.initializerSignature:void 0,trainingConfig:null!=e.trainingConfig?e.trainingConfig:void 0};return this.LS.setItem(this.keys.modelMetadata,JSON.stringify(a)),{modelArtifactsInfo:r}}catch(e){throw se(this.keys),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${r.modelTopologyBytes}, weightSpecsBytes=${r.weightSpecsBytes}, weightDataBytes=${r.weightDataBytes}.`)}}}async load(){const e=JSON.parse(this.LS.getItem(this.keys.info));if(null==e)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==e.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const t={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=n;const r=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==r)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=r;const a=this.LS.getItem(this.keys.modelMetadata);if(null!=a){const e=JSON.parse(a);t.format=e.format,t.generatedBy=e.generatedBy,t.convertedBy=e.convertedBy,null!=e.signature&&(t.signature=e.signature),null!=e.userDefinedMetadata&&(t.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(t.modelInitializer=e.modelInitializer),null!=e.initializerSignature&&(t.initializerSignature=e.initializerSignature),null!=e.trainingConfig&&(t.trainingConfig=e.trainingConfig)}const s=this.LS.getItem(this.keys.weightData);if(null==s)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=function(e){if(E){const t=S.from(e,"base64");return t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength)}const t=atob(e),n=new Uint8Array(t.length);for(let e=0;e<t.length;++e)n.set([t.charCodeAt(e)],e);return n.buffer}(s),t}}ie.URL_SCHEME="localstorage://";const ue=e=>{return(0,b.OB)().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(ie.URL_SCHEME)?(t=e.slice(ie.URL_SCHEME.length),new ie(t)):null;var t};C.registerSaveRouter(ue),C.registerLoadRouter(ue);class le{constructor(){(0,N.hu)((0,b.OB)().getBool("IS_BROWSER"),(()=>"Current environment is not a web browser")),(0,N.hu)("undefined"==typeof window||void 0!==window.localStorage,(()=>"Current browser does not appear to support localStorage")),this.LS=window.localStorage}async listModels(){const e={},t=Y+Q,n=Q+J;for(let r=0;r<this.LS.length;++r){const a=this.LS.key(r);a.startsWith(t)&&a.endsWith(n)&&(e[oe(a)]=JSON.parse(this.LS.getItem(a)))}return e}async removeModel(e){var t;const n=ae(e=(t=e).startsWith(ie.URL_SCHEME)?t.slice(ie.URL_SCHEME.length):t);if(null==this.LS.getItem(n.info))throw new Error(`Cannot find model at path '${e}'`);const r=JSON.parse(this.LS.getItem(n.info));return se(n),r}}const ce="://";class pe{constructor(){this.managers={}}static getInstance(){return null==pe.instance&&(pe.instance=new pe),pe.instance}static registerManager(e,t){(0,N.hu)(null!=e,(()=>"scheme must not be undefined or null.")),e.endsWith(ce)&&(e=e.slice(0,e.indexOf(ce))),(0,N.hu)(e.length>0,(()=>"scheme must not be an empty string."));const n=pe.getInstance();(0,N.hu)(null==n.managers[e],(()=>`A model store manager is already registered for scheme '${e}'.`)),n.managers[e]=t}static getManager(e){const t=pe.getInstance().managers[e];if(null==t)throw new Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(pe.getInstance().managers)}}function de(e){if(-1===e.indexOf(ce))throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${pe.getSchemes().join(",")}`);return{scheme:e.split(ce)[0],path:e.split(ce)[1]}}async function he(e,t,n=!1){(0,N.hu)(e!==t,(()=>`Old path and new path are the same: '${e}'`));const r=C.getLoadHandlers(e);(0,N.hu)(r.length>0,(()=>`Copying failed because no load handler is found for source URL ${e}.`)),(0,N.hu)(r.length<2,(()=>`Copying failed because more than one (${r.length}) load handlers for source URL ${e}.`));const a=r[0],s=C.getSaveHandlers(t);(0,N.hu)(s.length>0,(()=>`Copying failed because no save handler is found for destination URL ${t}.`)),(0,N.hu)(s.length<2,(()=>`Copying failed because more than one (${r.length}) save handlers for destination URL ${t}.`));const o=s[0],i=de(e).scheme,u=de(e).path,l=i===de(e).scheme,c=await a.load();n&&l&&await pe.getManager(i).removeModel(u);const p=await o.save(c);return n&&!l&&await pe.getManager(i).removeModel(u),p.modelArtifactsInfo}async function me(){const e=pe.getSchemes(),t={};for(const n of e){const e=await pe.getManager(n).listModels();for(const r in e)t[n+ce+r]=e[r]}return t}async function fe(e){const t=de(e);return pe.getManager(t.scheme).removeModel(t.path)}async function ge(e,t){return he(e,t,!1)}async function ye(e,t){return he(e,t,!0)}class be{constructor(){this.messageName="setTimeoutCustom",this.functionRefs=[],this.handledMessageCount=0,this.hasEventListener=!1}fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Browser's encoder only supports utf-8, but got ${t}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}setTimeoutCustom(e,t){"undefined"!=typeof window&&(0,b.OB)().getBool("USE_SETTIMEOUTCUSTOM")?(this.functionRefs.push(e),setTimeout((()=>{window.postMessage({name:this.messageName,index:this.functionRefs.length-1},"*")}),t),this.hasEventListener||(this.hasEventListener=!0,window.addEventListener("message",(e=>{e.source===window&&e.data.name===this.messageName&&(e.stopPropagation(),(0,this.functionRefs[e.data.index])(),this.handledMessageCount++,this.handledMessageCount===this.functionRefs.length&&(this.functionRefs=[],this.handledMessageCount=0))}),!0))):setTimeout(e,t)}isTypedArray(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray}}if((0,b.OB)().get("IS_BROWSER")){(0,b.OB)().setPlatform("browser",new be);try{pe.registerManager(ie.URL_SCHEME,new le)}catch(e){}try{pe.registerManager(K.URL_SCHEME,new Z)}catch(e){}}let ke;(0,b.OB)().get("IS_NODE")&&!(0,b.OB)().get("IS_BROWSER")&&(0,b.OB)().setPlatform("node",new class{constructor(){this.util=n(6843),this.textEncoder=new this.util.TextEncoder}fetch(e,t){return null!=(0,b.OB)().global.fetch?(0,b.OB)().global.fetch(e,t):(null==ke&&(ke=n(327)),ke(e,t))}now(){const e=process.hrtime();return 1e3*e[0]+e[1]/1e6}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Node built-in encoder only supports utf-8, but got ${t}`);return this.textEncoder.encode(e)}decode(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)}isTypedArray(e){return this.util.types.isFloat32Array(e)||this.util.types.isInt32Array(e)||this.util.types.isUint8Array(e)||this.util.types.isUint8ClampedArray(e)}});var we=n(1744),ve=n(5875),Ne=n(1107),xe=n(4703),Se=n(1313);(0,h.wv)();const Te={buffer:we.f,cast:ve.p,clone:Ne.d,print:xe.S};(0,Se.Vp)(Te);var Ie=n(6021),_e=n(7571),Ee=n(2639),Ae=n(2805),Me=n(7346),De=n(6966),Fe=n(9635),$e=n(3184),Oe=n(2502);class Be{getClassName(){return this.constructor.className}static fromConfig(e,t){return new e(t)}}class Re{constructor(){this.classNameMap={}}static getMap(){return null==Re.instance&&(Re.instance=new Re),Re.instance}static register(e){Re.getMap().classNameMap[e.className]=[e,e.fromConfig]}}function Ve(e){(0,N.hu)(null!=e.className,(()=>"Class being registered does not have the static className property defined.")),(0,N.hu)("string"==typeof e.className,(()=>"className is required to be a string, but got type "+typeof e.className)),(0,N.hu)(e.className.length>0,(()=>"Class being registered has an empty-string as its className, which is disallowed.")),Re.register(e)}class Ce extends Be{minimize(e,t=!1,n){const{value:r,grads:a}=this.computeGradients(e,n);if(null!=n){const e=n.map((e=>({name:e.name,tensor:a[e.name]})));this.applyGradients(e)}else this.applyGradients(a);return(0,Ie.B9)(a),t?r:(r.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(e,t){return(0,$e.pn)(e,t)}dispose(){null!=this.iterations_&&(0,Ie.B9)(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:(0,Oe.i)(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(e){throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`)}async extractIterations(e){return this.iterations_=(await e[0].tensor.data())[0],e.slice(1)}}Object.defineProperty(Ce,Symbol.hasInstance,{value:e=>null!=e.minimize&&null!=e.computeGradients&&null!=e.applyGradients});class ze extends Ce{constructor(e,t,n=null){super(),this.learningRate=e,this.rho=t,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=h.BV.backend.epsilon())}static get className(){return"Adadelta"}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=h.BV.registeredVariables[t];null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:`${t}/accum_grad`,variable:(0,Ie.lu)((()=>(0,Fe.P)(r).variable(!1)))}),null==this.accumulatedUpdates[n]&&(this.accumulatedUpdates[n]={originalName:`${t}/accum_var`,variable:(0,Ie.lu)((()=>(0,Fe.P)(r).variable(!1)))});const a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;const s=this.accumulatedGrads[n].variable,o=this.accumulatedUpdates[n].variable;(0,Ie.lu)((()=>{const e=(0,_e.I)((0,Ae.d)(s,this.rho),(0,Ae.d)((0,De.h)(a),1-this.rho)),t=(0,Ae.d)((0,Ee.h)((0,Me._)((0,_e.I)(o,this.epsilon)),(0,Me._)((0,_e.I)(s,this.epsilon))),a),n=(0,_e.I)((0,Ae.d)(o,this.rho),(0,Ae.d)((0,De.h)(t),1-this.rho));s.assign(e),o.assign(n);const i=(0,_e.I)((0,Ae.d)(t,-this.learningRate),r);r.assign(i)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&((0,Ie.B9)(this.accumulatedGrads.map((e=>e.variable))),(0,Ie.B9)(this.accumulatedUpdates.map((e=>e.variable))))}async getWeights(){const e=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){const t=(e=await this.extractIterations(e)).length/2;this.accumulatedGrads=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(!1)}))),this.accumulatedUpdates=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.rho,t.epsilon)}}var Pe=n(5210);class Le extends Ce{constructor(e,t=.1){super(),this.learningRate=e,this.initialAccumulatorValue=t,this.accumulatedGrads=[]}static get className(){return"Adagrad"}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=h.BV.registeredVariables[t];if(null==this.accumulatedGrads[n]){const e=!1;this.accumulatedGrads[n]={originalName:`${t}/accumulator`,variable:(0,Ie.lu)((()=>(0,Pe.h)(r.shape,this.initialAccumulatorValue).variable(e)))}}const a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;const s=this.accumulatedGrads[n].variable;(0,Ie.lu)((()=>{const e=(0,_e.I)(s,(0,De.h)(a));s.assign(e);const t=(0,_e.I)((0,Ae.d)((0,Ee.h)(a,(0,Me._)((0,_e.I)(e,h.BV.backend.epsilon()))),-this.learningRate),r);r.assign(t)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&(0,Ie.B9)(this.accumulatedGrads.map((e=>e.variable)))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),this.accumulatedGrads=e.map((e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(e,t){return new e(t.learningRate,t.initialAccumulatorValue)}}var He=n(3788),We=n(6885);class Ge extends Ce{constructor(e,t,n,r=null){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=r,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],(0,Ie.lu)((()=>{this.accBeta1=(0,Oe.i)(t).variable(),this.accBeta2=(0,Oe.i)(n).variable()})),null==r&&(this.epsilon=h.BV.backend.epsilon())}static get className(){return"Adam"}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);(0,Ie.lu)((()=>{const n=(0,We.l)(1,this.accBeta1),r=(0,We.l)(1,this.accBeta2);t.forEach(((t,a)=>{const s=h.BV.registeredVariables[t];null==this.accumulatedFirstMoment[a]&&(this.accumulatedFirstMoment[a]={originalName:`${t}/m`,variable:(0,Ie.lu)((()=>(0,Fe.P)(s).variable(!1)))}),null==this.accumulatedSecondMoment[a]&&(this.accumulatedSecondMoment[a]={originalName:`${t}/v`,variable:(0,Ie.lu)((()=>(0,Fe.P)(s).variable(!1)))});const o=Array.isArray(e)?e[a].tensor:e[t];if(null==o)return;const i=this.accumulatedFirstMoment[a].variable,u=this.accumulatedSecondMoment[a].variable,l=(0,_e.I)((0,Ae.d)(i,this.beta1),(0,Ae.d)(o,1-this.beta1)),c=(0,_e.I)((0,Ae.d)(u,this.beta2),(0,Ae.d)((0,De.h)(o),1-this.beta2)),p=(0,Ee.h)(l,n),d=(0,Ee.h)(c,r);i.assign(l),u.assign(c);const m=(0,_e.I)((0,Ae.d)((0,Ee.h)(p,(0,_e.I)((0,Me._)(d),this.epsilon)),-this.learningRate),s);s.assign(m)})),this.accBeta1.assign((0,Ae.d)(this.accBeta1,this.beta1)),this.accBeta2.assign((0,Ae.d)(this.accBeta2,this.beta2))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&(0,Ie.B9)(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedSecondMoment&&(0,Ie.B9)(this.accumulatedSecondMoment.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),(0,Ie.lu)((()=>{this.accBeta1.assign((0,He.s)(this.beta1,this.iterations_+1)),this.accBeta2.assign((0,He.s)(this.beta2,this.iterations_+1))}));const t=e.length/2;this.accumulatedFirstMoment=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(!1)}))),this.accumulatedSecondMoment=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon)}}var Ue=n(6720),qe=n(3171);class je extends Ce{constructor(e,t,n,r=null,a=0){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=r,this.decay=a,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],(0,Ie.lu)((()=>{this.iteration=(0,Oe.i)(0).variable(),this.accBeta1=(0,Oe.i)(t).variable()})),null==r&&(this.epsilon=h.BV.backend.epsilon())}static get className(){return"Adamax"}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);(0,Ie.lu)((()=>{const n=(0,We.l)(1,this.accBeta1),r=(0,Ee.h)(-this.learningRate,(0,_e.I)((0,Ae.d)(this.iteration,this.decay),1));t.forEach(((t,a)=>{const s=h.BV.registeredVariables[t];null==this.accumulatedFirstMoment[a]&&(this.accumulatedFirstMoment[a]={originalName:`${t}/m`,variable:(0,Fe.P)(s).variable(!1)}),null==this.accumulatedWeightedInfNorm[a]&&(this.accumulatedWeightedInfNorm[a]={originalName:`${t}/v`,variable:(0,Fe.P)(s).variable(!1)});const o=Array.isArray(e)?e[a].tensor:e[t];if(null==o)return;const i=this.accumulatedFirstMoment[a].variable,u=this.accumulatedWeightedInfNorm[a].variable,l=(0,_e.I)((0,Ae.d)(i,this.beta1),(0,Ae.d)(o,1-this.beta1)),c=(0,Ae.d)(u,this.beta2),p=(0,Ue.W)(o),d=(0,qe.g)(c,p);i.assign(l),u.assign(d);const m=(0,_e.I)((0,Ae.d)((0,Ee.h)(r,n),(0,Ee.h)(l,(0,_e.I)(d,this.epsilon))),s);s.assign(m)})),this.iteration.assign((0,_e.I)(this.iteration,1)),this.accBeta1.assign((0,Ae.d)(this.accBeta1,this.beta1))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&(0,Ie.B9)(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedWeightedInfNorm&&(0,Ie.B9)(this.accumulatedWeightedInfNorm.map((e=>e.variable)))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(e){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon,t.decay)}}class Ke extends Ce{constructor(e){super(),this.learningRate=e,this.setLearningRate(e)}static get className(){return"SGD"}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;const a=h.BV.registeredVariables[t];(0,Ie.lu)((()=>{const e=(0,_e.I)((0,Ae.d)(this.c,r),a);a.assign(e)}))})),this.incrementIterations()}setLearningRate(e){this.learningRate=e,null!=this.c&&this.c.dispose(),this.c=(0,Ie.Cn)((0,Oe.i)(-e))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(e){if(0!==(e=await this.extractIterations(e)).length)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(e,t){return new e(t.learningRate)}}class Xe extends Ke{constructor(e,t,n=!1){super(e),this.learningRate=e,this.momentum=t,this.useNesterov=n,this.accumulations=[],this.m=(0,Oe.i)(this.momentum)}static get className(){return"Momentum"}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=h.BV.registeredVariables[t];if(null==this.accumulations[n]){const e=!1;this.accumulations[n]={originalName:`${t}/momentum`,variable:(0,Ie.lu)((()=>(0,Fe.P)(r).variable(e)))}}const a=this.accumulations[n].variable,s=Array.isArray(e)?e[n].tensor:e[t];null!=s&&(0,Ie.lu)((()=>{let e;const t=(0,_e.I)((0,Ae.d)(this.m,a),s);e=this.useNesterov?(0,_e.I)((0,Ae.d)(this.c,(0,_e.I)(s,(0,Ae.d)(t,this.m))),r):(0,_e.I)((0,Ae.d)(this.c,t),r),a.assign(t),r.assign(e)}))})),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&(0,Ie.B9)(this.accumulations.map((e=>e.variable)))}setMomentum(e){this.momentum=e}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),this.accumulations=e.map((e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(e,t){return new e(t.learningRate,t.momentum,t.useNesterov)}}class Ze extends Ce{constructor(e,t=.9,n=0,r=null,a=!1){if(super(),this.learningRate=e,this.decay=t,this.momentum=n,this.epsilon=r,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=a,null==r&&(this.epsilon=h.BV.backend.epsilon()),null==e)throw new Error("learningRate for RMSPropOptimizer must be defined.")}static get className(){return"RMSProp"}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=h.BV.registeredVariables[t],a=!1;null==this.accumulatedMeanSquares[n]&&(this.accumulatedMeanSquares[n]={originalName:`${t}/rms`,variable:(0,Ie.lu)((()=>(0,Fe.P)(r).variable(a)))}),null==this.accumulatedMoments[n]&&(this.accumulatedMoments[n]={originalName:`${t}/momentum`,variable:(0,Ie.lu)((()=>(0,Fe.P)(r).variable(a)))}),null==this.accumulatedMeanGrads[n]&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:`${t}/mg`,variable:(0,Ie.lu)((()=>(0,Fe.P)(r).variable(a)))});const s=Array.isArray(e)?e[n].tensor:e[t];if(null==s)return;const o=this.accumulatedMeanSquares[n].variable,i=this.accumulatedMoments[n].variable;(0,Ie.lu)((()=>{const e=(0,_e.I)((0,Ae.d)(o,this.decay),(0,Ae.d)((0,De.h)(s),1-this.decay));if(this.centered){const t=this.accumulatedMeanGrads[n].variable,a=(0,_e.I)((0,Ae.d)(t,this.decay),(0,Ae.d)(s,1-this.decay)),u=(0,Ee.h)((0,Ae.d)(s,this.learningRate),(0,Me._)((0,We.l)(e,(0,_e.I)((0,De.h)(a),this.epsilon)))),l=(0,_e.I)((0,Ae.d)(i,this.momentum),u);o.assign(e),t.assign(a),i.assign(l);const c=(0,We.l)(r,l);r.assign(c)}else{const e=(0,_e.I)((0,Ae.d)(o,this.decay),(0,Ae.d)((0,De.h)(s),1-this.decay)),t=(0,_e.I)((0,Ae.d)(i,this.momentum),(0,Ee.h)((0,Ae.d)(s,this.learningRate),(0,Me._)((0,_e.I)(e,this.epsilon))));o.assign(e),i.assign(t);const n=(0,We.l)(r,t);r.assign(n)}}))})),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&(0,Ie.B9)(this.accumulatedMeanSquares.map((e=>e.variable))),null!=this.accumulatedMeanGrads&&this.centered&&(0,Ie.B9)(this.accumulatedMeanGrads.map((e=>e.variable))),null!=this.accumulatedMoments&&(0,Ie.B9)(this.accumulatedMoments.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&e.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);const t=this.centered?e.length/3:e.length/2,n=!1;this.accumulatedMeanSquares=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.accumulatedMoments=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.centered&&(this.accumulatedMeanGrads=e.slice(2*t,3*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(e,t){return new e(t.learningRate,t.decay,t.momentum,t.epsilon,t.centered)}}const Qe=[ze,Le,Ge,je,Xe,Ze,Ke];function Ye(e){return new Promise((e=>setTimeout(e))).then(e)}class Je{constructor(e){if(!(0,b.OB)().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(Je.URL_SCHEME)&&(e=e.slice(Je.URL_SCHEME.length)),null!=e&&0!==e.length||(e="model"),this.modelJsonFileName=e+".json",this.weightDataFileName=e+".weights.bin"}async save(e){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const t=window.URL.createObjectURL(new Blob([e.weightData],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const n=F(e,[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}]),r=window.URL.createObjectURL(new Blob([JSON.stringify(n)],{type:"application/json"})),a=null==this.modelJsonAnchor?document.createElement("a"):this.modelJsonAnchor;if(a.download=this.modelJsonFileName,a.href=r,await Ye((()=>a.dispatchEvent(new MouseEvent("click")))),null!=e.weightData){const e=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;e.download=this.weightDataFileName,e.href=t,await Ye((()=>e.dispatchEvent(new MouseEvent("click"))))}return{modelArtifactsInfo:B(e)}}}}Je.URL_SCHEME="downloads://";class et{constructor(e){if(null==e||e.length<1)throw new Error(`When calling browserFiles, at least 1 file is required, but received ${e}`);this.jsonFile=e[0],this.weightsFiles=e.slice(1)}async load(){return new Promise(((e,t)=>{const n=new FileReader;n.onload=n=>{const r=JSON.parse(n.target.result),a=r.modelTopology;if(null==a)return void t(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));if(null==r.weightsManifest)return void t(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));if(0===this.weightsFiles.length)return void e({modelTopology:a});const s=O(r,(e=>this.loadWeights(e)));e(s)},n.onerror=e=>t(`Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),n.readAsText(this.jsonFile)}))}loadWeights(e){const t=[],n=[];for(const r of e)t.push(...r.weights),n.push(...r.paths);const r=this.checkManifestAndWeightFiles(e),a=n.map((e=>this.loadWeightsFile(e,r[e])));return Promise.all(a).then((e=>[t,M(e)]))}loadWeightsFile(e,t){return new Promise(((n,r)=>{const a=new FileReader;a.onload=e=>{const t=e.target.result;n(t)},a.onerror=t=>r(`Failed to weights data from file of path '${e}'.`),a.readAsArrayBuffer(t)}))}checkManifestAndWeightFiles(e){const t=[],n=this.weightsFiles.map((e=>D(e.name))),r={};for(const a of e)a.paths.forEach((e=>{const a=D(e);if(-1!==t.indexOf(a))throw new Error(`Duplicate file basename found in weights manifest: '${a}'`);if(t.push(a),-1===n.indexOf(a))throw new Error(`Weight file with basename '${a}' is not provided.`);r[e]=this.weightsFiles[n.indexOf(a)]}));if(t.length!==this.weightsFiles.length)throw new Error(`Mismatch in the number of files in weights manifest (${t.length}) and the number of weight files provided (${this.weightsFiles.length}).`);return r}}function tt(e){return new et(e)}function nt(e,t,n,r){!function(e){(0,N.hu)(null!=e&&Array.isArray(e)&&e.length>0,(()=>"promises must be a none empty array"))}(e),function(e,t){(0,N.hu)(e>=0&&e<=1,(()=>`Progress fraction must be in range [0, 1], but got startFraction ${e}`)),(0,N.hu)(t>=0&&t<=1,(()=>`Progress fraction must be in range [0, 1], but got endFraction ${t}`)),(0,N.hu)(t>=e,(()=>`startFraction must be no more than endFraction, but got startFraction ${e} and endFraction ${t}`))}(n=null==n?0:n,r=null==r?1:r);let a=0;return Promise.all(e.map((s=>(s.then((s=>{const o=n+ ++a/e.length*(r-n);return t(o),s})),s))))}async function rt(e,t){null==t&&(t={});const n=null==t.fetchFunc?(0,b.OB)().platform.fetch:t.fetchFunc,r=e.map((e=>n(e,t.requestInit,{isBinary:!0}))),a=(null==t.onProgress?await Promise.all(r):await nt(r,t.onProgress,0,.5)).map((e=>e.arrayBuffer()));return null==t.onProgress?await Promise.all(a):await nt(a,t.onProgress,.5,1)}async function at(e,t="",n,r){return st((e=>rt(e,{requestInit:r})))(e,t,n)}function st(e){return async(t,n="",r)=>{const a=t.map((()=>!1)),s={},o=null!=r?r.map((()=>!1)):[],i=[];if(t.forEach(((e,t)=>{let n=0;e.weights.forEach((e=>{const u="quantization"in e?e.quantization.dtype:e.dtype,l=x[u]*N.NA(e.shape),c=()=>{a[t]=!0,null==s[t]&&(s[t]=[]),s[t].push({manifestEntry:e,groupOffset:n,sizeBytes:l})};null!=r?r.forEach(((t,n)=>{t===e.name&&(c(),o[n]=!0)})):c(),i.push(e.name),n+=l}))})),!o.every((e=>e))){const e=r.filter(((e,t)=>!o[t]));throw new Error(`Could not find weights in manifest with names: ${e.join(", ")}. \nManifest JSON has weights with names: ${i.join(", ")}.`)}const u=a.reduce(((e,t,n)=>(t&&e.push(n),e)),[]),l=[];u.forEach((e=>{t[e].paths.forEach((e=>{const t=n+(n.endsWith("/")?"":"/")+e;l.push(t)}))}));const c=await e(l),p={};let d=0;return u.forEach((e=>{const n=t[e].paths.length;let r=0;for(let e=0;e<n;e++)r+=c[d+e].byteLength;const a=new ArrayBuffer(r),o=new Uint8Array(a);let i=0;for(let e=0;e<n;e++){const t=new Uint8Array(c[d+e]);o.set(t,i),i+=t.byteLength}s[e].forEach((e=>{const t=I(a.slice(e.groupOffset,e.groupOffset+e.sizeBytes),[e.manifestEntry]);for(const e in t)p[e]=t[e]})),d+=n})),p}}C.registerSaveRouter((e=>(0,b.OB)().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Je.URL_SCHEME)?function(e="model"){return new Je(e)}(e.slice(Je.URL_SCHEME.length)):null));class ot{constructor(e,t){if(this.DEFAULT_METHOD="POST",null==t&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.onProgress=t.onProgress,this.weightUrlConverter=t.weightUrlConverter,null!=t.fetchFunc?((0,N.hu)("function"==typeof t.fetchFunc,(()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)")),this.fetch=t.fetchFunc):this.fetch=(0,b.OB)().platform.fetch,(0,N.hu)(null!=e&&e.length>0,(()=>"URL path for http must not be null, undefined or empty.")),Array.isArray(e)&&(0,N.hu)(2===e.length,(()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`)),this.path=e,null!=t.requestInit&&null!=t.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{}}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);t.body=new FormData;const n=F(e,[{paths:["./model.weights.bin"],weights:e.weightSpecs}]);t.body.append("model.json",new Blob([JSON.stringify(n)],{type:"application/json"}),"model.json"),null!=e.weightData&&t.body.append("model.weights.bin",new Blob([e.weightData],{type:"application/octet-stream"}),"model.weights.bin");const r=await this.fetch(this.path,t);if(r.ok)return{modelArtifactsInfo:B(e),responses:[r]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${r.status}.`)}async load(){const e=await this.fetch(this.path,this.requestInit);if(!e.ok)throw new Error(`Request to ${this.path} failed with status code ${e.status}. Please verify this URL points to the model JSON of the model to load.`);let t;try{t=await e.json()}catch(e){let t=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?t+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":t+=" Please make sure the server is serving valid JSON for this request.",new Error(t)}const n=t.modelTopology,r=t.weightsManifest;if(null==n&&null==r)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);return O(t,(e=>this.loadWeights(e)))}async loadWeights(e){const t=Array.isArray(this.path)?this.path[1]:this.path,[n,r]=function(e){const t=e.lastIndexOf("/"),n=e.lastIndexOf("?");return[e.substring(0,t)+"/",n>t?e.substring(n):""]}(t),a=this.weightPathPrefix||n,s=R(e),o=[],i=[];for(const t of e)for(const e of t.paths)null!=this.weightUrlConverter?i.push(this.weightUrlConverter(e)):o.push(a+e+r);return this.weightUrlConverter&&o.push(...await Promise.all(i)),[s,M(await rt(o,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress}))]}}function it(e){return null!=e.match(ot.URL_SCHEME_REGEX)}ot.URL_SCHEME_REGEX=/^https?:\/\//;const ut=(e,t)=>{if("undefined"==typeof fetch&&(null==t||null==t.fetchFunc))return null;{let n=!0;if(n=Array.isArray(e)?e.every((e=>it(e))):it(e),n)return lt(e,t)}return null};function lt(e,t){return new ot(e,t)}function ct(e,t){return lt(e,t)}C.registerSaveRouter(ut),C.registerLoadRouter(ut);class pt{constructor(e){this.modelArtifacts=e}load(){return this.modelArtifacts}}class dt{constructor(e){this.saveHandler=e}save(e){return this.saveHandler(e)}}class ht{constructor(e){e.load&&(this.load=()=>Promise.resolve(e.load())),e.save&&(this.save=t=>Promise.resolve(e.save(t)))}}function mt(e,t,n,r){const a=arguments;return new ht(ft(...a))}function ft(e,t,n,r){return 1===arguments.length?null!=e.modelTopology||null!=e.weightSpecs?new pt(e):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new pt({modelTopology:e})):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new pt({modelTopology:e,weightSpecs:t,weightData:n,trainingConfig:r}))}function gt(e){return new dt(e)}function yt(e){return new dt(e)}var bt=n(8516),kt=n(8249),wt=n(7910),vt=n(128),Nt=n(6336);const xt=(0,vt.op)({confusionMatrix_:function(e,t,n){const r=(0,bt._1)(e,"labels","confusionMatrix"),a=(0,bt._1)(t,"predictions","confusionMatrix");N.hu(null==n||n>0&&Number.isInteger(n),(()=>`If provided, numClasses must be a positive integer, but got ${n}`)),N.hu(1===r.rank,(()=>`Expected the rank of labels to be 1, but got ${r.rank}`)),N.hu(1===a.rank,(()=>`Expected the rank of predictions to be 1, but got ${a.rank}`)),N.hu(r.shape[0]===a.shape[0],(()=>`Mismatch in the number of examples: ${r.shape[0]} vs. ${a.shape[0]}. Labels and predictions should have the same number of elements.`)),N.hu(n>0&&Number.isInteger(n),(()=>`numClasses is required to be a positive integer, but got ${n}`));const s=(0,wt.l)((0,ve.p)(r,"int32"),n),o=(0,wt.l)((0,ve.p)(a,"int32"),n),i=(0,Nt.p)(s),u=(0,kt.O)(i,o);return(0,ve.p)(u,"int32")}});var St=n(2011),Tt=n(5202),It=n(8307),_t=n(717);let Et;function At(e,t=3){if(t>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==e)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let n=!1,r=!1,a=!1,s=!1,o=!1,i=!1;if(e.data instanceof Uint8Array)n=!0;else if("undefined"!=typeof ImageData&&e instanceof ImageData)r=!0;else if("undefined"!=typeof HTMLVideoElement&&e instanceof HTMLVideoElement)a=!0;else if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement)s=!0;else if(null!=e.getContext)o=!0;else{if(!("undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap))throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${e.constructor.name}`);i=!0}if(null!=(0,It.pI)(Tt.eBW,h.BV.backendName)){const n={pixels:e},r={numChannels:t};return h.BV.runKernel(Tt.eBW,n,r)}const[u,l]=a?[e.videoWidth,e.videoHeight]:[e.width,e.height];let c,p;if(o)c=e.getContext("2d").getImageData(0,0,u,l).data;else if(r||n)c=e.data;else if(s||a||i){if(null==Et)if("undefined"==typeof document){if("undefined"==typeof OffscreenCanvas||"undefined"==typeof OffscreenCanvasRenderingContext2D)throw new Error("Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.");Et=new OffscreenCanvas(1,1).getContext("2d")}else Et=document.createElement("canvas").getContext("2d",{willReadFrequently:!0});Et.canvas.width=u,Et.canvas.height=l,Et.drawImage(e,0,0,u,l),c=Et.getImageData(0,0,u,l).data}if(4===t)p=new Int32Array(c);else{const e=u*l;p=new Int32Array(e*t);for(let n=0;n<e;n++)for(let e=0;e<t;++e)p[n*t+e]=c[4*n+e]}const d=[l,u,t];return(0,_t.w)(p,d,"int32")}async function Mt(e,t=3){let n=null;if((0,b.OB)().getBool("WRAP_TO_IMAGEBITMAP")&&function(e){return"undefined"!=typeof window&&"undefined"!=typeof ImageBitmap&&window.hasOwnProperty("createImageBitmap")&&!(e instanceof ImageBitmap)&&function(e){return null!=e&&0!==e.width&&0!==e.height}(e)&&!function(e){return null!=e&&e.data instanceof Uint8Array}(e)}(e)){let t;try{t=await createImageBitmap(e,{premultiplyAlpha:"none"})}catch(e){t=null}n=null!=t&&t.width===e.width&&t.height===e.height?t:e}else n=e;return At(n,t)}async function Dt(e,t){let n=(0,bt._1)(e,"img","toPixels");if(!(e instanceof Se.es)){const e=n;n=(0,ve.p)(e,"int32"),e.dispose()}if(2!==n.rank&&3!==n.rank)throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${n.rank}.`);const[r,a]=n.shape.slice(0,2),s=2===n.rank?1:n.shape[2];if(s>4||2===s)throw new Error(`toPixels only supports depth of size 1, 3 or 4 but got ${s}`);if("float32"!==n.dtype&&"int32"!==n.dtype)throw new Error(`Unsupported type for toPixels: ${n.dtype}. Please use float32 or int32 tensors.`);const o=await n.data(),i="float32"===n.dtype?255:1,u=new Uint8ClampedArray(a*r*4);for(let e=0;e<r*a;++e){const t=[0,0,0,255];for(let r=0;r<s;r++){const a=o[e*s+r];if("float32"===n.dtype){if(a<0||a>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${a}.`)}else if("int32"===n.dtype&&(a<0||a>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${a}.`);1===s?(t[0]=a*i,t[1]=a*i,t[2]=a*i):t[r]=a*i}const r=4*e;u[r+0]=Math.round(t[0]),u[r+1]=Math.round(t[1]),u[r+2]=Math.round(t[2]),u[r+3]=Math.round(t[3])}if(null!=t){t.width=a,t.height=r;const e=t.getContext("2d"),n=new ImageData(u,a,r);e.putImageData(n,0,0)}return n!==e&&n.dispose(),u}const Ft=(0,vt.op)({fromPixels_:At});function $t(e,t){const n=e.shape.length,r=t.shape.length;if(n<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${n}.`);if(r<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${r}.`);if("int32"!==t.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[r-1]>n)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[r-1]} vs. ${n}`);if(0===(0,N.NA)(e.shape))throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${e.shape}.`);const a=t.shape,s=a[a.length-1];let o=1;for(let e=0;e<a.length-1;++e)o*=a[e];const i=e.shape,u=a.slice();u.pop();let l=1;for(let e=s;e<n;++e)l*=i[e],u.push(i[e]);const c=[...(0,N.e3)(e.shape).map((e=>e/l)),1].slice(0,s);return[u,o,l,c]}var Ot=n(6576),Bt=n(1269),Rt=n(9201),Vt=n(4003);const Ct=.1;function zt(e,t,n){return null==n&&(n=Pt()),Lt(e,t,((e,t)=>Ut(e,t,n)))}function Pt(){return 32===h.BV.backend.floatPrecision()?.001:Ct}function Lt(e,t,n){let r=!0;if(((0,Vt.isTypedArray)(e)||(0,Vt.isTypedArray)(t))&&(r=!1),(0,Vt.isTypedArray)(e)&&(0,Vt.isTypedArray)(t)&&(r=!0),r){const n=e.constructor.name,r=t.constructor.name;if(n!==r)throw new Error(`Arrays are of different type. Actual: ${n}. Expected: ${r}`)}if(Array.isArray(e)&&Array.isArray(t)){const n=(0,bt.C)(e),r=(0,bt.C)(t);if(!(0,N.cO)(n,r))throw new Error(`Arrays have different shapes. Actual: [${n}]. Expected: [${r}]`)}const a=(0,Vt.isTypedArray)(e)?e:(0,Vt.flatten)(e),s=(0,Vt.isTypedArray)(t)?t:(0,Vt.flatten)(t);if(a.length!==s.length)throw new Error(`Arrays have different lengths actual: ${a.length} vs expected: ${s.length}.\nActual:   ${a}.\nExpected: ${s}.`);for(let e=0;e<s.length;++e){const t=a[e],r=s[e];if(!n(t,r))throw new Error(`Arrays differ: actual[${e}] = ${t}, expected[${e}] = ${r}.\nActual:   ${a}.\nExpected: ${s}.`)}"undefined"!=typeof expect&&expect().nothing()}function Ht(e,t){e().then((()=>t.fail()),(()=>t())),"undefined"!=typeof expect&&expect().nothing()}function Wt(e,t){const n="string"==typeof t||"number"==typeof t||"boolean"==typeof t?[t]:t;return(0,N.HD)(e)||(0,N.HD)(e[0])||(0,N.HD)(t)||(0,N.HD)(t[0])?Lt(e,n,((e,t)=>e==t)):Lt(e,t,((e,t)=>Ut(e,t,0)))}function Gt(e,t,n){if(null==n&&(n=Pt()),!Ut(e,t,n))throw new Error(`Numbers differ: actual === ${e}, expected === ${t}`);"undefined"!=typeof expect&&expect().nothing()}function Ut(e,t,n){return!isFinite(e)&&!isFinite(t)||!(isNaN(e)||isNaN(t)||Math.abs(e-t)>n)}function qt(e,t,n){for(let r=0;r<e.length;r++)if(e[r]<t||e[r]>n)throw new Error(`Value out of range:${e[r]} low: ${t}, high: ${n}`)}function jt(e,t){const n=new Float32Array(e),r=new Float32Array(t);if(n.length!==r.length)throw new Error(`Expected ArrayBuffer to be of length ${r.length}, but it was ${n.length}`);for(let e=0;e<r.length;e++)if(n[e]!==r[e])throw new Error(`Expected ArrayBuffer value at ${e} to be ${r[e]} but got ${n[e]} instead`)}function Kt(e){for(let t=0;t<e.length;t++){const n=e[t];Array.isArray(n)?Kt(n):e[t]=(0,Vt.encodeString)(n)}return e}function Xt(e){const t=document.createElement("video");return"playsInline"in t&&(t.playsInline=!0),t.muted=!0,t.loop=!0,t.style.position="fixed",t.style.left="0px",t.style.top="0px",t.preload="auto",t.appendChild(e),new Promise((e=>{t.addEventListener("loadeddata",(n=>e(t))),t.load()}))}async function Zt(e){await e.play(),"requestVideoFrameCallback"in e&&await new Promise((t=>{e.requestVideoFrameCallback(t)}))}const Qt="4.2.0";class Yt{static sgd(e){return new Ke(e)}static momentum(e,t,n=!1){return new Xe(e,t,n)}static rmsprop(e,t=.9,n=0,r=null,a=!1){return new Ze(e,t,n,r,a)}static adam(e=.001,t=.9,n=.999,r=null){return new Ge(e,t,n,r)}static adadelta(e=.001,t=.95,n=null){return new ze(e,t,n)}static adamax(e=.002,t=.9,n=.999,r=null,a=0){return new je(e,t,n,r,a)}static adagrad(e,t=.1){return new Le(e,t)}}var Jt=n(7139),en=n(886),tn=n(312);const nn=Yt,rn="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate?setImmediate:e=>e();function an(){return new Promise((e=>rn((()=>e()))))}var sn=n(7704);function on(e,t){const n=e[0].length;e.forEach(((e,t)=>{N.hu(e.length===n,(()=>`Error in concat${n}D: rank of tensors[${t}] must be the same as the rank of the rest (${n})`))})),N.hu(t>=0&&t<n,(()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`));const r=e[0];e.forEach(((e,a)=>{for(let s=0;s<n;s++)N.hu(s===t||e[s]===r[s],(()=>`Error in concat${n}D: Shape of tensors[${a}] (${e}) does not match the shape of the rest (${r}) along the non-concatenated axis ${a}.`))}))}function un(e,t){const n=e[0].slice();for(let r=1;r<e.length;r++)n[t]+=e[r][t];return n}var ln,cn=n(1129),pn=n(8474);function dn(e,t,n){let r=new Array;if(null==n&&null==t)return r;if(null==t)for(;r.length<e+n.length;)r.push(-1);else r=t.slice();if(null==n)return r;if(e+n.length!==r.length)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.rank = ${e+n.length}, but shape.rank = ${r.length}`);for(let a=1;a<n.length;++a){const s=n[a],o=r[r.length-n.length+a],i=r[o];if(s>=0)if(i>=0){if(i!==s)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.shape[${a+e}] = ${s} but shape[${a+e}] = ${i}`)}else r[o]=s}return r}function hn(e){const t={FIRST_DIM_SIZE:ln.FIRST_DIM_SIZE,VALUE_ROWIDS:ln.VALUE_ROWIDS,ROW_LENGTHS:ln.ROW_LENGTHS,ROW_SPLITS:ln.ROW_SPLITS,ROW_LIMITS:ln.ROW_LIMITS,ROW_STARTS:ln.ROW_STARTS},n=[];for(const r of e){if(!(r in t))break;n.push(t[r])}return n}function mn(e){return 0===e.length?0:e[0]===ln.FIRST_DIM_SIZE?e.length-1:e.length}function fn(e,t){if(null==e||null==t)return;const n=e.length,r=t.length;if(n>=r)throw new Error(`defaultValue.shape=${e} and ragged tensor flatValues.shape=${t}, are incompatible: defaultValue.rank = ${n} must be less than ragged tensor input flatValues.rank = ${r})`);for(let a=0;a<Math.min(n,r-1);++a){const n=e[a],r=t[a+1];if(n>=0&&r>=0&&1!==n&&n!==r)throw new Error(`defaultValue.shape=${e}, and ragged tensor input flatValues.shape=${t} are incompatible: defaultValue.shape[${a-e.length}] = ${n} but ragged tensor input.flatValues.shape[${a-e.length}] = ${r}`)}}!function(e){e[e.FIRST_DIM_SIZE=0]="FIRST_DIM_SIZE",e[e.VALUE_ROWIDS=1]="VALUE_ROWIDS",e[e.ROW_LENGTHS=2]="ROW_LENGTHS",e[e.ROW_SPLITS=3]="ROW_SPLITS",e[e.ROW_LIMITS=4]="ROW_LIMITS",e[e.ROW_STARTS=5]="ROW_STARTS"}(ln||(ln={}));const gn=30;function yn(e){return e<=gn?e:(0,N.jP)(e,Math.floor(Math.sqrt(e)))}function bn(e,t,n){return[n*("number"==typeof e?e:e[0]),t*("number"==typeof e?e:e[1])]}function kn(e,t,n,r=!0){let a=[];if(r)a=a.concat(t.slice(0)),a.push(e[0]/n),a=a.concat(e.slice(1));else{a=a.concat(e[0]);const n=t.length;for(let r=0;r<n;++r)a=a.concat([e[r+1]/t[r],t[r]]);a=a.concat(e.slice(n+1))}return a}function wn(e,t,n=!0){const r=[];if(n){r.push(t);for(let n=t+1;n<e;++n)n<=2*t?(r.push(n),r.push(n-(t+1))):r.push(n)}else{const n=[],a=[];for(let r=1;r<e;++r)r>=2*t+1||r%2==1?a.push(r):n.push(r);r.push(...n),r.push(0),r.push(...a)}return r}function vn(e,t,n,r=!0){const a=[];r?a.push(e[0]/n):a.push(e[0]*n);for(let n=1;n<e.length;++n)n<=t.length?r?a.push(t[n-1]*e[n]):a.push(e[n]/t[n-1]):a.push(e[n]);return a}function Nn(e,t){const n=[0];for(let r=0;r<t;++r)n.push(e[r][0]);return n}function xn(e,t,n){const r=e.slice(0,1);for(let a=0;a<n;++a)r.push(e[a+1]-t[a][0]-t[a][1]);return r}var Sn=n(141);const Tn=.3275911,In=.254829592,_n=-.284496736,En=1.421413741,An=-1.453152027,Mn=1.061405429;var Dn=n(56);function Fn(e,t){if(e.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${e.length}, imag: ${t.length}.`);const n=new Float32Array(2*e.length);for(let r=0;r<n.length;r+=2)n[r]=e[r/2],n[r+1]=t[r/2];return n}function $n(e){const t=new Float32Array(e.length/2),n=new Float32Array(e.length/2);for(let r=0;r<e.length;r+=2)t[r/2]=e[r],n[r/2]=e[r+1];return{real:t,imag:n}}function On(e){const t=Math.ceil(e.length/4),n=new Float32Array(t),r=new Float32Array(t);for(let t=0;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],r[Math.floor(t/4)]=e[t+1];return{real:n,imag:r}}function Bn(e){const t=Math.floor(e.length/4),n=new Float32Array(t),r=new Float32Array(t);for(let t=2;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],r[Math.floor(t/4)]=e[t+1];return{real:n,imag:r}}function Rn(e,t){return{real:e[2*t],imag:e[2*t+1]}}function Vn(e,t,n,r){e[2*r]=t,e[2*r+1]=n}function Cn(e,t){const n=new Float32Array(e/2),r=new Float32Array(e/2);for(let a=0;a<Math.ceil(e/2);a++){const s=(t?2:-2)*Math.PI*(a/e);n[a]=Math.cos(s),r[a]=Math.sin(s)}return{real:n,imag:r}}function zn(e,t,n){const r=(n?2:-2)*Math.PI*(e/t);return{real:Math.cos(r),imag:Math.sin(r)}}const Pn=/->/g;function Ln(e,t){const n=((e=e.replace(/\s/g,"")).length-e.replace(Pn,"").length)/"->".length;if(n<1)throw new Error("Equations without an arrow are not supported.");if(n>1)throw new Error('Equation must contain exactly one arrow ("->").');const[r,a]=e.split("->");(0,N.hu)(-1===r.indexOf("..."),(()=>'The ellipsis notation ("...") is not supported yet.'));const s=r.split(","),o=s.length;if(t!==o)throw new Error(`Expected ${o} input tensors, received ${t}`);if(o>2)throw new Error("Support for more than 2 input tensors is not implemented yet.");const i=[];for(let e=0;e<a.length;++e){const t=a[e];if(!s.some((e=>-1!==e.indexOf(t))))throw new Error(`Output subscripts contain the label ${t} not present in the input subscripts.`);-1===i.indexOf(t)&&i.push(t)}for(let e=0;e<r.length;++e){const t=r[e];-1===i.indexOf(t)&&","!==t&&i.push(t)}const u=new Array(s.length);for(let e=0;e<o;++e){if(new Set(s[e].split("")).size!==s[e].length)throw new Error(`Found duplicate axes in input component ${s[e]}. Support for duplicate axes in input is not implemented yet.`);u[e]=[];for(let t=0;t<s[e].length;++t)u[e].push(i.indexOf(s[e][t]))}const l=i.length,c=[];for(let e=a.length;e<l;++e)c.push(e);return{allDims:i,summedDims:c,idDims:u}}function Hn(e,t){let n=new Array(e);n.fill(-1);for(let e=0;e<t.length;++e)n[t[e]]=e;const r=[];for(let t=0;t<e;++t)-1===n[t]&&r.push(t);return n=n.filter((e=>-1!==e)),{permutationIndices:n,expandDims:r}}function Wn(e,t,n){const r=new Array(e);for(let e=0;e<n.length;++e){const a=n[e].shape;for(let n=0;n<t[e].length;++n)void 0===r[t[e][n]]?r[t[e][n]]=a[n]:(0,N.hu)(r[t[e][n]]===a[n],(()=>`Expected dimension ${r[t[e][n]]} at axis ${n} of input shaped ${JSON.stringify(a)}, but got dimension ${a[n]}`))}}function Gn(e,t){const n=e,r=[];let a=0;0===e.length&&n.push(-1),a=e.length+1;for(let e=0;e<a;++e)r.push([]);const s=[];for(let e=0;e<n.length;++e){const a=qn(t,n[e]);for(const t of a)-1===s.indexOf(t)&&(r[e].push(t),s.push(t))}return{path:n,steps:r}}function Un(e){return e.every(((e,t)=>e===t))}function qn(e,t){const n=[];for(let r=0;r<e.length;++r)0!==e[r].length&&-1===e[r].indexOf(t)&&-1!==t||n.push(r);return n}function jn(e,t,n=0){let r=[];if("number"==typeof t)(0,N.hu)(e.shape[n]%t==0,(()=>"Number of splits must evenly divide the axis.")),r=new Array(t).fill(e.shape[n]/t);else{const a=t.reduce(((e,t)=>(-1===t&&(e+=1),e)),0);(0,N.hu)(a<=1,(()=>"There should be only one negative value in split array."));const s=t.indexOf(-1);if(-1!==s){const r=t.reduce(((e,t)=>t>0?e+t:e));t[s]=e.shape[n]-r}(0,N.hu)(e.shape[n]===t.reduce(((e,t)=>e+t)),(()=>"The sum of sizes must match the size of the axis dimension.")),r=t}return r}function Kn(e){return`Received SparseTensor with denseShape[0] = 0 but\n  indices.shape[0] = ${e}`}function Xn(e,t){return`indices(${e}, 0) is invalid: ${t} < 0`}function Zn(e,t,n){return`indices(${e}, 0) is invalid: ${t} >= ${n}`}function Qn(e,t){return`only one output dimension may be -1, not both ${e} and ${t}`}function Yn(e,t){return`size ${e} must be non-negative, not ${t}`}function Jn(){return"reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero"}function er(e,t){return`Input to reshape is a SparseTensor with ${(0,N.NA)(e)}\n  dense values, but the requested shape requires a multiple of ${(0,N.NA)(t)}. inputShape=${e} outputShape= ${t}`}function tr(e,t){return`Input to reshape is a tensor with ${(0,N.NA)(e)} dense values, but the requested shape has ${(0,N.NA)(t)}. inputShape=${e} outputShape=${t}`}function nr(){return"segment ids must be >= 0"}function rr(){return"segment ids are not increasing"}function ar(e,t){return`Segment id ${e} out of range [0, ${t}), possibly because segmentIds input is not sorted.`}function sr(e,t,n){return`Bad: indices[${e}] == ${t} out of range [0, ${n})`}function or(e,t){let n,r=!1;for(e<=gn?(n=e,r=!0):n=(0,N.jP)(e,Math.floor(Math.sqrt(e)));!r;)n>t||n===e?r=!0:n=(0,N.jP)(e,n+1);return n}function ir(e,t,n){const r=[],a=e.length;for(let s=0;s<a;s++)s!==t?r.push(e[s]):r.push(n);return r}function ur(e,t,n,r){const a=t.shape.length,s=e.shape.length;if(0!==r&&(r<-a||r>a))throw new Error(`Expect batchDims in the range of [-${a}, ${a}], but got ${r}`);if(r<0&&(r+=a),r>s)throw new Error(`batchDims (${r}) must be less than rank(x) (\n    ${s}).`);if(n<r)throw new Error(`batchDims (${r}) must be less than or equal to axis (${n}).`);for(let n=0;n<r;++n)if(e.shape[n]!==t.shape[n])throw new Error(`x.shape[${n}]: ${e.shape[n]} should be equal to indices.shape[${n}]: ${t.shape[n]}.`);const o=e.shape[n],i=[];let u=1,l=1,c=1;for(let t=0;t<r;++t)i.push(e.shape[t]),u*=e.shape[t];for(let t=r;t<n;t++)i.push(e.shape[t]),l*=e.shape[t];for(let e=r;e<a;e++)i.push(t.shape[e]);for(let t=n+1;t<s;t++)i.push(e.shape[t]),c*=e.shape[t];return{batchSize:u,sliceSize:c,outerSize:l,dimSize:o,outputShape:i}}function lr(e){try{return e.map((e=>(0,Vt.decodeString)(e)))}catch(e){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${e}`)}}function cr(e){return e.map((e=>(0,Vt.encodeString)(e)))}var pr=n(9180),dr=n(6133),hr=n(9941);!function(){for(const e of Qe)Ve(e)}()},5202:(e,t,n)=>{"use strict";n.d(t,{$HU:()=>ft,$g6:()=>J,$w:()=>K,Acj:()=>ge,BMI:()=>Ce,BiW:()=>dt,Byc:()=>P,CAk:()=>Te,CQl:()=>pt,D2d:()=>Ut,DlI:()=>lt,Eh3:()=>D,FKq:()=>Rt,G3Y:()=>an,GBy:()=>Vt,Gcp:()=>Pt,HEU:()=>te,HZH:()=>yt,Hhh:()=>Re,Hmb:()=>kt,IKK:()=>l,IMb:()=>w,J$2:()=>xe,J_u:()=>ke,JhU:()=>y,Kgp:()=>ot,L8s:()=>zt,Ly9:()=>S,M2y:()=>d,MIZ:()=>en,MRv:()=>Bt,MZg:()=>De,NEP:()=>ae,NZg:()=>Xe,O3z:()=>Lt,OAf:()=>Le,OR:()=>ce,OU7:()=>He,OV7:()=>Pe,Omj:()=>ne,Oyi:()=>f,PYm:()=>Ae,PhF:()=>Et,QCc:()=>g,QRR:()=>W,Qg5:()=>be,QiL:()=>at,Qvg:()=>un,RFZ:()=>I,ROF:()=>b,RQH:()=>Dt,RuY:()=>cn,SX0:()=>ee,SYM:()=>r,SbG:()=>Nt,SpW:()=>s,T0n:()=>G,TQc:()=>Ct,TR1:()=>z,ToN:()=>on,Tr8:()=>Yt,Uyb:()=>le,VGw:()=>a,Vbg:()=>Ke,VcC:()=>H,VfG:()=>Me,Vn9:()=>Q,W0H:()=>tt,XDQ:()=>ln,XLW:()=>v,XkS:()=>Qt,Xze:()=>i,Y0y:()=>oe,YFo:()=>se,YoZ:()=>Ve,ZbH:()=>_e,ZjV:()=>Gt,Zz9:()=>A,_JP:()=>Xt,_V0:()=>fn,_Yw:()=>wt,_k9:()=>k,_tC:()=>qt,a5O:()=>Ot,aJk:()=>p,avt:()=>we,b9H:()=>hn,bK0:()=>jt,bV0:()=>Tt,c17:()=>Ue,cWu:()=>nn,cie:()=>U,cye:()=>et,dDz:()=>ct,deh:()=>ue,dpD:()=>bt,e07:()=>St,e6w:()=>ht,e7N:()=>Ie,eBW:()=>dn,eEB:()=>T,eZ0:()=>Be,ekb:()=>Z,gJX:()=>_,h8e:()=>pn,hdR:()=>re,i5y:()=>$t,iHb:()=>L,iJz:()=>ye,iWB:()=>ve,iZT:()=>fe,ik2:()=>V,jMg:()=>m,jQk:()=>Kt,jQs:()=>je,jeX:()=>pe,kU:()=>Ee,kpP:()=>sn,kuV:()=>Qe,luS:()=>gn,lyA:()=>st,mKl:()=>xt,mTV:()=>ze,mc4:()=>C,mhS:()=>F,mm_:()=>o,n9L:()=>tn,nhH:()=>Ht,nr8:()=>_t,o0g:()=>ut,o2y:()=>R,oFR:()=>At,oHH:()=>Y,oT6:()=>u,p2w:()=>Mt,p4S:()=>X,pe_:()=>it,q1x:()=>me,q2K:()=>Ge,q8u:()=>qe,qCd:()=>$e,qIC:()=>Oe,qWM:()=>nt,qi_:()=>he,qkr:()=>gt,qw7:()=>h,r7n:()=>Ne,s1s:()=>Zt,sEM:()=>Jt,sHE:()=>de,sJF:()=>c,sL$:()=>q,usg:()=>mn,uv1:()=>Je,vFR:()=>We,vtC:()=>Se,vwp:()=>ie,w3H:()=>Wt,w6g:()=>Fe,wUP:()=>$,wYB:()=>Ft,wYn:()=>Ze,we_:()=>rt,wm:()=>O,wx7:()=>rn,x12:()=>B,xJR:()=>mt,xQA:()=>It,xnO:()=>E,y7R:()=>j,yQU:()=>Ye,yj2:()=>M,zbQ:()=>vt,zvY:()=>x,zws:()=>N});const r="Abs",a="Acos",s="Acosh",o="Add",i="AddN",u="All",l="Any",c="ArgMax",p="ArgMin",d="Asin",h="Asinh",m="Atan",f="Atanh",g="Atan2",y="AvgPool",b="AvgPoolGrad",k="AvgPool3D",w="AvgPool3DGrad",v="BatchMatMul",N="BatchToSpaceND",x="Bincount",S="BroadcastTo",T="BroadcastArgs",I="Cast",_="Ceil",E="ClipByValue",A="Complex",M="ComplexAbs",D="Concat",F="Conv2D",$="Conv2DBackpropFilter",O="Conv2DBackpropInput",B="Conv3D",R="Conv3DBackpropFilterV2",V="Conv3DBackpropInputV2",C="Cos",z="Cosh",P="Cumprod",L="Cumsum",H="CropAndResize",W="DenseBincount",G="DepthToSpace",U="DepthwiseConv2dNative",q="DepthwiseConv2dNativeBackpropFilter",j="DepthwiseConv2dNativeBackpropInput",K="Diag",X="Dilation2D",Z="Dilation2DBackpropInput",Q="Dilation2DBackpropFilter",Y="RealDiv",J="Einsum",ee="Elu",te="EluGrad",ne="Erf",re="Equal",ae="Exp",se="ExpandDims",oe="Expm1",ie="FFT",ue="Fill",le="FlipLeftRight",ce="Floor",pe="FloorDiv",de="FusedBatchNorm",he="GatherV2",me="GatherNd",fe="Greater",ge="GreaterEqual",ye="Identity",be="IFFT",ke="Imag",we="IsFinite",ve="IsInf",Ne="IsNan",xe="LeakyRelu",Se="Less",Te="LessEqual",Ie="LinSpace",_e="Log",Ee="Log1p",Ae="LogicalAnd",Me="LogicalNot",De="LogicalOr",Fe="LogicalXor",$e="LogSoftmax",Oe="LowerBound",Be="LRN",Re="LRNGrad",Ve="Max",Ce="Maximum",ze="MaxPool",Pe="MaxPoolGrad",Le="MaxPool3D",He="MaxPool3DGrad",We="MaxPoolWithArgmax",Ge="Mean",Ue="Min",qe="Minimum",je="MirrorPad",Ke="Mod",Xe="Multinomial",Ze="Multiply",Qe="Neg",Ye="NotEqual",Je="NonMaxSuppressionV3",et="NonMaxSuppressionV4",tt="NonMaxSuppressionV5",nt="OnesLike",rt="OneHot",at="Pack",st="PadV2",ot="Pool",it="Pow",ut="Prelu",lt="Prod",ct="RaggedGather",pt="RaggedRange",dt="RaggedTensorToTensor",ht="Range",mt="Real",ft="Reciprocal",gt="Relu",yt="Reshape",bt="ResizeNearestNeighbor",kt="ResizeNearestNeighborGrad",wt="ResizeBilinear",vt="ResizeBilinearGrad",Nt="Relu6",xt="Reverse",St="Round",Tt="Rsqrt",It="ScatterNd",_t="SearchSorted",Et="Select",At="Selu",Mt="Slice",Dt="Sin",Ft="Sinh",$t="Sign",Ot="Sigmoid",Bt="Softplus",Rt="Sqrt",Vt="Sum",Ct="SpaceToBatchND",zt="SplitV",Pt="Softmax",Lt="SparseFillEmptyRows",Ht="SparseReshape",Wt="SparseSegmentMean",Gt="SparseSegmentSum",Ut="SparseToDense",qt="SquaredDifference",jt="Square",Kt="StridedSlice",Xt="StringNGrams",Zt="StringSplit",Qt="StringToHashBucketFast",Yt="Sub",Jt="Tan",en="Tanh",tn="Tile",nn="TopK",rn="Transform",an="Transpose",sn="Unique",on="Unpack",un="UnsortedSegmentSum",ln="UpperBound",cn="ZerosLike",pn="Step",dn="FromPixels",hn="RotateWithOffset",mn="_FusedMatMul",fn="FusedConv2D",gn="FusedDepthwiseConv2D"},8307:(e,t,n)=>{"use strict";n.d(t,{Li:()=>d,T3:()=>f,bt:()=>m,nE:()=>h,pI:()=>u,tr:()=>c,uk:()=>l,wC:()=>p});var r=n(3535),a=n(7944),s=n(56);const o=(0,a.R)("kernelRegistry",(()=>new Map)),i=(0,a.R)("gradRegistry",(()=>new Map));function u(e,t){const n=g(e,t);return o.get(n)}function l(e){return i.get(e)}function c(e){const t=o.entries(),n=[];for(;;){const{done:r,value:a}=t.next();if(r)break;const[s,o]=a,[i]=s.split("_");i===e&&n.push(o)}return n}function p(e){const{kernelName:t,backendName:n}=e,r=g(t,n);o.has(r)&&s.Z(`The kernel '${t}' for backend '${n}' is already registered`),o.set(r,e)}function d(e){const{kernelName:t}=e;i.has(t)&&(0,r.OB)().getBool("DEBUG")&&s.Z(`Overriding the gradient for '${t}'`),i.set(t,e)}function h(e,t){const n=g(e,t);if(!o.has(n))throw new Error(`The kernel '${e}' for backend '${t}' is not registered`);o.delete(n)}function m(e){if(!i.has(e))throw new Error(`The gradient '${e}' for backend is not registered`);i.delete(e)}function f(e,t){c(e).forEach((e=>{p(Object.assign({},e,{backendName:t}))}))}function g(e,t){return`${t}_${e}`}},56:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a,c:()=>s});var r=n(3535);function a(...e){(0,r.OB)().getBool("IS_TEST")||(0,r.OB)().getBool("PROD")||console.warn(...e)}function s(...e){(0,r.OB)().getBool("IS_TEST")||(0,r.OB)().getBool("PROD")||console.log(...e)}},6720:(e,t,n)=>{"use strict";n.d(t,{W:()=>o});var r=n(3421),a=n(5202),s=n(8516);const o=(0,n(128).op)({abs_:function(e){const t=(0,s._1)(e,"x","abs");if("complex64"===t.dtype){const e={x:t};return r.BV.runKernel(a.yj2,e)}{const e={x:t};return r.BV.runKernel(a.SYM,e)}}})},8866:(e,t,n)=>{"use strict";n.d(t,{K:()=>o});var r=n(3421),a=n(5202),s=n(8516);const o=(0,n(128).op)({acos_:function(e){const t={x:(0,s._1)(e,"x","acos")};return r.BV.runKernel(a.VGw,t)}})},6039:(e,t,n)=>{"use strict";n.d(t,{_:()=>o});var r=n(3421),a=n(5202),s=n(8516);const o=(0,n(128).op)({acosh_:function(e){const t={x:(0,s._1)(e,"x","acosh")};return r.BV.runKernel(a.SpW,t)}})},7571:(e,t,n)=>{"use strict";n.d(t,{I:()=>i});var r=n(3421),a=n(5202),s=n(9201),o=n(8516);const i=(0,n(128).op)({add_:function(e,t){let n=(0,o._1)(e,"a","add"),i=(0,o._1)(t,"b","add");[n,i]=(0,s.makeTypesMatch)(n,i);const u={a:n,b:i};return r.BV.runKernel(a.mm_,u)}})},7590:(e,t,n)=>{"use strict";n.d(t,{$:()=>o});var r=n(3421),a=n(5202),s=n(8516);const o=(0,n(128).op)({all_:function(e,t=null,n=!1){const o={x:(0,s._1)(e,"x","all","bool")},i={axis:t,keepDims:n};return r.BV.runKernel(a.oT6,o,i)}})},6298:(e,t,n)=>{"use strict";n.d(t,{Y:()=>o});var r=n(3421),a=n(5202),s=n(8516);const o=(0,n(128).op)({any_:function(e,t=null,n=!1){const o={x:(0,s._1)(e,"x","any","bool")},i={axis:t,keepDims:n};return r.BV.runKernel(a.IKK,o,i)}})},1523:(e,t,n)=>{"use strict";n.d(t,{N:()=>o});var r=n(3421),a=n(5202),s=n(8516);const o=(0,n(128).op)({argMax_:function(e,t=0){const n={x:(0,s._1)(e,"x","argMax")},o={axis:t};return r.BV.runKernel(a.sJF,n,o)}})},9542:(e,t,n)=>{"use strict";n.d(t,{v:()=>o});var r=n(3421),a=n(5202),s=n(8516);const o=(0,n(128).op)({argMin_:function(e,t=0){const n={x:(0,s._1)(e,"x","argMin")},o={axis:t};return r.BV.runKernel(a.aJk,n,o)}})},5492:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(3421),a=n(5202),s=n(8516);const o=(0,n(128).op)({asin_:function(e){const t={x:(0,s._1)(e,"x","asin")};return r.BV.runKernel(a.M2y,t)}})},3927:(e,t,n)=>{"use strict";n.d(t,{V:()=>o});var r=n(3421),a=n(5202),s=n(8516);const o=(0,n(128).op)({asinh_:function(e){const t={x:(0,s._1)(e,"x","asinh")};return r.BV.runKernel(a.qw7,t)}})},2418:(e,t,n)=>{"use strict";n.d(t,{z:()=>o});var r=n(3421),a=n(5202),s=n(8516);const o=(0,n(128).op)({atan_:function(e){const t={x:(0,s._1)(e,"x","atan")};return r.BV.runKernel(a.jMg,t)}})},4002:(e,t,n)=>{"use strict";n.d(t,{f:()=>i});var r=n(3421),a=n(5202),s=n(9201),o=n(8516);const i=(0,n(128).op)({atan2_:function(e,t){let n=(0,o._1)(e,"a","atan2"),i=(0,o._1)(t,"b","atan2");[n,i]=(0,s.makeTypesMatch)(n,i);const u={a:n,b:i};return r.BV.runKernel(a.QCc,u)}})},5602:(e,t,n)=>{"use strict";n.d(t,{C:()=>o});var r=n(3421),a=n(5202),s=n(8516);const o=(0,n(128).op)({atanh_:function(e){const t={x:(0,s._1)(e,"x","atanh")};return r.BV.runKernel(a.Oyi,t)}})},9385:(e,t,n)=>{"use strict";n.d(t,{w:()=>p});var r=n(3421),a=n(5202),s=n(8516),o=n(9740),i=n(5875),u=n(1129),l=n(128),c=n(2673);const p=(0,l.op)({avgPool_:function(e,t,n,l,p){const d=(0,s._1)(e,"x","avgPool","float32");o.hu(u.jT(n,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`));let h=d,m=!1;3===d.rank&&(m=!0,h=(0,c.X)(d,[1,d.shape[0],d.shape[1],d.shape[2]])),o.hu(4===h.rank,(()=>`Error in avgPool: x must be rank 4 but got rank ${h.rank}.`)),u.m("avgPool",l,p);const f={x:h},g={filterSize:t,strides:n,pad:l,dimRoundingMode:p};let y=r.BV.runKernel(a.JhU,f,g);return y=(0,i.p)(y,d.dtype),m?(0,c.X)(y,[y.shape[1],y.shape[2],y.shape[3]]):y}})},7704:(e,t,n)=>{"use strict";n.d(t,{LJ:()=>c,Q3:()=>l,Vh:()=>s,YB:()=>a,kz:()=>o,lB:()=>u,rv:()=>i,sY:()=>p});var r=n(9740);function a(e,t){for(let n=0;n<e.length;++n)if(e[e.length-n-1]!==t-1-n)return!1;return!0}function s(e,t,n){const r=e.length+t.length,a=[];let s=0,o=0;for(let i=0;i<r;i++)-1===n.indexOf(i)?a.push(e[s++]):a.push(t[o++]);return a}function o(e,t){const n=[],r=e.length;for(let a=0;a<r;a++)-1===t.indexOf(a)&&n.push(e[a]);return[n,t.map((t=>e[t]))]}function i(e,t){return s(e,t.map((e=>1)),t)}function u(e,t,n){r.hu(a(t,n),(()=>`${e} supports only inner-most axes for now. Got axes ${t} and rank-${n} input.`))}function l(e,t){if(a(e,t))return null;const n=[];for(let r=0;r<t;++r)-1===e.indexOf(r)&&n.push(r);return e.forEach((e=>n.push(e))),n}function c(e){return e.map(((e,t)=>[t,e])).sort(((e,t)=>e[1]-t[1])).map((e=>e[0]))}function p(e,t){const n=[];for(let r=t-e;r<t;++r)n.push(r);return n}},1141:(e,t,n)=>{"use strict";n.d(t,{E:()=>i});var r=n(3421),a=n(5202),s=n(8516),o=n(9740);const i=(0,n(128).op)({batchToSpaceND_:function(e,t,n){const i=(0,s._1)(e,"x","batchToSpaceND"),u=t.reduce(((e,t)=>e*t));o.hu(i.rank>=1+t.length,(()=>`input rank is ${i.rank} but should be > than blockShape.length ${t.length}`)),o.hu(n.length===t.length,(()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${t.length}`)),o.hu(i.shape[0]%u==0,(()=>`input tensor batch is ${i.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${u}`));const l={x:i},c={blockShape:t,crops:n};return r.BV.runKernel(a.zws,l,c)}})},8325:(e,t,n)=>{"use strict";n.d(t,{t:()=>u});var r=n(3421),a=n(5202),s=n(8516),o=n(9740),i=n(2673);const u=(0,n(128).op)({batchNorm_:function(e,t,n,u,l,c){null==c&&(c=.001);const p=(0,s._1)(e,"x","batchNorm"),d=(0,s._1)(t,"mean","batchNorm"),h=(0,s._1)(n,"variance","batchNorm");let m,f;null!=l&&(m=(0,s._1)(l,"scale","batchNorm")),null!=u&&(f=(0,s._1)(u,"offset","batchNorm")),o.hu(d.rank===h.rank,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),o.hu(null==f||d.rank===f.rank,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),o.hu(null==m||d.rank===m.rank,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));const g={x:function(e){let t;return t=0===e.rank||1===e.rank?(0,i.X)(e,[1,1,1,e.size]):2===e.rank?(0,i.X)(e,[1,1,e.shape[0],e.shape[1]]):3===e.rank?(0,i.X)(e,[1,e.shape[0],e.shape[1],e.shape[2]]):e,t}(p),scale:m,offset:f,mean:d,variance:h},y={varianceEpsilon:c},b=r.BV.runKernel(a.sHE,g,y);return(0,i.X)(b,p.shape)}})},7933:(e,t,n)=>{"use strict";n.d(t,{U:()=>c});var r=n(3421),a=n(5202),s=n(8516),o=n(9740),i=n(1107),u=n(128),l=n(2673);const c=(0,u.op)({broadcastTo_:function(e,t){let n=(0,s._1)(e,"broadcastTo","x");const u=n.shape;if((0,o.Mu)(t),t.length<n.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${n.rank}.`);if(t.length>n.rank){const e=n.shape.slice();for(;e.length<t.length;)e.unshift(1);n=(0,l.X)(n,e)}const c=n.shape,p=Array.from(t);for(let e=t.length-1;e>=0;e--)if(c[e]===t[e])p[e]=1;else if(1!==n.shape[e])throw new Error(`broadcastTo(): [${u}] cannot be broadcast to [${t}].`);if(0===p.map(((e,t)=>e>1?t:-1)).filter((e=>e>=0)).length)return(0,i.d)(n);const d={x:n},h={reps:p};return r.BV.runKernel(a.n9L,d,h)}})},2011:(e,t,n)=>{"use strict";function r(e,t){const n=e.length,r=[];for(let a=0;a<n;a++){const s=n-1-a,o=e[s]||1;(t[t.length-1-a]||1)>1&&1===o&&r.unshift(s)}return r}function a(e,t){const n=[];for(let r=0;r<t.length;r++){const a=e[e.length-r-1],s=t.length-r-1,o=t[s];(null==a||1===a&&o>1)&&n.unshift(s)}return n}function s(e,t){const n=[],r=Math.max(e.length,t.length);for(let a=0;a<r;a++){let r=e[e.length-a-1];null==r&&(r=1);let s=t[t.length-a-1];if(null==s&&(s=1),1===r)n.unshift(s);else if(1===s)n.unshift(r);else{if(r!==s)throw Error(`Operands could not be broadcast together with shapes ${e} and ${t}.`);n.unshift(r)}}return n}n.r(t),n.d(t,{assertAndGetBroadcastShape:()=>s,getBroadcastDims:()=>r,getReductionAxes:()=>a})},1744:(e,t,n)=>{"use strict";n.d(t,{f:()=>s});var r=n(1313),a=n(9740);function s(e,t="float32",n){return t=t||"float32",a.Mu(e),new r.YD(e,t,n)}},5875:(e,t,n)=>{"use strict";n.d(t,{p:()=>i});var r=n(3421),a=n(5202),s=n(8516),o=n(9740);const i=(0,n(128).op)({cast_:function(e,t){const n=(0,s._1)(e,"x","cast");if(!o.LP(t))throw new Error(`Failed to cast to unknown dtype ${t}`);if("string"===t&&"string"!==n.dtype||"string"!==t&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const i={x:n},u={dtype:t};return r.BV.runKernel(a.RFZ,i,u)}})},8498:(e,t,n)=>{"use strict";n.d(t,{m:()=>o});var r=n(3421),a=n(5202),s=n(8516);const o=(0,n(128).op)({ceil_:function(e){const t={x:(0,s._1)(e,"x","ceil","float32")};return r.BV.runKernel(a.gJX,t)}})},3092:(e,t,n)=>{"use strict";n.d(t,{i:()=>u});var r=n(3421),a=n(5202),s=n(8516),o=n(9740),i=n(5210);const u=(0,n(128).op)({clipByValue_:function(e,t,n){const u=(0,s._1)(e,"x","clipByValue");if(o.hu(t<=n,(()=>`Error in clip: min (${t}) must be less than or equal to max (${n}).`)),t===n)return(0,i.h)(u.shape,t,u.dtype);const l={x:u},c={clipValueMin:t,clipValueMax:n};return r.BV.runKernel(a.xnO,l,c)}})},1107:(e,t,n)=>{"use strict";n.d(t,{d:()=>o});var r=n(3421),a=n(5202),s=n(8516);const o=(0,n(128).op)({clone_:function(e){const t={x:(0,s._1)(e,"x","clone","string_or_numeric")};return r.BV.runKernel(a.iJz,t)}})},6609:(e,t,n)=>{"use strict";n.d(t,{P:()=>i});var r=n(3421),a=n(5202),s=n(8516),o=n(9740);const i=(0,n(128).op)({complex_:function(e,t){const n=(0,s._1)(e,"real","complex"),i=(0,s._1)(t,"imag","complex");o.k5(n.shape,i.shape,`real and imag shapes, ${n.shape} and ${i.shape}, must match in call to tf.complex().`);const u={real:n,imag:i};return r.BV.runKernel(a.Zz9,u)}})},9134:(e,t,n)=>{"use strict";n.d(t,{z:()=>u});var r=n(3421),a=n(5202),s=n(8516),o=n(9740),i=n(1107);const u=(0,n(128).op)({concat_:function(e,t=0){(0,o.hu)(e.length>=1,(()=>"Pass at least one tensor to concat"));const n=(0,s.sI)(e,"tensors","concat","string_or_numeric");if("complex64"===n[0].dtype&&n.forEach((e=>{if("complex64"!==e.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${e.dtype}. `)})),1===n.length)return(0,i.d)(n[0]);const u=n,l={axis:t};return r.BV.runKernel(a.Eh3,u,l)}})},6409:(e,t,n)=>{"use strict";n.d(t,{P:()=>l});var r=n(8516),a=n(9740),s=n(9399),o=n(1129),i=n(128),u=n(2673);const l=(0,i.op)({conv1d_:function(e,t,n,i,l="NWC",c=1,p){const d=(0,r._1)(e,"x","conv1d"),h=(0,r._1)(t,"filter","conv1d");let m=d,f=!1;2===d.rank&&(f=!0,m=(0,u.X)(d,[1,d.shape[0],d.shape[1]])),a.hu(3===m.rank,(()=>`Error in conv1d: input must be rank 3, but got rank ${m.rank}.`)),a.hu(3===h.rank,(()=>`Error in conv1d: filter must be rank 3, but got rank ${h.rank}.`)),o.m("conv1d",i,p),a.hu(m.shape[2]===h.shape[1],(()=>`Error in conv1d: depth of input (${m.shape[2]}) must match input depth for filter ${h.shape[1]}.`)),a.hu(o.jT(n,c),(()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${c}'`)),a.hu(o.U3(c),(()=>"Error in conv1D: Dilated rates should be larger than 0.")),a.hu(o.U3(n),(()=>"Error in conv1D: Stride should be larger than 0.")),a.hu("NWC"===l,(()=>`Error in conv1d: got dataFormat of ${l} but only NWC is currently supported.`));const g=(0,u.X)(h,[1,h.shape[0],h.shape[1],h.shape[2]]),y=(0,u.X)(m,[m.shape[0],1,m.shape[1],m.shape[2]]),b=[1,n],k=[1,c],w=(0,s.T)(y,g,b,i,"NHWC",k,p);return f?(0,u.X)(w,[w.shape[2],w.shape[3]]):(0,u.X)(w,[w.shape[0],w.shape[2],w.shape[3]])}})},9399:(e,t,n)=>{"use strict";n.d(t,{T:()=>c});var r=n(3421),a=n(5202),s=n(8516),o=n(9740),i=n(1129),u=n(128),l=n(2673);const c=(0,u.op)({conv2d_:function(e,t,n,u,c="NHWC",p=[1,1],d){const h=(0,s._1)(e,"x","conv2d","float32"),m=(0,s._1)(t,"filter","conv2d","float32");let f=h,g=!1;3===h.rank&&(g=!0,f=(0,l.X)(h,[1,h.shape[0],h.shape[1],h.shape[2]])),o.hu(4===f.rank,(()=>`Error in conv2d: input must be rank 4, but got rank ${f.rank}.`)),o.hu(4===m.rank,(()=>`Error in conv2d: filter must be rank 4, but got rank ${m.rank}.`)),i.m("conv2d",u,d);const y="NHWC"===c?f.shape[3]:f.shape[1];o.hu(y===m.shape[2],(()=>`Error in conv2d: depth of input (${y}) must match input depth for filter ${m.shape[2]}.`)),o.hu(i.jT(n,p),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${p}'`)),o.hu(i.U3(p),(()=>"Error in conv2D: Dilated rates should be larger than 0.")),o.hu(i.U3(n),(()=>"Error in conv2D: Strides should be larger than 0."));const b={x:f,filter:m},k={strides:n,pad:u,dataFormat:c,dilations:p,dimRoundingMode:d},w=r.BV.runKernel(a.mhS,b,k);return g?(0,l.X)(w,[w.shape[1],w.shape[2],w.shape[3]]):w}})},1885:(e,t,n)=>{"use strict";n.d(t,{p:()=>l});var r=n(3421),a=n(5202),s=n(9740),o=n(1129),i=n(128),u=n(2673);const l=(0,i.op)({conv2DBackpropFilter_:function(e,t,n,i,l,c="NHWC",p){let d=e;3===e.rank&&(d=(0,u.X)(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let h=t;3===h.rank&&(h=(0,u.X)(t,[1,t.shape[0],t.shape[1],t.shape[2]])),s.hu(4===d.rank,(()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${d.shape}.`)),s.hu(4===h.rank,(()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${h.shape}.`)),s.hu(4===n.length,(()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${n}.`));const m="NHWC"===c?d.shape[3]:d.shape[1],f="NHWC"===c?h.shape[3]:h.shape[1];s.hu(m===n[2],(()=>`Error in conv2dDerFilter: depth of input ${m}) must match input depth in filter (${n[2]}.`)),s.hu(f===n[3],(()=>`Error in conv2dDerFilter: depth of dy (${f}) must match output depth for filter (${n[3]}).`)),o.m("conv2dDerFilter",l,p);const g={x:d,dy:h},y={strides:i,pad:l,dataFormat:c,dimRoundingMode:p,filterShape:n};return r.BV.runKernel(a.wUP,g,y)}})},6858:(e,t,n)=>{"use strict";n.d(t,{_:()=>l});var r=n(3421),a=n(5202),s=n(9740),o=n(1129),i=n(128),u=n(2673);const l=(0,i.op)({conv2DBackpropInput_:function(e,t,n,i,l,c="NHWC",p){s.hu(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let d=e,h=t,m=!1;3===t.rank&&(m=!0,h=(0,u.X)(t,[1,t.shape[0],t.shape[1],t.shape[2]]),d=[1,e[0],e[1],e[2]]),s.hu(4===d.length,(()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${d.length}.`)),s.hu(4===h.rank,(()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${h.rank}`)),s.hu(4===n.rank,(()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${n.rank}`));const f="NHWC"===c?d[3]:d[1],g="NHWC"===c?h.shape[3]:h.shape[1];s.hu(f===n.shape[2],(()=>`Error in conv2dDerInput: depth of input (${f}) must match input depth for filter ${n.shape[2]}.`)),s.hu(g===n.shape[3],(()=>`Error in conv2dDerInput: depth of output (${g}) must match output depth for filter ${n.shape[3]}.`)),o.m("conv2dDerInput",l,p);const y={dy:h,filter:n},b={strides:i,pad:l,dataFormat:c,dimRoundingMode:p,inputShape:d},k=r.BV.runKernel(a.wm,y,b);return m?(0,u.X)(k,[k.shape[1],k.shape[2],k.shape[3]]):k}})},7905:(e,t,n)=>{"use strict";n.d(t,{b:()=>s});var r=n(8516),a=n(6858);const s=(0,n(128).op)({conv2dTranspose_:function(e,t,n,s,o,i){const u=(0,r._1)(e,"x","conv2dTranspose"),l=(0,r._1)(t,"filter","conv2dTranspose");return(0,a._)(n,u,l,s,o,"NHWC",i)}})},2833:(e,t,n)=>{"use strict";n.d(t,{_:()=>u});var r=n(3421),a=n(5202),s=n(9740),o=n(128),i=n(2673);const u=(0,o.op)({conv3DBackpropInput_:function(e,t,n,o,u){s.hu(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let l=e,c=t,p=!1;4===t.rank&&(p=!0,c=(0,i.X)(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),l=[1,e[0],e[1],e[2],e[3]]);const d=l[4],h=c.shape[4];s.hu(5===l.length,(()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${l.length}.`)),s.hu(5===c.rank,(()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${c.rank}`)),s.hu(5===n.rank,(()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${n.rank}`)),s.hu(d===n.shape[3],(()=>`Error in conv3dDerInput: depth of input (${d}) must match input depth for filter ${n.shape[3]}.`)),s.hu(h===n.shape[4],(()=>`Error in conv3dDerInput: depth of output (${h}) must match output depth for filter ${n.shape[4]}.`));const m={dy:c,filter:n},f={pad:u,strides:o,inputShape:l},g=r.BV.runKernel(a.ik2,m,f);return p?(0,i.X)(g,[g.shape[1],g.shape[2],g.shape[3],g.shape[4]]):g}})},1129:(e,t,n)=>{"use strict";n.d(t,{I0:()=>m,Ix:()=>i,Rf:()=>a,U3:()=>g,Xw:()=>s,aO:()=>l,jT:()=>f,jw:()=>u,m:()=>b,pl:()=>o,sl:()=>y});var r=n(9740);function a(e,t,n,r,a="NHWC",s){return i(e,[...t,e[3]],n,s,r,null,null,y(a))}function s(e,t,n,r,a,s,o="channelsLast"){const[u,l]=c(t);let p;if("channelsLast"===o)p=[u,l,e[3],e[3]];else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);p=[u,l,e[1],e[1]]}return i(e,p,n,r,a,s,!1,o)}function o(e,t,n,r,a,s,o="NDHWC"){const[i,l,c]=p(t);let d,h;if("NDHWC"===o)h="channelsLast",d=[i,l,c,e[4],e[4]];else{if("NCDHW"!==o)throw new Error(`Unknown dataFormat ${o}`);h="channelsFirst",d=[i,l,c,e[1],e[1]]}return u(e,d,n,r,a,!1,h,s)}function i(e,t,n,r,a,s,o=!1,i="channelsLast"){let[u,p,m,f]=[-1,-1,-1,-1];if("channelsLast"===i)[u,p,m,f]=e;else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);[u,f,p,m]=e}const[g,y,,b]=t,[k,w]=c(n),[v,N]=c(r),x=d(g,v),S=d(y,N),{padInfo:T,outHeight:I,outWidth:_}=function(e,t,n,r,a,s,o,i,u){let c,p,d;if("number"==typeof e){c={top:e,bottom:e,left:e,right:e,type:0===e?"VALID":"NUMBER"};const a=function(e,t,n,r,a){null==r&&(r=l(e,t,n));const s=e[1];return[h((e[0]-t+2*r)/n+1,a),h((s-t+2*r)/n+1,a)]}([t,n],s,r,e,i);p=a[0],d=a[1]}else if("same"===e){p=Math.ceil(t/r),d=Math.ceil(n/a);const e=Math.max(0,(p-1)*r+s-t),i=Math.max(0,(d-1)*a+o-n),u=Math.floor(e/2),l=e-u,h=Math.floor(i/2);c={top:u,bottom:l,left:h,right:i-h,type:"SAME"}}else if("valid"===e)c={top:0,bottom:0,left:0,right:0,type:"VALID"},p=Math.ceil((t-s+1)/r),d=Math.ceil((n-o+1)/a);else{if("object"!=typeof e)throw Error(`Unknown padding parameter: ${e}`);{const l="channelsLast"===u?e[1][0]:e[2][0],m="channelsLast"===u?e[1][1]:e[2][1],f="channelsLast"===u?e[2][0]:e[3][0],g="channelsLast"===u?e[2][1]:e[3][1];c={top:l,bottom:m,left:f,right:g,type:0===l&&0===m&&0===f&&0===g?"VALID":"EXPLICIT"},p=h((t-s+l+m)/r+1,i),d=h((n-o+f+g)/a+1,i)}}return{padInfo:c,outHeight:p,outWidth:d}}(a,p,m,k,w,x,S,s,i),E=o?b*f:b;let A;return"channelsFirst"===i?A=[u,E,I,_]:"channelsLast"===i&&(A=[u,I,_,E]),{batchSize:u,dataFormat:i,inHeight:p,inWidth:m,inChannels:f,outHeight:I,outWidth:_,outChannels:E,padInfo:T,strideHeight:k,strideWidth:w,filterHeight:g,filterWidth:y,effectiveFilterHeight:x,effectiveFilterWidth:S,dilationHeight:v,dilationWidth:N,inShape:e,outShape:A,filterShape:t}}function u(e,t,n,r,a,s=!1,o="channelsLast",i){let[u,c,m,f,g]=[-1,-1,-1,-1,-1];if("channelsLast"===o)[u,c,m,f,g]=e;else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);[u,g,c,m,f]=e}const[y,b,k,,w]=t,[v,N,x]=p(n),[S,T,I]=p(r),_=d(y,S),E=d(b,T),A=d(k,I),{padInfo:M,outDepth:D,outHeight:F,outWidth:$}=function(e,t,n,r,a,s,o,i,u,c,p){let d,m,f,g;if("valid"===e&&(e=0),"number"==typeof e){d={top:e,bottom:e,left:e,right:e,front:e,back:e,type:0===e?"VALID":"NUMBER"};const y=function(e,t,n,r,a,s){null==a&&(a=l(e,t[0],r[0]));const o=[0,0,0,1];for(let n=0;n<3;n++)e[n]+2*a>=t[n]&&(o[n]=h((e[n]-t[n]+2*a)/r[n]+1,s));return o}([t,n,r,1],[i,u,c],0,[a,s,o],e,p);m=y[0],f=y[1],g=y[2]}else{if("same"!==e)throw Error(`Unknown padding parameter: ${e}`);{m=Math.ceil(t/a),f=Math.ceil(n/s),g=Math.ceil(r/o);const e=(m-1)*a+i-t,l=(f-1)*s+u-n,p=(g-1)*o+c-r,h=Math.floor(e/2),y=e-h,b=Math.floor(l/2),k=l-b,w=Math.floor(p/2);d={top:b,bottom:k,left:w,right:p-w,front:h,back:y,type:"SAME"}}}return{padInfo:d,outDepth:m,outHeight:f,outWidth:g}}(a,c,m,f,v,N,x,_,E,A,i),O=s?w*g:w;let B;return"channelsFirst"===o?B=[u,O,D,F,$]:"channelsLast"===o&&(B=[u,D,F,$,O]),{batchSize:u,dataFormat:o,inDepth:c,inHeight:m,inWidth:f,inChannels:g,outDepth:D,outHeight:F,outWidth:$,outChannels:O,padInfo:M,strideDepth:v,strideHeight:N,strideWidth:x,filterDepth:y,filterHeight:b,filterWidth:k,effectiveFilterDepth:_,effectiveFilterHeight:E,effectiveFilterWidth:A,dilationDepth:S,dilationHeight:T,dilationWidth:I,inShape:e,outShape:B,filterShape:t}}function l(e,t,n,r=1){const a=d(t,r);return Math.floor((e[0]*(n-1)-n+a)/2)}function c(e){return"number"==typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}function p(e){return"number"==typeof e?[e,e,e]:e}function d(e,t){return t<=1?e:e+(e-1)*(t-1)}function h(e,t){if(!t)return Math.trunc(e);switch(t){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw new Error(`Unknown roundingMode ${t}`)}}function m(e){const[t,n,r]=c(e);return 1===t&&1===n&&1===r}function f(e,t){return m(e)||m(t)}function g(e){return c(e).every((e=>e>0))}function y(e){if("NHWC"===e)return"channelsLast";if("NCHW"===e)return"channelsFirst";throw new Error(`Unknown dataFormat ${e}`)}function b(e,t,n){if(null!=n){if("string"==typeof t)throw Error(`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`);if("number"==typeof t)r.hu(r.GN(t),(()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`));else{if("object"!=typeof t)throw Error(`Error in ${e}: Unknown padding parameter: ${t}`);t.forEach((t=>{t.forEach((t=>{r.hu(r.GN(t),(()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`))}))}))}}}},7838:(e,t,n)=>{"use strict";n.d(t,{m:()=>o});var r=n(3421),a=n(5202),s=n(8516);const o=(0,n(128).op)({cos_:function(e){const t={x:(0,s._1)(e,"x","cos","float32")};return r.BV.runKernel(a.mc4,t)}})},3159:(e,t,n)=>{"use strict";n.d(t,{f:()=>o});var r=n(3421),a=n(5202),s=n(8516);const o=(0,n(128).op)({cosh_:function(e){const t={x:(0,s._1)(e,"x","cosh","float32")};return r.BV.runKernel(a.TR1,t)}})},900:(e,t,n)=>{"use strict";n.d(t,{$:()=>o});var r=n(3421),a=n(5202),s=n(8516);const o=(0,n(128).op)({cumprod_:function(e,t=0,n=!1,o=!1){const i={x:(0,s._1)(e,"x","cumprod")},u={axis:t,exclusive:n,reverse:o};return r.BV.runKernel(a.Byc,i,u)}})},805:(e,t,n)=>{"use strict";n.d(t,{z:()=>o});var r=n(3421),a=n(5202),s=n(8516);const o=(0,n(128).op)({cumsum_:function(e,t=0,n=!1,o=!1){const i={x:(0,s._1)(e,"x","cumsum")},u={axis:t,exclusive:n,reverse:o};return r.BV.runKernel(a.iHb,i,u)}})},8058:(e,t,n)=>{"use strict";n.d(t,{n:()=>i});var r=n(3421),a=n(5202),s=n(8516),o=n(9740);const i=(0,n(128).op)({depthToSpace_:function(e,t,n="NHWC"){const i=(0,s._1)(e,"x","depthToSpace","float32"),u="NHWC"===n?i.shape[1]:i.shape[2],l="NHWC"===n?i.shape[2]:i.shape[3],c="NHWC"===n?i.shape[3]:i.shape[1];o.hu(t>1,(()=>`blockSize should be > 1 for depthToSpace, but was: ${t}`)),o.hu(u*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${u} and ${t}  for depthToSpace with input shape\n    ${i.shape}`)),o.hu(l*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${l} and ${t} for depthToSpace with input shape\n        ${i.shape}`)),o.hu(c%(t*t)==0,(()=>`Dimension size must be evenly divisible by ${t*t} but is ${c} for depthToSpace with input shape ${i.shape}`));const p={x:i},d={blockSize:t,dataFormat:n};return r.BV.runKernel(a.T0n,p,d)}})},6581:(e,t,n)=>{"use strict";n.d(t,{B:()=>c});var r=n(3421),a=n(5202),s=n(8516),o=n(9740),i=n(1129),u=n(128),l=n(2673);const c=(0,u.op)({depthwiseConv2d_:function(e,t,n,u,c="NHWC",p=[1,1],d){const h=(0,s._1)(e,"x","depthwiseConv2d","float32"),m=(0,s._1)(t,"filter","depthwiseConv2d","float32");let f=h,g=!1;3===h.rank&&(g=!0,f=(0,l.X)(h,[1,h.shape[0],h.shape[1],h.shape[2]])),o.hu(4===f.rank,(()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${f.rank}.`)),o.hu(4===m.rank,(()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${m.rank}.`));const y="NHWC"===c?f.shape[3]:f.shape[1];o.hu(y===m.shape[2],(()=>`Error in depthwiseConv2d: number of input channels (${y}) must match the inChannels dimension in filter ${m.shape[2]}.`)),i.m("depthwiseConv2d",u,d);const b={x:f,filter:m},k={strides:n,pad:u,dataFormat:c,dilations:p,dimRoundingMode:d},w=r.BV.runKernel(a.cie,b,k);return g?(0,l.X)(w,[w.shape[1],w.shape[2],w.shape[3]]):w}})},2806:(e,t,n)=>{"use strict";n.d(t,{z:()=>i});var r=n(3421),a=n(5202),s=n(128),o=n(2673);const i=(0,s.op)({depthwiseConv2dNativeBackpropFilter_:function(e,t,n,s,i,u=[1,1],l){let c=e;3===e.rank&&(c=(0,o.X)(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let p=t;3===p.rank&&(p=(0,o.X)(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const d={x:c,dy:p},h={strides:s,pad:i,dimRoundingMode:l,dilations:u,filterShape:n};return r.BV.runKernel(a.sL$,d,h)}})},5039:(e,t,n)=>{"use strict";n.d(t,{v:()=>i});var r=n(3421),a=n(5202),s=n(128),o=n(2673);const i=(0,s.op)({depthwiseConv2dNativeBackpropInput_:function(e,t,n,s,i,u=[1,1],l){let c=t,p=!1;3===t.rank&&(p=!0,c=(0,o.X)(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const d={dy:c,filter:n},h={strides:s,pad:i,dimRoundingMode:l,dilations:u,inputShape:e},m=r.BV.runKernel(a.y7R,d,h);return p?(0,o.X)(m,[m.shape[1],m.shape[2],m.shape[3]]):m}})},9605:(e,t,n)=>{"use strict";n.d(t,{W:()=>l});var r=n(3421),a=n(5202),s=n(8516),o=n(9740),i=n(128),u=n(2673);const l=(0,i.op)({dilation2d_:function(e,t,n,i,l=[1,1],c="NHWC"){const p=(0,s._1)(e,"x","dilation2d"),d=(0,s._1)(t,"filter","dilation2d");o.hu(3===p.rank||4===p.rank,(()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${p.rank}.`)),o.hu(3===d.rank,(()=>`Error in dilation2d: filter must be rank 3, but got rank ${d.rank}.`)),o.hu("NHWC"===c,(()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${c}`));let h=p,m=!1;3===p.rank&&(h=(0,u.X)(p,[1,p.shape[0],p.shape[1],p.shape[2]]),m=!0),o.hu(h.shape[3]===d.shape[2],(()=>`Error in dilation2d:  input and filter must have the same depth: ${h.shape[3]} vs ${d.shape[2]}`));const f={x:h,filter:d},g={strides:n,pad:i,dilations:l},y=r.BV.runKernel(a.p4S,f,g);return m?(0,u.X)(y,[y.shape[1],y.shape[2],y.shape[3]]):y}})},2639:(e,t,n)=>{"use strict";n.d(t,{h:()=>u});var r=n(3421),a=n(5202),s=n(9201),o=n(8516),i=n(6986);const u=(0,n(128).op)({div_:function(e,t){let n=(0,o._1)(e,"a","div"),u=(0,o._1)(t,"b","div");if([n,u]=(0,s.makeTypesMatch)(n,u),"int32"===n.dtype&&"int32"===u.dtype)return(0,i.q)(n,u);const l={a:n,b:u};return r.BV.runKernel(a.oHH,l,{})}})},2152:(e,t,n)=>{"use strict";n.d(t,{N:()=>c});var r=n(9201),a=n(8516),s=n(2639),o=n(1966),i=n(128),u=n(1203),l=n(9635);const c=(0,i.op)({divNoNan_:function(e,t){let n=(0,a._1)(e,"a","div"),i=(0,a._1)(t,"b","div");[n,i]=(0,r.makeTypesMatch)(n,i);const c=(0,s.h)(n,i),p=(0,l.P)(c),d=(0,o.D)(i,p);return(0,u.a)(d,p,c)}})},7465:(e,t,n)=>{"use strict";n.d(t,{A:()=>u});var r=n(8516),a=n(9740),s=n(8249),o=n(128),i=n(2673);const u=(0,o.op)({dot_:function(e,t){const n=(0,r._1)(e,"t1","dot"),o=(0,r._1)(t,"t2","dot");a.hu(!(1!==n.rank&&2!==n.rank||1!==o.rank&&2!==o.rank),(()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${o.rank}.`));const u=1===n.rank?n.size:n.shape[1],l=1===o.rank?o.size:o.shape[0];if(a.hu(u===l,(()=>`Error in dot: inner dimensions of inputs must match, but got ${u} and ${l}.`)),1===n.rank&&1===o.rank){const e=(0,i.X)(n,[1,-1]),t=(0,i.X)(o,[-1,1]),r=(0,s.O)(e,t);return(0,i.X)(r,[])}if(1===n.rank&&2===o.rank){const e=(0,i.X)(n,[1,-1]),t=(0,i.X)(o,[o.shape[0],o.shape[1]]),r=(0,s.O)(e,t);return(0,i.X)(r,[r.size])}if(2===n.rank&&1===o.rank){const e=(0,i.X)(o,[-1,1]),t=(0,s.O)(n,e);return(0,i.X)(t,[t.size])}{const e=(0,i.X)(o,[o.shape[0],o.shape[1]]);return(0,s.O)(n,e)}}})},9673:(e,t,n)=>{"use strict";n.d(t,{p:()=>o});var r=n(3421),a=n(5202),s=n(8516);const o=(0,n(128).op)({elu_:function(e){const t={x:(0,s._1)(e,"x","elu","float32")};return r.BV.runKernel(a.SX0,t)}})},1966:(e,t,n)=>{"use strict";n.d(t,{D:()=>u});var r=n(3421),a=n(5202),s=n(9201),o=n(8516),i=n(2011);const u=(0,n(128).op)({equal_:function(e,t){let n=(0,o._1)(e,"a","equal","string_or_numeric"),u=(0,o._1)(t,"b","equal","string_or_numeric");[n,u]=(0,s.makeTypesMatch)(n,u),(0,i.assertAndGetBroadcastShape)(n.shape,u.shape);const l={a:n,b:u};return r.BV.runKernel(a.hdR,l)}})},6352:(e,t,n)=>{"use strict";n.d(t,{q:()=>u});var r=n(3421),a=n(5202),s=n(8516),o=n(9740),i=n(5875);const u=(0,n(128).op)({erf_:function(e){let t=(0,s._1)(e,"x","erf");o.hu("int32"===t.dtype||"float32"===t.dtype,(()=>"Input dtype must be `int32` or `float32`.")),"int32"===t.dtype&&(t=(0,i.p)(t,"float32"));const n={x:t};return r.BV.runKernel(a.Omj,n)}})},7637:(e,t,n)=>{"use strict";n.d(t,{d:()=>a});var r=n(1458);const a=(0,n(128).op)({euclideanNorm_:function(e,t=null,n=!1){return(0,r.K)(e,"euclidean",t,n)}})},8575:(e,t,n)=>{"use strict";n.d(t,{Q:()=>o});var r=n(3421),a=n(5202),s=n(8516);const o=(0,n(128).op)({exp_:function(e){const t={x:(0,s._1)(e,"x","exp")};return r.BV.runKernel(a.NEP,t)}})},1064:(e,t,n)=>{"use strict";n.d(t,{d:()=>i});var r=n(3421),a=n(5202),s=n(8516),o=n(9740);const i=(0,n(128).op)({expandDims_:function(e,t=0){const n=(0,s._1)(e,"x","expandDims","string_or_numeric");o.hu(t<=n.rank,(()=>"Axis must be <= rank of the tensor"));const i={input:n},u={dim:t};return r.BV.runKernel(a.YFo,i,u)}})},177:(e,t,n)=>{"use strict";n.d(t,{t:()=>o});var r=n(3421),a=n(5202),s=n(8516);const o=(0,n(128).op)({expm1_:function(e){const t={x:(0,s._1)(e,"x","expm1")};return r.BV.runKernel(a.Y0y,t)}})},5210:(e,t,n)=>{"use strict";n.d(t,{h:()=>o});var r=n(3421),a=n(5202),s=n(9740);function o(e,t,n){(0,s.Mu)(e);const o={shape:e,value:t,dtype:n};return r.BV.runKernel(a.deh,{},o)}},7184:(e,t,n)=>{"use strict";n.d(t,{G:()=>o});var r=n(3421),a=n(5202),s=n(8516);const o=(0,n(128).op)({floor_:function(e){const t={x:(0,s._1)(e,"x","floor","float32")};return r.BV.runKernel(a.OR,t)}})},6986:(e,t,n)=>{"use strict";n.d(t,{q:()=>i});var r=n(3421),a=n(5202),s=n(9201),o=n(8516);const i=(0,n(128).op)({floorDiv_:function(e,t){let n=(0,o._1)(e,"a","floorDiv"),i=(0,o._1)(t,"b","floorDiv");[n,i]=(0,s.makeTypesMatch)(n,i);const u={a:n,b:i};return r.BV.runKernel(a.jeX,u)}})},8474:(e,t,n)=>{"use strict";n.d(t,{Fr:()=>m,QH:()=>g,pf:()=>f,uy:()=>y});var r=n(2011),a=n(9673),s=n(7397),o=n(2805),i=n(1224),u=n(8536),l=n(9902),c=n(2673),p=n(5808),d=n(3863),h=n(4786);function m(e,t,n){if(null==n||"linear"===n)return e;if("relu"===n)return(0,o.d)(e,(0,d.N)(t));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function f(e,t){let n=t;const a=r.getReductionAxes(e.shape,t.shape);return a.length>0&&(n=(0,h.S)(n,a)),(0,c.X)(n,e.shape)}function g(e,t,n,r){if("linear"===t)return e;if("relu"===t)return(0,u.U)(e);if("elu"===t)return(0,a.p)(e);if("relu6"===t)return(0,l.b)(e);if("prelu"===t)return(0,i.A)(e,n);if("leakyrelu"===t)return(0,s.h)(e,r);if("sigmoid"===t)return(0,p.X)(e);throw new Error(`Unknown fused activation ${t}.`)}const y=(e,t)=>!(e>0)||"linear"===t},5262:(e,t,n)=>{"use strict";n.d(t,{I:()=>o});var r=n(3421),a=n(5202),s=n(8516);const o=(0,n(128).op)({gather_:function(e,t,n=0,o=0){const i={x:(0,s._1)(e,"x","gather"),indices:(0,s._1)(t,"indices","gather","int32")},u={axis:n,batchDims:o};return r.BV.runKernel(a.qi_,i,u)}})},1694:(e,t,n)=>{"use strict";n.d(t,{p:()=>u});var r=n(3421),a=n(5202),s=n(9201),o=n(8516),i=n(2011);const u=(0,n(128).op)({greater_:function(e,t){let n=(0,o._1)(e,"a","greater","string_or_numeric"),u=(0,o._1)(t,"b","greater","string_or_numeric");[n,u]=(0,s.makeTypesMatch)(n,u),(0,i.assertAndGetBroadcastShape)(n.shape,u.shape);const l={a:n,b:u};return r.BV.runKernel(a.iZT,l)}})},6731:(e,t,n)=>{"use strict";n.d(t,{b:()=>u});var r=n(3421),a=n(5202),s=n(9201),o=n(8516),i=n(2011);const u=(0,n(128).op)({greaterEqual_:function(e,t){let n=(0,o._1)(e,"a","greaterEqual","string_or_numeric"),u=(0,o._1)(t,"b","greaterEqual","string_or_numeric");[n,u]=(0,s.makeTypesMatch)(n,u),(0,i.assertAndGetBroadcastShape)(n.shape,u.shape);const l={a:n,b:u};return r.BV.runKernel(a.Acj,l)}})},3819:(e,t,n)=>{"use strict";n.d(t,{a:()=>o});var r=n(3421),a=n(5202),s=n(8516);const o=(0,n(128).op)({imag_:function(e){const t={input:(0,s._1)(e,"input","imag")};return r.BV.runKernel(a.J_u,t)}})},4284:(e,t,n)=>{"use strict";n.d(t,{I:()=>l});var r=n(3421),a=n(5202),s=n(8516),o=n(9740),i=n(128),u=n(2673);const l=(0,i.op)({resizeBilinear_:function(e,t,n=!1,i=!1){const l=(0,s._1)(e,"images","resizeBilinear");o.hu(3===l.rank||4===l.rank,(()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${l.rank}.`)),o.hu(2===t.length,(()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`)),o.hu(!1===i||!1===n,(()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false."));let c=l,p=!1;3===l.rank&&(p=!0,c=(0,u.X)(l,[1,l.shape[0],l.shape[1],l.shape[2]]));const[]=t,d={images:c},h={alignCorners:n,halfPixelCenters:i,size:t},m=r.BV.runKernel(a._Yw,d,h);return p?(0,u.X)(m,[m.shape[1],m.shape[2],m.shape[3]]):m}})},739:(e,t,n)=>{"use strict";n.d(t,{j:()=>l});var r=n(3421),a=n(5202),s=n(8516),o=n(9740),i=n(128),u=n(2673);const l=(0,i.op)({resizeNearestNeighbor_:function(e,t,n=!1,i=!1){const l=(0,s._1)(e,"images","resizeNearestNeighbor");o.hu(3===l.rank||4===l.rank,(()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${l.rank}.`)),o.hu(2===t.length,(()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`)),o.hu("float32"===l.dtype||"int32"===l.dtype,(()=>"`images` must have `int32` or `float32` as dtype")),o.hu(!1===i||!1===n,(()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false."));let c=l,p=!1;3===l.rank&&(p=!0,c=(0,u.X)(l,[1,l.shape[0],l.shape[1],l.shape[2]]));const[]=t,d={images:c},h={alignCorners:n,halfPixelCenters:i,size:t},m=r.BV.runKernel(a.dpD,d,h);return p?(0,u.X)(m,[m.shape[1],m.shape[2],m.shape[3]]):m}})},8846:(e,t,n)=>{"use strict";n.d(t,{x:()=>o});var r=n(3421),a=n(5202),s=n(8516);const o=(0,n(128).op)({isFinite_:function(e){const t={x:(0,s._1)(e,"x","isFinite")};return r.BV.runKernel(a.avt,t)}})},3556:(e,t,n)=>{"use strict";n.d(t,{U:()=>o});var r=n(3421),a=n(5202),s=n(8516);const o=(0,n(128).op)({isInf_:function(e){const t={x:(0,s._1)(e,"x","isInf")};return r.BV.runKernel(a.iWB,t)}})},1557:(e,t,n)=>{"use strict";n.d(t,{i:()=>o});var r=n(3421),a=n(5202),s=n(8516);const o=(0,n(128).op)({isNaN_:function(e){const t={x:(0,s._1)(e,"x","isNaN")};return r.BV.runKernel(a.r7n,t)}})},7397:(e,t,n)=>{"use strict";n.d(t,{h:()=>o});var r=n(3421),a=n(5202),s=n(8516);const o=(0,n(128).op)({leakyRelu_:function(e,t=.2){const n={x:(0,s._1)(e,"x","leakyRelu")},o={alpha:t};return r.BV.runKernel(a.J$2,n,o)}})},2359:(e,t,n)=>{"use strict";n.d(t,{d:()=>u});var r=n(3421),a=n(5202),s=n(9201),o=n(8516),i=n(2011);const u=(0,n(128).op)({less_:function(e,t){let n=(0,o._1)(e,"a","less","string_or_numeric"),u=(0,o._1)(t,"b","less","string_or_numeric");[n,u]=(0,s.makeTypesMatch)(n,u),(0,i.assertAndGetBroadcastShape)(n.shape,u.shape);const l={a:n,b:u};return r.BV.runKernel(a.vtC,l)}})},5573:(e,t,n)=>{"use strict";n.d(t,{z:()=>u});var r=n(3421),a=n(5202),s=n(9201),o=n(8516),i=n(2011);const u=(0,n(128).op)({lessEqual_:function(e,t){let n=(0,o._1)(e,"a","lessEqual","string_or_numeric"),u=(0,o._1)(t,"b","lessEqual","string_or_numeric");[n,u]=(0,s.makeTypesMatch)(n,u),(0,i.assertAndGetBroadcastShape)(n.shape,u.shape);const l={a:n,b:u};return r.BV.runKernel(a.CAk,l)}})},734:(e,t,n)=>{"use strict";n.d(t,{G:()=>l});var r=n(3421),a=n(5202),s=n(8516),o=n(9740),i=n(128),u=n(2673);const l=(0,i.op)({localResponseNormalization_:function(e,t=5,n=1,i=1,l=.5){const c=(0,s._1)(e,"x","localResponseNormalization");o.hu(4===c.rank||3===c.rank,(()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${c.rank}.`)),o.hu(o.GN(t),(()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`));let p=c,d=!1;3===c.rank&&(d=!0,p=(0,u.X)(c,[1,c.shape[0],c.shape[1],c.shape[2]]));const h={x:p},m={depthRadius:t,bias:n,alpha:i,beta:l},f=r.BV.runKernel(a.eZ0,h,m);return d?(0,u.X)(f,[f.shape[1],f.shape[2],f.shape[3]]):f}})},3102:(e,t,n)=>{"use strict";n.d(t,{c:()=>o});var r=n(3421),a=n(5202),s=n(8516);const o=(0,n(128).op)({log_:function(e){const t={x:(0,s._1)(e,"x","log","float32")};return r.BV.runKernel(a.ZbH,t)}})},6883:(e,t,n)=>{"use strict";n.d(t,{K:()=>o});var r=n(3421),a=n(5202),s=n(8516);const o=(0,n(128).op)({log1p_:function(e){const t={x:(0,s._1)(e,"x","log1p")};return r.BV.runKernel(a.kU,t)}})},2959:(e,t,n)=>{"use strict";n.d(t,{e:()=>c});var r=n(3184),a=n(8516),s=n(2805),o=n(7211),i=n(128),u=n(5808),l=n(9876);const c=(0,i.op)({logSigmoid_:function(e){const t=(0,a._1)(e,"x","logSigmoid");return(0,r.cb)((e=>({value:(0,o.W)((0,l.W)((0,o.W)(e))),gradFunc:t=>(0,s.d)(t,(0,u.X)((0,o.W)(e)))})))(t)}})},2929:(e,t,n)=>{"use strict";n.d(t,{C:()=>h});var r=n(3184),a=n(8516),s=n(5875),o=n(8575),i=n(3102),u=n(4991),l=n(2805),c=n(128),p=n(6885),d=n(4786);const h=(0,c.op)({logSoftmax_:function(e,t=-1){const n=(0,a._1)(e,"logits","logSoftmax");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${t}`);return(0,r.cb)(((e,n)=>{const r=(0,u.F)(e,t,!0),a=(0,p.l)(e,r),c=(0,p.l)((0,s.p)(a,"float32"),(0,i.c)((0,d.S)((0,o.Q)(a),t,!0)));return n([c]),{value:c,gradFunc:(e,n)=>{const[r]=n,a=(0,o.Q)(r);return(0,p.l)(e,(0,l.d)((0,d.S)(e,t,!0),a))}}}))(n)}})},2425:(e,t,n)=>{"use strict";n.d(t,{l:()=>m});var r=n(8516),a=n(9740),s=n(7571),o=n(7704),i=n(8575),u=n(3102),l=n(4991),c=n(128),p=n(2673),d=n(6885),h=n(4786);const m=(0,c.op)({logSumExp_:function(e,t=null,n=!1){const c=(0,r._1)(e,"x","logSumExp"),m=(0,a.EC)(t,c.shape),f=(0,l.F)(c,m,!0),g=(0,d.l)(c,f),y=(0,i.Q)(g),b=(0,h.S)(y,m),k=(0,u.c)(b),w=(0,s.I)((0,p.X)(f,k.shape),k);if(n){const e=(0,o.rv)(w.shape,m);return(0,p.X)(w,e)}return w}})},495:(e,t,n)=>{"use strict";n.d(t,{H:()=>i});var r=n(3421),a=n(5202),s=n(8516),o=n(2011);const i=(0,n(128).op)({logicalAnd_:function(e,t){const n=(0,s._1)(e,"a","logicalAnd","bool"),i=(0,s._1)(t,"b","logicalAnd","bool");(0,o.assertAndGetBroadcastShape)(n.shape,i.shape);const u={a:n,b:i};return r.BV.runKernel(a.PYm,u)}})},1917:(e,t,n)=>{"use strict";n.d(t,{h:()=>o});var r=n(3421),a=n(5202),s=n(8516);const o=(0,n(128).op)({logicalNot_:function(e){const t={x:(0,s._1)(e,"x","logicalNot","bool")};return r.BV.runKernel(a.VfG,t)}})},1634:(e,t,n)=>{"use strict";n.d(t,{K:()=>i});var r=n(3421),a=n(5202),s=n(8516),o=n(2011);const i=(0,n(128).op)({logicalOr_:function(e,t){const n=(0,s._1)(e,"a","logicalOr","bool"),i=(0,s._1)(t,"b","logicalOr","bool");(0,o.assertAndGetBroadcastShape)(n.shape,i.shape);const u={a:n,b:i};return r.BV.runKernel(a.MZg,u)}})},7554:(e,t,n)=>{"use strict";n.d(t,{e:()=>u});var r=n(8516),a=n(2011),s=n(495),o=n(1917),i=n(1634);const u=(0,n(128).op)({logicalXor_:function(e,t){const n=(0,r._1)(e,"a","logicalXor","bool"),u=(0,r._1)(t,"b","logicalXor","bool");return(0,a.assertAndGetBroadcastShape)(n.shape,u.shape),(0,s.H)((0,i.K)(e,t),(0,o.h)((0,s.H)(e,t)))}})},312:(e,t,n)=>{"use strict";var r;n.d(t,{I:()=>r}),function(e){e[e.NONE=0]="NONE",e[e.MEAN=1]="MEAN",e[e.SUM=2]="SUM",e[e.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(r||(r={}))},8249:(e,t,n)=>{"use strict";n.d(t,{O:()=>i});var r=n(3421),a=n(5202),s=n(9201),o=n(8516);const i=(0,n(128).op)({matMul_:function(e,t,n=!1,i=!1){let u=(0,o._1)(e,"a","matMul"),l=(0,o._1)(t,"b","matMul");[u,l]=(0,s.makeTypesMatch)(u,l);const c={a:u,b:l},p={transposeA:n,transposeB:i};return r.BV.runKernel(a.XLW,c,p)}})},4991:(e,t,n)=>{"use strict";n.d(t,{F:()=>o});var r=n(3421),a=n(5202),s=n(8516);const o=(0,n(128).op)({max_:function(e,t=null,n=!1){const o={x:(0,s._1)(e,"x","max")},i={reductionIndices:t,keepDims:n};return r.BV.runKernel(a.YoZ,o,i)}})},4433:(e,t,n)=>{"use strict";n.d(t,{_:()=>c});var r=n(3421),a=n(5202),s=n(8516),o=n(9740),i=n(1129),u=n(128),l=n(2673);const c=(0,u.op)({maxPool_:function(e,t,n,u,c){const p=(0,s._1)(e,"x","maxPool");let d=p,h=!1;3===p.rank&&(h=!0,d=(0,l.X)(p,[1,p.shape[0],p.shape[1],p.shape[2]])),o.hu(4===d.rank,(()=>`Error in maxPool: input must be rank 4 but got rank ${d.rank}.`)),o.hu(i.jT(n,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`)),i.m("maxPool",u,c);const m={x:d},f={filterSize:t,strides:n,pad:u,dimRoundingMode:c},g=r.BV.runKernel(a.mTV,m,f);return h?(0,l.X)(g,[g.shape[1],g.shape[2],g.shape[3]]):g}})},3171:(e,t,n)=>{"use strict";n.d(t,{g:()=>l});var r=n(3421),a=n(5202),s=n(9201),o=n(8516),i=n(2011),u=n(5875);const l=(0,n(128).op)({maximum_:function(e,t){let n=(0,o._1)(e,"a","maximum"),l=(0,o._1)(t,"b","maximum");[n,l]=(0,s.makeTypesMatch)(n,l),"bool"===n.dtype&&(n=(0,u.p)(n,"int32"),l=(0,u.p)(l,"int32")),(0,i.assertAndGetBroadcastShape)(n.shape,l.shape);const c={a:n,b:l};return r.BV.runKernel(a.BMI,c)}})},4854:(e,t,n)=>{"use strict";n.d(t,{J:()=>o});var r=n(3421),a=n(5202),s=n(8516);const o=(0,n(128).op)({mean_:function(e,t=null,n=!1){const o={x:(0,s._1)(e,"x","mean")},i={axis:t,keepDims:n};return r.BV.runKernel(a.q2K,o,i)}})},6038:(e,t,n)=>{"use strict";n.d(t,{V:()=>o});var r=n(3421),a=n(5202),s=n(8516);const o=(0,n(128).op)({min_:function(e,t=null,n=!1){const o={x:(0,s._1)(e,"x","min")},i={axis:t,keepDims:n};return r.BV.runKernel(a.c17,o,i)}})},7511:(e,t,n)=>{"use strict";n.d(t,{L:()=>l});var r=n(3421),a=n(5202),s=n(9201),o=n(8516),i=n(2011),u=n(5875);const l=(0,n(128).op)({minimum_:function(e,t){let n=(0,o._1)(e,"a","minimum"),l=(0,o._1)(t,"b","minimum");[n,l]=(0,s.makeTypesMatch)(n,l),"bool"===n.dtype&&(n=(0,u.p)(n,"int32"),l=(0,u.p)(l,"int32")),(0,i.assertAndGetBroadcastShape)(n.shape,l.shape);const c={a:n,b:l};return r.BV.runKernel(a.q8u,c)}})},4267:(e,t,n)=>{"use strict";n.d(t,{V:()=>i});var r=n(3421),a=n(5202),s=n(8516),o=n(9740);const i=(0,n(128).op)({mirrorPad_:function(e,t,n){o.hu("reflect"===n||"symmetric"===n,(()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`));const i=(0,s._1)(e,"x","mirrorPad");if(0===i.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");o.hu(t.length===i.rank,(()=>`Padding doesn't match input. Must be ${i.rank}. Got ${t.length}.`));const u="reflect"===n?1:0;for(let e=0;e<i.rank;e++)o.hu(2===t[e].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),o.hu(t[e][0]>=0&&t[e][0]<=i.shape[e]-u&&t[e][1]>=0&&t[e][1]<=i.shape[e]-u,(()=>`Padding in dimension ${e} cannot be greater than or equal to ${i.shape[e]-u} or less than 0 for input of shape ${i.shape}`));const l={paddings:t,mode:n},c={x:i};return r.BV.runKernel(a.jQs,c,l)}})},5475:(e,t,n)=>{"use strict";n.d(t,{w:()=>i});var r=n(3421),a=n(5202),s=n(9201),o=n(8516);const i=(0,n(128).op)({mod_:function(e,t){let n=(0,o._1)(e,"a","mod"),i=(0,o._1)(t,"b","mod");[n,i]=(0,s.makeTypesMatch)(n,i);const u={a:n,b:i};return r.BV.runKernel(a.Vbg,u)}})},2805:(e,t,n)=>{"use strict";n.d(t,{d:()=>i});var r=n(3421),a=n(5202),s=n(9201),o=n(8516);const i=(0,n(128).op)({mul_:function(e,t){let n=(0,o._1)(e,"a","mul"),i=(0,o._1)(t,"b","mul");[n,i]=(0,s.makeTypesMatch)(n,i);const u={a:n,b:i};return r.BV.runKernel(a.wYn,u)}})},7211:(e,t,n)=>{"use strict";n.d(t,{W:()=>o});var r=n(3421),a=n(5202),s=n(8516);const o=(0,n(128).op)({neg_:function(e){const t={x:(0,s._1)(e,"x","neg")};return r.BV.runKernel(a.kuV,t)}})},1458:(e,t,n)=>{"use strict";n.d(t,{K:()=>y});var r=n(8516),a=n(9740),s=n(6720),o=n(7704),i=n(4991),u=n(6038),l=n(128),c=n(3788),p=n(2673),d=n(2502),h=n(7346),m=n(6966),f=n(4786);function g(e,t,n=null){if(0===e.rank)return(0,s.W)(e);if(1!==e.rank&&null===n)return g((0,p.X)(e,[-1]),t,n);if(1===e.rank||"number"==typeof n||Array.isArray(n)&&1===n.length){if(1===t)return(0,f.S)((0,s.W)(e),n);if(t===1/0)return(0,i.F)((0,s.W)(e),n);if(t===-1/0)return(0,u.V)((0,s.W)(e),n);if("euclidean"===t||2===t)return(0,h._)((0,f.S)((0,c.s)((0,s.W)(e),(0,d.i)(2,"int32")),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}if(Array.isArray(n)&&2===n.length){if(1===t)return(0,i.F)((0,f.S)((0,s.W)(e),n[0]),n[1]-1);if(t===1/0)return(0,i.F)((0,f.S)((0,s.W)(e),n[1]),n[0]);if(t===-1/0)return(0,u.V)((0,f.S)((0,s.W)(e),n[1]),n[0]);if("fro"===t||"euclidean"===t)return(0,h._)((0,f.S)((0,m.h)(e),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}throw new Error(`Error in norm: invalid axis: ${n}`)}const y=(0,l.op)({norm_:function(e,t="euclidean",n=null,s=!1){const i=g(e=(0,r._1)(e,"x","norm"),t,n);let u=i.shape;if(s){const t=(0,a.EC)(n,e.shape);u=o.rv(i.shape,t)}return(0,p.X)(i,u)}})},1576:(e,t,n)=>{"use strict";n.d(t,{Q:()=>u});var r=n(3421),a=n(5202),s=n(9201),o=n(8516),i=n(2011);const u=(0,n(128).op)({notEqual_:function(e,t){let n=(0,o._1)(e,"a","notEqual","string_or_numeric"),u=(0,o._1)(t,"b","notEqual","string_or_numeric");[n,u]=(0,s.makeTypesMatch)(n,u),(0,i.assertAndGetBroadcastShape)(n.shape,u.shape);const l={a:n,b:u};return r.BV.runKernel(a.yQU,l)}})},7910:(e,t,n)=>{"use strict";n.d(t,{l:()=>o});var r=n(3421),a=n(5202),s=n(8516);const o=(0,n(128).op)({oneHot_:function(e,t,n=1,o=0,i="int32"){if(t<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);const u={indices:(0,s._1)(e,"indices","oneHot","int32")},l={dtype:i,depth:t,onValue:n,offValue:o};return r.BV.runKernel(a.we_,u,l)}})},8074:(e,t,n)=>{"use strict";n.d(t,{i:()=>i});var r=n(3421),a=n(9740),s=n(6609),o=n(1434);function i(e,t="float32"){if((0,a.Mu)(e),"complex64"===t){const t=i(e,"float32"),n=(0,o.l)(e,"float32");return(0,s.P)(t,n)}const n=(0,a.p8)((0,a.NA)(e),t);return r.BV.makeTensor(n,e,t)}},9622:(e,t,n)=>{"use strict";n.d(t,{J:()=>o});var r=n(3421),a=n(5202),s=n(8516);const o=(0,n(128).op)({onesLike_:function(e){const t={x:(0,s._1)(e,"x","onesLike")};return r.BV.runKernel(a.qWM,t)}})},128:(e,t,n)=>{"use strict";n.d(t,{op:()=>o,z:()=>s});var r=n(3421),a=n(9740);const s="__op";function o(e){const t=Object.keys(e);if(1!==t.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let n=t[0];const o=e[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+=s;const i=(...e)=>{r.BV.startScope(n);try{const t=o(...e);return(0,a.tI)(t)&&console.error("Cannot return a Promise inside of tidy."),r.BV.endScope(t),t}catch(e){throw r.BV.endScope(null),e}};return Object.defineProperty(i,"name",{value:n,configurable:!0}),i}},886:(e,t,n)=>{"use strict";n.d(t,{zvA:()=>d.z,WnP:()=>a.W,Khb:()=>s.K,__u:()=>o._,IHx:()=>i.I,QBD:()=>h,$6P:()=>m.$,YjB:()=>f.Y,NqF:()=>g.N,vHJ:()=>y.v,ZRM:()=>b.Z,VfV:()=>k.V,z4N:()=>w.z,fvJ:()=>v.f,C80:()=>N.C,wS1:()=>x.w,uR5:()=>_,zEQ:()=>O,tgs:()=>R.t,Dxk:()=>V,JY5:()=>C,p3b:()=>z,E4h:()=>B.E,yE8:()=>P,anm:()=>Qn,XsQ:()=>L,UFq:()=>H.U,f3b:()=>W.f,pju:()=>S.p,mDi:()=>G.m,iUl:()=>U.i,d9v:()=>q.d,PYB:()=>j.P,zoF:()=>E.z,gME:()=>K,Izb:()=>X,MNy:()=>Z,ZaL:()=>Q,PAt:()=>Y.P,Tek:()=>J.T,bc:()=>ee.b,pdZ:()=>te,$QV:()=>re,mCk:()=>ae.m,f9Y:()=>se.f,mew:()=>ur,$Gn:()=>oe.$,zbp:()=>ie.z,ppE:()=>ue,nTT:()=>le.n,B10:()=>ce.B,Ka3:()=>pe,WmZ:()=>de.W,hiC:()=>he.h,NTj:()=>me.N,AKD:()=>fe.A,rvX:()=>or,WYO:()=>ge,pyx:()=>ye.p,GRh:()=>ir,DgJ:()=>be.D,qNN:()=>ke.q,d2q:()=>we.d,Qqt:()=>ve.Q,dt4:()=>Ne.d,t$B:()=>xe.t,iyy:()=>Te,kp_:()=>bn.k,hlL:()=>Ie.h,GWj:()=>_e.G,qPi:()=>Ee.q,imm:()=>r,Iqj:()=>Ae.I,dbB:()=>sr,pjt:()=>Me.p,brS:()=>De.b,Sxn:()=>kn.S,asL:()=>Fe.a,BHj:()=>ia,V3u:()=>lr,wx0:()=>wn.w,xVT:()=>$e.x,UWc:()=>Oe.U,i2d:()=>Be.i,hi7:()=>Re.h,d9m:()=>Ve.d,zN1:()=>Ce.z,$r2:()=>ua,SX3:()=>ze,G9k:()=>Pe.G,cM7:()=>Le.c,Krr:()=>He.K,e_t:()=>We.e,CmS:()=>Ge.C,l_t:()=>Ue.l,HvI:()=>qe.H,hJK:()=>je.h,K5V:()=>Ke.K,egP:()=>Xe.e,MB5:()=>la,eab:()=>Ye,OI3:()=>A.O,Fp7:()=>Je.F,_sB:()=>et._,YQQ:()=>tt,Ip$:()=>nt,gWQ:()=>rt.g,J69:()=>at.J,ry_:()=>it,VV$:()=>ut.V,LTh:()=>lt.L,VdP:()=>ct.V,wQq:()=>pt.w,Gi7:()=>ft,p_:()=>tr,dC7:()=>M.d,rq4:()=>gt,SJ_:()=>yt,W76:()=>bt.W,KOy:()=>Jn.K,Quu:()=>kt.Q,lfX:()=>wt.l,iUs:()=>st.i,JpU:()=>vt.J,op:()=>d.op,N2O:()=>Nt,vku:()=>xt.v,pNR:()=>St,koy:()=>Tt,t1L:()=>It,lGY:()=>_t,d_R:()=>Et.d,sQ3:()=>At.s,AL3:()=>Mt.A,S0v:()=>Dt.S,WVs:()=>Ft.W,$gW:()=>$t,VT$:()=>Ot,N89:()=>Bt,TN_:()=>Rt,wzB:()=>Lt,nGf:()=>Ht,ruB:()=>Wt,LGj:()=>Gt,w6H:()=>Ut,kwC:()=>qt.k,M25:()=>jt.M,UYe:()=>Kt.U,btT:()=>Xt.b,XLQ:()=>I.X,GYS:()=>Zt.G,SDf:()=>Qt,diP:()=>Yt,sx7:()=>Jt,mG2:()=>en,QEs:()=>vn.Q,NMM:()=>tn.N,bp0:()=>nn.b,iD$:()=>rn.i,snQ:()=>rr,zcT:()=>Qe,U8D:()=>an.U,U_I:()=>sn.U,ODp:()=>on,XD2:()=>D.X,Xxe:()=>un.X,tdS:()=>oa,O$l:()=>ln.O,R_K:()=>cn.R,tPi:()=>F.t,jZU:()=>pn,SmN:()=>dn,CnO:()=>hn,p0P:()=>mn,XAC:()=>fn.X,Wvh:()=>gn.W,fBT:()=>yn.f,rVs:()=>ca,ers:()=>ar,uN7:()=>sa,Vl2:()=>Nn.V,_b3:()=>xn._,h62:()=>ht.h,$i:()=>Sn.$,L9e:()=>Tn.L,knu:()=>In.k,Nbs:()=>_n.N,NXj:()=>En.N,Z_8:()=>pa,luU:()=>mt.l,Smz:()=>An.S,ORZ:()=>Mn.O,AEp:()=>$.A,XeE:()=>Dn.X,RRF:()=>$n,odF:()=>On,wOQ:()=>Bn.w,yXz:()=>Rn,Bfx:()=>Vn,xZs:()=>Cn,Gg6:()=>Se.G,hg7:()=>zn.h,p4s:()=>Yn.p,Xu6:()=>Pn,Two:()=>Ln.T,pUJ:()=>Hn.p,HHK:()=>Wn.H,GaM:()=>Gn,VD$:()=>Un,arb:()=>qn.a,itS:()=>Kn,lls:()=>Xn.l,P84:()=>Zn.P});var r={};n.r(r),n.d(r,{conv2d:()=>fr,depthwiseConv2d:()=>br,matMul:()=>kr});var a=n(6720),s=n(8866),o=n(6039),i=n(7571),u=n(3421),l=n(5202),c=n(8516),p=n(9740),d=n(128);const h=(0,d.op)({addN_:function(e){p.hu(Array.isArray(e),(()=>"The argument passed to tf.addN() must be a list of tensors")),p.hu(e.length>=1,(()=>`Must pass at least one tensor to tf.addN(), but got ${e.length}`));const t=e.map(((e,t)=>(0,c._1)(e,`tensors${t}`,"addN"))),n=t[0];t.forEach((e=>{if(e.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")})),t.forEach((e=>{if(!p.cO(e.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}));const r=t;return u.BV.runKernel(l.Xze,r)}});var m=n(7590),f=n(6298),g=n(1523),y=n(9542),b=n(5492),k=n(3927),w=n(2418),v=n(4002),N=n(5602),x=n(9385),S=n(5875),T=n(1129),I=n(2673);const _=(0,d.op)({avgPool3d_:function(e,t,n,r,a,s="NDHWC"){const o=(0,c._1)(e,"x","avgPool3d","float32");let i=o,d=!1;4===o.rank&&(d=!0,i=(0,I.X)(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),p.hu(5===i.rank,(()=>`Error in avgPool3d: x must be rank 5 but got rank ${i.rank}.`)),p.hu("NDHWC"===s,(()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${s}`)),p.hu("number"==typeof n&&n>0||Array.isArray(n)&&n[0]>0&&n[1]>0&&n[2]>0,(()=>`Error in avgPool3d: Stride must be > 0, but got '${n}'`)),(0,T.m)("avgPool3d",r,a);const h={x:i},m={filterSize:t,strides:n,pad:r,dimRoundingMode:a,dataFormat:s};let f=u.BV.runKernel(l._k9,h,m);return f=(0,S.p)(f,i.dtype),d?(0,I.X)(f,[f.shape[1],f.shape[2],f.shape[3],f.shape[4]]):f}});var E=n(9134),A=n(8249),M=n(2805),D=n(5808),F=n(2565),$=n(1871);const O=(0,d.op)({basicLSTMCell_:function(e,t,n,r,a,s){const o=(0,c._1)(e,"forgetBias","basicLSTMCell"),u=(0,c._1)(t,"lstmKernel","basicLSTMCell"),l=(0,c._1)(n,"lstmBias","basicLSTMCell"),p=(0,c._1)(r,"data","basicLSTMCell"),d=(0,c._1)(a,"c","basicLSTMCell"),h=(0,c._1)(s,"h","basicLSTMCell"),m=(0,E.z)([p,h],1),f=(0,A.O)(m,u),g=(0,i.I)(f,l),y=g.shape[0],b=g.shape[1]/4,k=[y,b],w=(0,F.t)(g,[0,0],k),v=(0,F.t)(g,[0,b],k),N=(0,F.t)(g,[0,2*b],k),x=(0,F.t)(g,[0,3*b],k),S=(0,i.I)((0,M.d)((0,D.X)(w),(0,$.A)(v)),(0,M.d)(d,(0,D.X)((0,i.I)(o,N))));return[S,(0,M.d)((0,$.A)(S),(0,D.X)(x))]}});var B=n(1141),R=n(8325);const V=(0,d.op)({batchNorm2d_:function(e,t,n,r,a,s){const o=(0,c._1)(e,"x","batchNorm"),i=(0,c._1)(t,"mean","batchNorm"),u=(0,c._1)(n,"variance","batchNorm");let l,d;return null!=a&&(l=(0,c._1)(a,"scale","batchNorm")),null!=r&&(d=(0,c._1)(r,"offset","batchNorm")),p.hu(2===o.rank,(()=>`Error in batchNorm2D: x must be rank 2 but got rank ${o.rank}.`)),p.hu(2===i.rank||1===i.rank,(()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${i.rank}.`)),p.hu(2===u.rank||1===u.rank,(()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${u.rank}.`)),null!=l&&p.hu(2===l.rank||1===l.rank,(()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${l.rank}.`)),null!=d&&p.hu(2===d.rank||1===d.rank,(()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${d.rank}.`)),(0,R.t)(o,i,u,d,l,s)}}),C=(0,d.op)({batchNorm3d_:function(e,t,n,r,a,s){const o=(0,c._1)(e,"x","batchNorm"),i=(0,c._1)(t,"mean","batchNorm"),u=(0,c._1)(n,"variance","batchNorm");let l,d;return null!=a&&(l=(0,c._1)(a,"scale","batchNorm")),null!=r&&(d=(0,c._1)(r,"offset","batchNorm")),p.hu(3===o.rank,(()=>`Error in batchNorm3D: x must be rank 3 but got rank ${o.rank}.`)),p.hu(3===i.rank||1===i.rank,(()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${i.rank}.`)),p.hu(3===u.rank||1===u.rank,(()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${u.rank}.`)),null!=l&&p.hu(3===l.rank||1===l.rank,(()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${l.rank}.`)),null!=d&&p.hu(3===d.rank||1===d.rank,(()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${d.rank}.`)),(0,R.t)(o,i,u,d,l,s)}}),z=(0,d.op)({batchNorm4d_:function(e,t,n,r,a,s){const o=(0,c._1)(e,"x","batchNorm"),i=(0,c._1)(t,"mean","batchNorm"),u=(0,c._1)(n,"variance","batchNorm");let l,d;return null!=a&&(l=(0,c._1)(a,"scale","batchNorm")),null!=r&&(d=(0,c._1)(r,"offset","batchNorm")),p.hu(4===o.rank,(()=>`Error in batchNorm4D: x must be rank 4 but got rank ${o.rank}.`)),p.hu(4===i.rank||1===i.rank,(()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${i.rank}.`)),p.hu(4===u.rank||1===u.rank,(()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${u.rank}.`)),null!=l&&p.hu(4===l.rank||1===l.rank,(()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${l.rank}.`)),null!=d&&p.hu(4===d.rank||1===d.rank,(()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${d.rank}.`)),(0,R.t)(o,i,u,d,l,s)}}),P=(0,d.op)({bincount_:function(e,t,n){const r=(0,c._1)(e,"x","bincount"),a=(0,c._1)(t,"weights","bincount");p.hu("int32"===r.dtype,(()=>`Error in bincount: input dtype must be int32, but got ${r.dtype}`)),p.hu(n>=0,(()=>`size must be non-negative, but got ${n}.`)),p.hu(a.size===r.size||0===a.size,(()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${r.shape}, weights shape: ${a.shape}.`));const s={x:r,weights:a},o={size:n};return u.BV.runKernel(l.zvY,s,o)}}),L=(0,d.op)({broadcastArgs_:function(e,t){const n=(0,c._1)(e,"s0","broadcastArgs","int32"),r=(0,c._1)(t,"s1","broadcastArgs","int32");if(1!==n.rank)throw new Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${n.rank}`);if(1!==r.rank)throw new Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${r.rank}`);const a={s0:n,s1:r};return u.BV.runKernel(l.eEB,a)}});var H=n(7933),W=n(1744),G=n(8498),U=n(3092),q=n(1107),j=n(6609);const K=(0,d.op)({concat1d_:function(e){return(0,E.z)(e,0)}}),X=(0,d.op)({concat2d_:function(e,t){return(0,E.z)(e,t)}}),Z=(0,d.op)({concat3d_:function(e,t){return(0,E.z)(e,t)}}),Q=(0,d.op)({concat4d_:function(e,t){return(0,E.z)(e,t)}});var Y=n(6409),J=n(9399),ee=n(7905);const te=(0,d.op)({conv3d_:function(e,t,n,r,a="NDHWC",s=[1,1,1]){const o=(0,c._1)(e,"x","conv3d"),i=(0,c._1)(t,"filter","conv3d");let d=o,h=!1;4===o.rank&&(h=!0,d=(0,I.X)(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),p.hu(5===d.rank,(()=>`Error in conv3d: input must be rank 5, but got rank ${d.rank}.`)),p.hu(5===i.rank,(()=>`Error in conv3d: filter must be rank 5, but got rank ${i.rank}.`)),p.hu(d.shape[4]===i.shape[3],(()=>`Error in conv3d: depth of input (${d.shape[4]}) must match input depth for filter ${i.shape[3]}.`)),p.hu((0,T.jT)(n,s),(()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${s}'`)),p.hu("NDHWC"===a,(()=>`Error in conv3d: got dataFormat of ${a} but only NDHWC is currently supported.`)),p.hu((0,T.U3)(s),(()=>"Error in conv3D: Dilated rates should be larger than 0.")),p.hu((0,T.U3)(n),(()=>"Error in conv3D: Strides should be larger than 0."));const m={x:d,filter:i},f={strides:n,pad:r,dataFormat:a,dilations:s},g=u.BV.runKernel(l.x12,m,f);return h?(0,I.X)(g,[g.shape[1],g.shape[2],g.shape[3],g.shape[4]]):g}});var ne=n(2833);const re=(0,d.op)({conv3dTranspose_:function(e,t,n,r,a){const s=(0,c._1)(e,"x","conv3dTranspose"),o=(0,c._1)(t,"filter","conv3dTranspose");return(0,ne._)(n,s,o,r,a)}});var ae=n(7838),se=n(3159),oe=n(900),ie=n(805);const ue=(0,d.op)({denseBincount_:function(e,t,n,r=!1){const a=(0,c._1)(e,"x","denseBincount"),s=(0,c._1)(t,"weights","denseBincount");p.hu("int32"===a.dtype,(()=>`Error in denseBincount: input dtype must be int32, but got ${a.dtype}`)),p.hu(a.rank<=2,(()=>`Error in denseBincount: input must be at most rank 2, but got rank ${a.rank}.`)),p.hu(n>=0,(()=>`size must be non-negative, but got ${n}.`)),p.hu(s.size===a.size||0===s.size,(()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${a.shape}, weights shape: ${s.shape}.`));const o={x:a,weights:s},i={size:n,binaryOutput:r};return u.BV.runKernel(l.QRR,o,i)}});var le=n(8058),ce=n(6581);const pe=(0,d.op)({diag_:function(e){const t={x:(0,c._1)(e,"x","diag")};return u.BV.runKernel(l.$w,t)}});var de=n(9605),he=n(2639),me=n(2152),fe=n(7465);const ge=(0,d.op)({einsum_:function(e,...t){const n=t.map(((e,t)=>(0,c._1)(e,`tensors${t}`,"einsum"))),r={equation:e};return u.BV.runKernel(l.$g6,n,r)}});var ye=n(9673),be=n(1966),ke=n(6352),we=n(7637),ve=n(8575),Ne=n(1064),xe=n(177),Se=n(3239);const Te=(0,d.op)({eye_:function(e,t,n,r="float32"){null==t&&(t=e);const a=(0,W.f)([e,t],r),s=e<=t?e:t;for(let e=0;e<s;++e)a.set(1,e,e);const o=(0,I.X)(a.toTensor(),[e,t]);if(null==n)return o;if(1===n.length)return(0,Se.G)((0,Ne.d)(o,0),[n[0],1,1]);if(2===n.length)return(0,Se.G)((0,Ne.d)((0,Ne.d)(o,0),0),[n[0],n[1],1,1]);if(3===n.length)return(0,Se.G)((0,Ne.d)((0,Ne.d)((0,Ne.d)(o,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}});var Ie=n(5210),_e=n(7184),Ee=n(6986),Ae=n(5262),Me=n(1694),De=n(6731),Fe=n(3819),$e=n(8846),Oe=n(3556),Be=n(1557),Re=n(7397),Ve=n(2359),Ce=n(5573);function ze(e,t,n){if(n<=0)throw new Error("The number of values should be positive.");const r={start:e,stop:t,num:n};return u.BV.runKernel(l.e7N,{},r)}var Pe=n(734),Le=n(3102),He=n(6883),We=n(2959),Ge=n(2929),Ue=n(2425),qe=n(495),je=n(1917),Ke=n(1634),Xe=n(7554);const Ze=2147483648,Qe=(0,d.op)({searchSorted_:function(e,t,n="left"){const r=(0,c._1)(e,"sortedSequence","searchSorted"),a=(0,c._1)(t,"values","searchSorted"),s=r.shape[r.shape.length-1],o=a.shape[a.shape.length-1],i=(0,I.X)(r,[-1,s]),d=(0,I.X)(a,[-1,o]);if(i.rank<2)throw new Error("Sorted input argument must be at least 2-dimensional");if(i.shape[0]!==d.shape[0])throw new Error("Leading dimension of 'sortedSequence' and 'values' must match.");if((0,p.NA)(d.shape)>=Ze)throw new Error("values tensor size must less than 2147483648");if(i.shape[1]>=Ze)throw new Error(`trailing dim_size must less than 2147483648 for int32 output type, was ${i.shape[1]}`);const h={sortedSequence:i,values:d},m={side:n};return u.BV.runKernel(l.nr8,h,m)}});function Ye(e,t){return Qe(e,t,"left")}var Je=n(4991),et=n(4433);const tt=(0,d.op)({maxPool3d_:function(e,t=[1,1,1],n,r,a,s="NDHWC"){const o=(0,c._1)(e,"x","maxPool3d");let i=o,d=!1;4===o.rank&&(d=!0,i=(0,I.X)(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),p.hu(5===i.rank,(()=>`Error in maxPool3d: x must be rank 5 but got rank ${i.rank}.`)),p.hu("NDHWC"===s,(()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${s}`)),(0,T.m)("maxPool3d",r,a);const h={x:i},m={filterSize:t,strides:n,pad:r,dimRoundingMode:a,dataFormat:s},f=u.BV.runKernel(l.OAf,h,m);return d?(0,I.X)(f,[f.shape[1],f.shape[2],f.shape[3],f.shape[4]]):f}}),nt=(0,d.op)({maxPoolWithArgmax_:function(e,t,n,r,a=!1){const s={x:(0,c._1)(e,"x","maxPoolWithArgmax")},o={filterSize:t,strides:n,pad:r,includeBatchInIndex:a},i=u.BV.runKernel(l.vFR,s,o);return{result:i[0],indexes:i[1]}}});var rt=n(3171),at=n(4854),st=n(8074),ot=n(1313);function it(e,t,{indexing:n="xy"}={}){if("xy"!==n&&"ij"!==n)throw new TypeError(`${n} is not a valid third argument to meshgrid`);if(void 0===e)return[];let r=(0,c._1)(e,"x","meshgrid",e instanceof ot.es?e.dtype:"float32");if(void 0===t)return[r];let a=(0,c._1)(t,"y","meshgrid",t instanceof ot.es?t.dtype:"float32");const s=(0,p.NA)(r.shape),o=(0,p.NA)(a.shape);return"xy"===n?(r=(0,I.X)(r,[1,-1]),a=(0,I.X)(a,[-1,1]),[(0,A.O)((0,st.i)([o,1],r.dtype),r),(0,A.O)(a,(0,st.i)([1,s],a.dtype))]):(r=(0,I.X)(r,[-1,1]),a=(0,I.X)(a,[1,-1]),[(0,A.O)(r,(0,st.i)([1,o],r.dtype)),(0,A.O)((0,st.i)([s,1],a.dtype),a)])}var ut=n(6038),lt=n(7511),ct=n(4267),pt=n(5475),dt=n(7704),ht=n(6966),mt=n(6885);const ft=(0,d.op)({moments_:function(e,t=null,n=!1){e=(0,c._1)(e,"x","moments");const r=(0,p.EC)(t,e.shape),a=(0,at.J)(e,r,n);let s=a.shape;n||(s=(0,dt.rv)(a.shape,r));const o=(0,ht.h)((0,mt.l)((0,S.p)(e,"float32"),(0,I.X)(a,s)));return{mean:a,variance:(0,at.J)(o,r,n)}}}),gt=(0,d.op)({multiRNNCell_:function(e,t,n,r){const a=(0,c._1)(t,"data","multiRNNCell"),s=(0,c.sI)(n,"c","multiRNNCell"),o=(0,c.sI)(r,"h","multiRNNCell");let i=a;const u=[];for(let t=0;t<e.length;t++){const n=e[t](i,s[t],o[t]);u.push(n[0]),u.push(n[1]),i=n[1]}const l=[],p=[];for(let e=0;e<u.length;e+=2)l.push(u[e]),p.push(u[e+1]);return[l,p]}}),yt=(0,d.op)({multinomial_:function(e,t,n,r=!1){const a=(0,c._1)(e,"logits","multinomial"),s=a.size,o=a.rank;if(s<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${s}.`);if(o>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${o}`);n=n||Math.random();const i={logits:1===o?(0,I.X)(a,[1,-1]):a},p={numSamples:t,seed:n,normalized:r},d=u.BV.runKernel(l.NZg,i,p);return 1===o?(0,I.X)(d,[d.size]):d}});var bt=n(7211),kt=n(1576),wt=n(7910),vt=n(9622);const Nt=(0,d.op)({outerProduct_:function(e,t){const n=(0,c._1)(e,"v1","outerProduct"),r=(0,c._1)(t,"v2","outerProduct");p.hu(1===n.rank&&1===r.rank,(()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${n.rank} and ${r.rank}.`));const a=(0,I.X)(n,[-1,1]),s=(0,I.X)(r,[1,-1]);return(0,A.O)(a,s)}});var xt=n(7039);const St=(0,d.op)({pad1d_:function(e,t,n=0){return(0,p.hu)(2===t.length,(()=>"Invalid number of paddings. Must be length of 2.")),(0,xt.v)(e,[t],n)}}),Tt=(0,d.op)({pad2d_:function(e,t,n=0){return(0,p.hu)(2===t.length&&2===t[0].length&&2===t[1].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),(0,xt.v)(e,t,n)}}),It=(0,d.op)({pad3d_:function(e,t,n=0){return(0,p.hu)(3===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),(0,xt.v)(e,t,n)}}),_t=(0,d.op)({pad4d_:function(e,t,n=0){return(0,p.hu)(4===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length&&2===t[3].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),(0,xt.v)(e,t,n)}});var Et=n(4349),At=n(3788),Mt=n(1224),Dt=n(4703),Ft=n(3610);const $t=(0,d.op)({raggedGather_:function(e,t,n,r){const a={paramsNestedSplits:e.map(((e,t)=>(0,c._1)(e,`tensors${t}`,"raggedGather","int32"))),paramsDenseValues:(0,c._1)(t,"paramsDenseValues","raggedGather"),indices:(0,c._1)(n,"indices","raggedGather","int32")},s={outputRaggedRank:r},o=u.BV.runKernel(l.dDz,a,s);return{outputNestedSplits:o.slice(0,o.length-1),outputDenseValues:o[o.length-1]}}}),Ot=(0,d.op)({raggedRange_:function(e,t,n){const r=(0,c._1)(e,"starts","raggedRange"),a={starts:r,limits:(0,c._1)(t,"limits","raggedRange",r.dtype),deltas:(0,c._1)(n,"deltas","raggedRange",r.dtype)},s=u.BV.runKernel(l.CQl,a);return{rtNestedSplits:s[0],rtDenseValues:s[1]}}}),Bt=(0,d.op)({raggedTensorToTensor_:function(e,t,n,r,a){const s=(0,c._1)(e,"shape","raggedTensorToTensor","int32"),o=(0,c._1)(t,"values","raggedTensorToTensor"),i={shape:s,values:o,defaultValue:(0,c._1)(n,"defaultValue","raggedTensorToTensor",o.dtype),rowPartitionTensors:r.map(((e,t)=>(0,c._1)(e,`tensors${t}`,"raggedTensorToTensor","int32")))},p={rowPartitionTypes:a};return u.BV.runKernel(l.BiW,i,p)}}),Rt=(0,d.op)({rand_:function(e,t,n){(0,p.Mu)(e);const r=(0,p.NA)(e);let a=null;if(null==n||"float32"===n)a=new Float32Array(r);else if("int32"===n)a=new Int32Array(r);else{if("bool"!==n)throw new Error(`Unknown data type ${n}`);a=new Uint8Array(r)}for(let e=0;e<r;e++)a[e]=t();return u.BV.makeTensor(a,e,n)}});var Vt=n(521);class Ct{constructor(e,t,n,r,a){this.mean=e,this.stdDev=t,this.dtype=n,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const s=a||Math.random();this.random=Vt.alea(s.toString())}nextValue(){if(!isNaN(this.nextVal)){const e=this.nextVal;return this.nextVal=NaN,e}let e,t,n=!1;for(;!n;){let r,a,s;do{r=2*this.random()-1,a=2*this.random()-1,s=r*r+a*a}while(s>=1||0===s);const o=Math.sqrt(-2*Math.log(s)/s);e=this.mean+this.stdDev*r*o,t=this.mean+this.stdDev*a*o,this.truncated&&!this.isValidTruncated(e)||(n=!0)}return this.truncated&&!this.isValidTruncated(t)||(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return null==this.dtype||"float32"===this.dtype?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}}class zt{constructor(e,t,n,r){this.alpha=e,this.beta=1/t,this.dtype=n;const a=r||Math.random();this.randu=Vt.alea(a.toString()),this.randn=new Ct(0,1,n,!1,this.randu()),this.d=e<1?e+2/3:e-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let e,t,n,r,a,s;for(;;){do{r=this.randn.nextValue(),s=1+this.c*r}while(s<=0);if(s*=s*s,e=r*r,t=1-.331*e*e,n=.5*e+this.d*(1-s+Math.log(s)),a=this.randu(),a<t||Math.log(a)<n)break}return s=1/this.beta*this.d*s,this.alpha<1&&(s*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(s)}convertValue(e){return"float32"===this.dtype?e:Math.round(e)}}class Pt{constructor(e=0,t=1,n,r){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=e,this.range=t-e,this.dtype=n,null==r&&(r=Math.random()),"number"==typeof r&&(r=r.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=Vt.alea(r)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const Lt=(0,d.op)({randomGamma_:function(e,t,n=1,r="float32",a){if((0,p.Mu)(e),null==n&&(n=1),null==r&&(r="float32"),"float32"!==r&&"int32"!==r)throw new Error(`Unsupported data type ${r}`);const s=new zt(t,n,r,a),o=(0,W.f)(e,r);for(let e=0;e<o.values.length;e++)o.values[e]=s.nextValue();return o.toTensor()}}),Ht=(0,d.op)({randomNormal_:function(e,t=0,n=1,r,a){if((0,p.Mu)(e),null!=r&&"bool"===r)throw new Error(`Unsupported data type ${r}`);const s=new Ct(t,n,r,!1,a),o=(0,W.f)(e,r);for(let e=0;e<o.values.length;e++)o.values[e]=s.nextValue();return o.toTensor()}}),Wt=(0,d.op)({randomStandardNormal_:function(e,t,n){if(null!=t&&"bool"===t)throw new Error(`Unsupported data type ${t}`);return Ht(e,0,1,t,n)}}),Gt=(0,d.op)({randomUniform_:function(e,t=0,n=1,r="float32",a){(0,p.Mu)(e);const s=(0,W.f)(e,r),o=new Pt(t,n,null,a);for(let e=0;e<s.values.length;e++)s.values[e]=o.nextValue();return s.toTensor()}});function Ut(e,t,n=1,r="float32"){if(0===n)throw new Error("Cannot have a step of zero");const a={start:e,stop:t,step:n,dtype:r};return u.BV.runKernel(l.e6w,{},a)}var qt=n(8268),jt=n(3217),Kt=n(8536),Xt=n(9902),Zt=n(4330);const Qt=(0,d.op)({reverse1d_:function(e){const t=(0,c._1)(e,"x","reverse");return p.hu(1===t.rank,(()=>`Error in reverse1D: x must be rank 1 but got rank ${t.rank}.`)),(0,Zt.G)(t,0)}}),Yt=(0,d.op)({reverse2d_:function(e,t){const n=(0,c._1)(e,"x","reverse");return p.hu(2===n.rank,(()=>`Error in reverse2D: x must be rank 2 but got rank ${n.rank}.`)),(0,Zt.G)(n,t)}}),Jt=(0,d.op)({reverse3d_:function(e,t){const n=(0,c._1)(e,"x","reverse");return p.hu(3===n.rank,(()=>`Error in reverse3D: x must be rank 3 but got rank ${n.rank}.`)),(0,Zt.G)(n,t)}}),en=(0,d.op)({reverse4d_:function(e,t){const n=(0,c._1)(e,"x","reverse");return p.hu(4===n.rank,(()=>`Error in reverse4D: x must be rank 4 but got rank ${n.rank}.`)),(0,Zt.G)(n,t)}});var tn=n(4520),nn=n(5829),rn=n(2502),an=n(2899),sn=n(1438);const on=async function(e,t){const n=(0,c._1)(e,"x","setdiff1d"),r=(0,c._1)(t,"y","setdiff1d");p.hu(n.dtype===r.dtype,(()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${r.dtype}).`)),p.hu(1===n.rank,(()=>`x should be 1D tensor, but got x (${n.shape}).`)),p.hu(1===r.rank,(()=>`y should be 1D tensor, but got y (${r.shape}).`));const a=await n.data(),s=await r.data(),o=new Set(s);let i=0;for(let e=0;e<a.length;e++)o.has(a[e])||i++;const u=new ot.YD([i],n.dtype),l=new ot.YD([i],"int32");for(let e=0,t=0;e<a.length;e++)o.has(a[e])||(u.values[t]=a[e],l.values[t]=e,t++);return[u.toTensor(),l.toTensor()]};var un=n(2399),ln=n(221),cn=n(1671);const pn=(0,d.op)({slice1d_:function(e,t,n){const r=(0,c._1)(e,"x","slice1d");return p.hu(1===r.rank,(()=>`slice1d expects a rank-1 tensor, but got a rank-${r.rank} tensor`)),(0,F.t)(r,[t],[n])}}),dn=(0,d.op)({slice2d_:function(e,t,n){const r=(0,c._1)(e,"x","slice2d");return p.hu(2===r.rank,(()=>`slice2d expects a rank-2 tensor, but got a rank-${r.rank} tensor`)),(0,F.t)(r,t,n)}}),hn=(0,d.op)({slice3d_:function(e,t,n){const r=(0,c._1)(e,"x","slice3d");return p.hu(3===r.rank,(()=>`slice3d expects a rank-3 tensor, but got a rank-${r.rank} tensor`)),(0,F.t)(r,t,n)}}),mn=(0,d.op)({slice4d_:function(e,t,n){const r=(0,c._1)(e,"x","slice4d");return p.hu(4===r.rank,(()=>`slice4d expects a rank-4 tensor, but got a rank-${r.rank} tensor`)),(0,F.t)(r,t,n)}});var fn=n(5301),gn=n(9876),yn=n(1639),bn=n(6991),kn=n(8923),wn=n(8117),vn=n(1411),Nn=n(1381),xn=n(7346),Sn=n(8774),Tn=n(5920),In=n(2235),_n=n(3863),En=n(8333),An=n(4786),Mn=n(7088),Dn=n(7316),Fn=n(213);function $n(e,t){(0,p.Cq)(e);const n=(0,c.C)(e,t);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return(0,Fn.H)(e,null,n,t)}function On(e,t,n){if((0,p.Cq)(e),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const r=(0,c.C)(e,n);if(2!==r.length&&1!==r.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return(0,Fn.H)(e,t,r,n)}var Bn=n(717);function Rn(e,t,n){if((0,p.Cq)(e),null!=t&&4!==t.length)throw new Error("tensor4d() requires shape to have four numbers");const r=(0,c.C)(e,n);if(4!==r.length&&1!==r.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return(0,Fn.H)(e,t,r,n)}function Vn(e,t,n){if((0,p.Cq)(e),null!=t&&5!==t.length)throw new Error("tensor5d() requires shape to have five numbers");const r=(0,c.C)(e,n);if(5!==r.length&&1!==r.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return(0,Fn.H)(e,t,r,n)}function Cn(e,t,n){if((0,p.Cq)(e),null!=t&&6!==t.length)throw new Error("tensor6d() requires shape to have six numbers");const r=(0,c.C)(e,n);if(6!==r.length&&1!==r.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return t=t||r,(0,Fn.H)(e,t,r,n)}var zn=n(9090);const Pn=(0,d.op)({truncatedNormal_:function(e,t=0,n=1,r,a){if((0,p.Mu)(e),null!=r&&"bool"===r)throw new Error("Unsupported data type $ { dtype }");const s=new Ct(t,n,r,!0,a),o=(0,W.f)(e,r);for(let e=0;e<o.values.length;e++)o.values[e]=s.nextValue();return o.toTensor()}});var Ln=n(3447),Hn=n(3644),Wn=n(7690);function Gn(e,t){return Qe(e,t,"right")}function Un(e,t=!0,n,r){return u.BV.makeVariable(e,t,n,r)}var qn=n(1203),jn=n(6133);const Kn=async function(e){const t=(0,c._1)(e,"condition","whereAsync","bool"),n=await t.data(),r=(0,jn.Z)(t.shape,n);return e!==t&&t.dispose(),r};var Xn=n(1434),Zn=n(9635);const Qn=async function(e,t,n){const r=(0,c._1)(e,"tensor","boolMask"),a=(0,c._1)(t,"mask","boolMask","bool"),s=null==n?0:n,o=a.rank,i=r.shape;p.hu(o>0,(()=>"mask cannot be scalar")),p.k5(i.slice(s,s+o),a.shape,"mask's shape must match the first K dimensions of tensor's shape,");let u=1;for(let e=s;e<s+o;e++)u*=i[e];const l=i.slice(0,s).concat([u],i.slice(s+o)),d=(0,I.X)(r,l),h=(0,I.X)(a,[-1]),m=await Kn(h),f=(0,Tn.L)(m,[1]),g=(0,Ae.I)(d,f,s);return e!==r&&r.dispose(),t!==a&&a.dispose(),f.dispose(),d.dispose(),h.dispose(),m.dispose(),g};var Yn=n(6336),Jn=n(1458),er=n(9201);const tr=(0,d.op)({movingAverage_:function(e,t,n,r,a=!0){const s=(0,c._1)(e,"v","movingAverage"),o=(0,c._1)(t,"x","movingAverage"),u=(0,c._1)(n,"decay","movingAverage");(0,er.assertTypesMatch)(s,o),p.hu(p.cO(s.shape,o.shape),(()=>"Shape mismatch in v and x"));const l=(0,rn.i)(1),d=(0,mt.l)(l,u);let h=(0,M.d)((0,mt.l)(o,s),d);if(a){p.hu(null!=r,(()=>"When using zeroDebias: true, step is required."));const e=(0,c._1)(r,"step","movingAverage");h=(0,he.h)(h,(0,mt.l)(l,(0,At.s)(u,e)))}return(0,i.I)(s,h)}});var nr=n(6576);const rr=(0,d.op)({scatterND_:function(e,t,n){(0,p.Mu)(n);const r=(0,c._1)(e,"indices","scatterND","int32"),a=(0,c._1)(t,"updates","scatterND");nr.validateInput(a,r,n);const s={indices:r,updates:a},o={shape:n};return u.BV.runKernel(l.xQA,s,o)}}),ar=(0,d.op)({sparseToDense_:function(e,t,n,r=0){(0,p.Mu)(n);const a=(0,c._1)(e,"sparseIndices","sparseToDense","int32"),s=(0,c._1)(t,"sparseValues","sparseToDense","string_or_numeric"),o=(0,c._1)(r,"defaultValue","sparseToDense",s.dtype);!function(e,t,n,r){if("int32"!==e.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${e.shape}.`);const a=e.rank>0?e.shape[0]:1,s=e.rank>1?e.shape[1]:1;if(n.length!==s)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${s}.`);const o=t.size;if(0!==t.rank&&(1!==t.rank||o!==a))throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${a}]`);if(t.dtype!==r.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(a,s,n,o);const i={sparseIndices:a,sparseValues:s,defaultValue:o},d={outputShape:n};return u.BV.runKernel(l.D2d,i,d)}}),sr=(0,d.op)({gatherND_:function(e,t){const n=(0,c._1)(t,"indices","gatherND","int32"),r={params:(0,c._1)(e,"x","gatherND","string_or_numeric"),indices:n};return u.BV.runKernel(l.q1x,r)}}),or=(0,d.op)({dropout_:function(e,t,n,r){const a=(0,c._1)(e,"x","dropout");if(p.hu("float32"===a.dtype,(()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${a.dtype} tensor instead.`)),p.hu(t>=0&&t<1,(()=>`rate must be a float in the range [0, 1), but got ${t}.`)),0===t)return e instanceof ot.es?a.clone():a;const s=function(e,t){if(null==t)return e.shape.slice();if(p.cO(e.shape,t))return t;if(e.shape.length===t.length){const n=[];for(let r=0;r<e.shape.length;r++)null==t[r]&&null!=e.shape[r]?n.push(e.shape[r]):n.push(t[r]);return n}return t}(a,n),o=1-t,u=(0,he.h)((0,_e.G)((0,i.I)(Gt(s,0,1,"float32",r),o)),o);return(0,M.d)(a,u)}});function ir(e){return Math.floor(Math.pow(2,Math.ceil(Math.log(e)/Math.log(2))))}function ur(e,t,n){const r=1-e%2,a=new Float32Array(e);for(let s=0;s<e;++s){const o=2*Math.PI*s/(e+r-1);a[s]=t-n*Math.cos(o)}return $n(a,"float32")}const lr=async function(e,t,n=1){const r=(0,c._1)(e,"predictions","inTopK"),a=(0,c._1)(t,"targets","inTopK");(0,p.hu)(r.rank>1,(()=>`inTopK() expects the predictions to be of rank 2 or higher, but got ${r.rank}`)),(0,p.hu)(r.rank-1===a.rank,(()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${r.rank} and targets rank ${a.rank}`)),(0,p.k5)(r.shape.slice(0,r.shape.length-1),a.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");const s=r.shape[r.shape.length-1];(0,p.hu)(n>0&&n<=s,(()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${s}), but got ${n}`));const o=await r.data(),i=await a.data(),[u,l]=[o.length/s,s],d=(0,p.WP)("bool",u);for(let e=0;e<u;e++){const t=e*l,r=o.subarray(t,t+l),a=[];for(let e=0;e<r.length;e++)a.push({value:r[e],index:e});a.sort(((e,t)=>t.value-e.value)),d[e]=0;for(let t=0;t<n;t++)if(a[t].index===i[e]){d[e]=1;break}}return e!==r&&r.dispose(),t!==a&&a.dispose(),(0,Dn.X)(d,a.shape,"bool")};var cr=n(3184),pr=n(2011),dr=n(1885),hr=n(6858),mr=n(8474);const fr=(0,d.op)({fusedConv2d_:function({x:e,filter:t,strides:n,pad:r,dataFormat:a="NHWC",dilations:s=[1,1],dimRoundingMode:o,bias:d,activation:h="linear",preluActivationWeights:m,leakyreluAlpha:f}){if(h=h||"linear",!1===(0,mr.uy)(u.BV.state.gradientDepth,h)){p.hu("NHWC"===a,(()=>`Error in fused conv2d: got dataFormat of ${a} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`));let u=(0,J.T)(e,t,n,r,a,s,o);return null!=d&&(u=(0,i.I)(u,d)),(0,mr.QH)(u,h,m,f)}const g=(0,c._1)(e,"x","conv2d","float32"),y=(0,c._1)(t,"filter","conv2d","float32");let b=g,k=!1;3===g.rank&&(k=!0,b=(0,I.X)(g,[1,g.shape[0],g.shape[1],g.shape[2]])),p.hu(4===b.rank,(()=>`Error in fused conv2d: input must be rank 4, but got rank ${b.rank}.`)),p.hu(4===y.rank,(()=>`Error in fused conv2d: filter must be rank 4, but got rank ${y.rank}.`)),T.m("fused conv2d",r,o);const w="NHWC"===a?b.shape[3]:b.shape[1];p.hu(y.shape[2]===w,(()=>`Error in conv2d: depth of input (${w}) must match input depth for filter ${y.shape[2]}.`)),p.hu(T.jT(n,s),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${s}'`));const v=T.Ix(b.shape,y.shape,n,s,r,o);let N,x;if(null!=d&&(N=(0,c._1)(d,"bias","fused conv2d"),[N]=(0,er.makeTypesMatch)(N,g),"NHWC"===a?pr.assertAndGetBroadcastShape(v.outShape,N.shape):(p.hu(N.shape.length<=1,(()=>`Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${N.shape.length}.`)),p.hu(0===N.shape.length||N.shape[0]===v.outChannels||1===N.shape[0],(()=>`Error in fused conv2d: bias shape (${N.shape}) is not compatible with the number of output channels (${v.outChannels})`)))),null!=m){const e=m.shape;if(p.hu(e.length<=1||3===e.length,(()=>`Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${e.length}.`)),1===e.length)p.hu(1===e[0]||e[0]===v.outChannels,(()=>`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the number of output channels (${v.outChannels}).`));else if(3===e.length)try{pr.assertAndGetBroadcastShape(e,v.outShape)}catch(t){const n=`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the output shape of the conv2d (${v.outShape}).`;throw Error(n)}x=(0,c._1)(m,"prelu weights","fused conv2d")}const S=(e,t)=>{p.hu("NHWC"===a,(()=>`Error in gradient of fused conv2D: got dataFormat of ${a} but only NHWC is currently supported.`));const[o,i,u,l]=t,c=(0,mr.Fr)(e,u,h);p.hu(T.I0(s),(()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`));const d=[(0,hr._)(i.shape,c,o,n,r),(0,dr.p)(i,c,o.shape,n,r)];if(null!=l){const e=(0,mr.pf)(l,c);d.push(e)}return d},_={x:b,filter:y,bias:N,preluActivationWeights:x},E={strides:n,pad:r,dataFormat:a,dilations:s,dimRoundingMode:o,activation:h,leakyreluAlpha:f};return null==d?(0,cr.cb)(((e,t,n)=>{let r=u.BV.runKernel(l._V0,_,E);return n([t,e,r]),k&&(r=(0,I.X)(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:S}}))(b,y):(0,cr.cb)(((e,t,n,r)=>{let a=u.BV.runKernel(l._V0,_,E);return r([t,e,a,n]),k&&(a=(0,I.X)(a,[a.shape[1],a.shape[2],a.shape[3]])),{value:a,gradFunc:S}}))(b,y,N)}});var gr=n(2806),yr=n(5039);const br=(0,d.op)({fusedDepthwiseConv2d_:function({x:e,filter:t,strides:n,pad:r,dataFormat:a="NHWC",dilations:s=[1,1],dimRoundingMode:o,bias:d,activation:h="linear",preluActivationWeights:m,leakyreluAlpha:f}){if(!1===(0,mr.uy)(u.BV.state.gradientDepth,h)){let u=(0,ce.B)(e,t,n,r,a,s,o);return null!=d&&(u=(0,i.I)(u,d)),(0,mr.QH)(u,h,m,f)}const g=(0,c._1)(e,"x","depthwiseConv2d","float32"),y=(0,c._1)(t,"filter","depthwiseConv2d","float32");let b=g,k=!1;3===g.rank&&(k=!0,b=(0,I.X)(g,[1,g.shape[0],g.shape[1],g.shape[2]])),p.hu(4===b.rank,(()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${b.rank}.`)),p.hu(4===y.rank,(()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${y.rank}.`)),p.hu(b.shape[3]===y.shape[2],(()=>`Error in fused depthwiseConv2d: number of input channels (${b.shape[3]}) must match the inChannels dimension in filter ${y.shape[2]}.`)),null==s&&(s=[1,1]),p.hu(T.jT(n,s),(()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${s}'`)),T.m("fused depthwiseConv2d",r,o);const w=T.Ix(b.shape,y.shape,n,s,r,o,!0);let v,N;null!=d&&(v=(0,c._1)(d,"bias","fused conv2d"),[v]=(0,er.makeTypesMatch)(v,g),pr.assertAndGetBroadcastShape(w.outShape,v.shape)),null!=m&&(N=(0,c._1)(m,"prelu weights","fused depthwiseConv2d"));const x=(e,t)=>{p.hu(T.I0(s),(()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${s}'`));const[a,i,u,l]=t,c=(0,mr.Fr)(e,u,h),d=(0,yr.v)(i.shape,c,a,n,r,s,o),m=(0,gr.z)(i,c,a.shape,n,r,s,o);return null!=l?[d,m,(0,mr.pf)(v,c)]:[d,m]},S={x:b,filter:y,bias:v,preluActivationWeights:N},_={strides:n,pad:r,dataFormat:a,dilations:s,dimRoundingMode:o,activation:h,leakyreluAlpha:f};return null==d?(0,cr.cb)(((e,t,n)=>{let r=u.BV.runKernel(l.luS,S,_);return n([t,e,r]),k&&(r=(0,I.X)(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:x}}))(b,y):(0,cr.cb)(((e,t,n,r)=>{let a=u.BV.runKernel(l.luS,S,_);return r([t,e,a,n]),k&&(a=(0,I.X)(a,[a.shape[1],a.shape[2],a.shape[3]])),{value:a,gradFunc:x}}))(b,y,v)}}),kr=(0,d.op)({fusedMatMul_:function({a:e,b:t,transposeA:n=!1,transposeB:r=!1,bias:a,activation:s="linear",preluActivationWeights:o,leakyreluAlpha:d=.2}){if(!1===(0,mr.uy)(u.BV.state.gradientDepth,s)){let u=(0,A.O)(e,t,n,r);return null!=a&&(u=(0,i.I)(u,a)),(0,mr.QH)(u,s,o,d)}let h=(0,c._1)(e,"a","fused matMul"),m=(0,c._1)(t,"b","fused matMul");[h,m]=(0,er.makeTypesMatch)(h,m);const f=n?h.shape[h.rank-2]:h.shape[h.rank-1],g=r?m.shape[m.rank-1]:m.shape[m.rank-2],y=n?h.shape[h.rank-1]:h.shape[h.rank-2],b=r?m.shape[m.rank-2]:m.shape[m.rank-1],k=h.shape.slice(0,-2),w=m.shape.slice(0,-2),v=p.NA(k),N=p.NA(w);p.hu(f===g,(()=>`Error in fused matMul: inner shapes (${f}) and (${g}) of Tensors with shapes ${h.shape} and ${m.shape} and transposeA=${n} and transposeB=${r} must match.`));const x=pr.assertAndGetBroadcastShape(h.shape.slice(0,-2),m.shape.slice(0,-2)).concat([y,b]),S=n?(0,I.X)(h,[v,f,y]):(0,I.X)(h,[v,y,f]),T=r?(0,I.X)(m,[N,b,g]):(0,I.X)(m,[N,g,b]);let _,E;null!=a&&(_=(0,c._1)(a,"bias","fused matMul"),[_]=(0,er.makeTypesMatch)(_,h),pr.assertAndGetBroadcastShape(x,_.shape)),null!=o&&(E=(0,c._1)(o,"prelu weights","fused matMul"));const M=(e,t)=>{const[o,i,u,l]=t,c=(0,mr.Fr)((0,I.X)(e,u.shape),u,s);let p,d;return n||r?!n&&r?(p=(0,A.O)(c,i,!1,!1),d=(0,A.O)(c,o,!0,!1)):n&&!r?(p=(0,A.O)(i,c,!1,!0),d=(0,A.O)(o,c,!1,!1)):(p=(0,A.O)(i,c,!0,!0),d=(0,A.O)(c,o,!0,!0)):(p=(0,A.O)(c,i,!1,!0),d=(0,A.O)(o,c,!0,!1)),null!=a?[p,d,(0,mr.pf)(l,c)]:[p,d]},D={a:S,b:T,bias:_,preluActivationWeights:E},F={transposeA:n,transposeB:r,activation:s,leakyreluAlpha:d};return null==a?(0,cr.cb)(((e,t,n)=>{const r=u.BV.runKernel(l.usg,D,F);return n([e,t,r]),{value:(0,I.X)(r,x),gradFunc:M}}))(S,T):(0,cr.cb)(((e,t,n,r)=>{const a=u.BV.runKernel(l.usg,D,F);return r([e,t,a,n]),{value:(0,I.X)(a,x),gradFunc:M}}))(S,T,_)}}),wr=(0,d.op)({hammingWindow_:function(e){return ur(e,.54,.46)}}),vr=(0,d.op)({hannWindow_:function(e){return ur(e,.5,.5)}}),Nr=(0,d.op)({frame_:function(e,t,n,r=!1,a=0){let s=0;const o=[];for(;s+t<=e.size;)o.push((0,F.t)(e,s,t)),s+=n;if(r)for(;s<e.size;){const r=s+t-e.size,i=(0,E.z)([(0,F.t)(e,s,t-r),(0,Ie.h)([r],a)]);o.push(i),s+=n}return 0===o.length?On([],[0,t]):(0,I.X)((0,E.z)(o),[o.length,t])}}),xr=(0,d.op)({stft_:function(e,t,n,r,a=vr){null==r&&(r=ir(t));const s=Nr(e,t,n),o=(0,M.d)(s,a(t));return(0,vn.Q)(o,r)}}),Sr=(0,d.op)({cropAndResize_:function(e,t,n,r,a="bilinear",s=0){const o=(0,c._1)(e,"image","cropAndResize"),i=(0,c._1)(t,"boxes","cropAndResize","float32"),d=(0,c._1)(n,"boxInd","cropAndResize","int32"),h=i.shape[0];p.hu(4===o.rank,(()=>`Error in cropAndResize: image must be rank 4,but got rank ${o.rank}.`)),p.hu(2===i.rank&&4===i.shape[1],(()=>`Error in cropAndResize: boxes must be have size [${h},4] but had shape ${i.shape}.`)),p.hu(1===d.rank&&d.shape[0]===h,(()=>`Error in cropAndResize: boxInd must be have size [${h}] but had shape ${i.shape}.`)),p.hu(2===r.length,(()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${r.length}.`)),p.hu(r[0]>=1&&r[1]>=1,(()=>`cropSize must be atleast [1,1], but was ${r}`)),p.hu("bilinear"===a||"nearest"===a,(()=>`method must be bilinear or nearest, but was ${a}`));const m={image:o,boxes:i,boxInd:d},f={method:a,extrapolationValue:s,cropSize:r};return u.BV.runKernel(l.VcC,m,f)}}),Tr=(0,d.op)({flipLeftRight_:function(e){const t=(0,c._1)(e,"image","flipLeftRight","float32");p.hu(4===t.rank,(()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`));const n={image:t};return u.BV.runKernel(l.Uyb,n,{})}}),Ir=(0,d.op)({grayscaleToRGB_:function(e){const t=(0,c._1)(e,"image","grayscaleToRGB"),n=t.rank-1,r=t.shape[n];p.hu(t.rank>=2,(()=>`Error in grayscaleToRGB: images must be at least rank 2, but got rank ${t.rank}.`)),p.hu(1===r,(()=>`Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${r}.`));const a=new Array(t.rank);return a.fill(1,0,n),a[n]=3,(0,Se.G)(t,a)}}),_r=(0,d.op)({rotateWithOffset_:function(e,t,n=0,r=.5){const a=(0,c._1)(e,"image","rotateWithOffset","float32");p.hu(4===a.rank,(()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${a.rank}.`));const s={image:a},o={radians:t,fillValue:n,center:r};return u.BV.runKernel(l.b9H,s,o)}});function Er(e,t,n,r,a,s){null==r&&(r=.5),null==a&&(a=Number.NEGATIVE_INFINITY),null==s&&(s=0);const o=e.shape[0];return n=Math.min(n,o),p.hu(0<=r&&r<=1,(()=>`iouThreshold must be in [0, 1], but was '${r}'`)),p.hu(2===e.rank,(()=>`boxes must be a 2D tensor, but was of rank '${e.rank}'`)),p.hu(4===e.shape[1],(()=>`boxes must have 4 columns, but 2nd dimension was ${e.shape[1]}`)),p.hu(1===t.rank,(()=>"scores must be a 1D tensor")),p.hu(t.shape[0]===o,(()=>`scores has incompatible shape with boxes. Expected ${o}, but was ${t.shape[0]}`)),p.hu(0<=s&&s<=1,(()=>`softNmsSigma must be in [0, 1], but was '${s}'`)),{maxOutputSize:n,iouThreshold:r,scoreThreshold:a,softNmsSigma:s}}const Ar=(0,d.op)({nonMaxSuppression_:function(e,t,n,r=.5,a=Number.NEGATIVE_INFINITY){const s=(0,c._1)(e,"boxes","nonMaxSuppression","float32"),o=(0,c._1)(t,"scores","nonMaxSuppression","float32"),i=Er(s,o,n,r,a),p={maxOutputSize:n=i.maxOutputSize,iouThreshold:r=i.iouThreshold,scoreThreshold:a=i.scoreThreshold};return u.BV.runKernel(l.uv1,{boxes:s,scores:o},p)}});var Mr=n(9180);const Dr=(0,d.op)({nonMaxSuppressionWithScore_:function(e,t,n,r=.5,a=Number.NEGATIVE_INFINITY,s=0){const o=(0,c._1)(e,"boxes","nonMaxSuppression"),i=(0,c._1)(t,"scores","nonMaxSuppression"),p=Er(o,i,n,r,a,s),d={boxes:o,scores:i},h={maxOutputSize:n=p.maxOutputSize,iouThreshold:r=p.iouThreshold,scoreThreshold:a=p.scoreThreshold,softNmsSigma:s=p.softNmsSigma},m=u.BV.runKernel(l.W0H,d,h);return{selectedIndices:m[0],selectedScores:m[1]}}}),Fr=(0,d.op)({nonMaxSuppressionPadded_:function(e,t,n,r=.5,a=Number.NEGATIVE_INFINITY,s=!1){const o=(0,c._1)(e,"boxes","nonMaxSuppression"),i=(0,c._1)(t,"scores","nonMaxSuppression"),p=Er(o,i,n,r,a,null),d={boxes:o,scores:i},h={maxOutputSize:p.maxOutputSize,iouThreshold:p.iouThreshold,scoreThreshold:p.scoreThreshold,padToMaxOutputSize:s},m=u.BV.runKernel(l.cye,d,h);return{selectedIndices:m[0],validOutputs:m[1]}}});var $r=n(4284),Or=n(739);const Br=(0,d.op)({threshold_:function(e,t="binary",n=!1,r=.5){const a=(0,c._1)(e,"image","threshold"),s=a.shape[0]*a.shape[1];let o,u,l,d,h=(0,M.d)($n([r]),255);if(p.hu(3===a.rank,(()=>`Error in threshold: image must be rank 3,but got rank ${a.rank}.`)),p.hu(3===a.shape[2]||1===a.shape[2],(()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${a.shape[2]}.`)),p.hu("int32"===a.dtype||"float32"===a.dtype,(()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${a.dtype}.`)),p.hu("otsu"===t||"binary"===t,(()=>`Method must be binary or otsu, but was ${t}`)),3===a.shape[2]){[o,u,l]=(0,Nn.V)(a,[1,1,1],-1);const e=(0,M.d)(o,.2989),t=(0,M.d)(u,.587),n=(0,M.d)(l,.114);d=(0,i.I)((0,i.I)(e,t),n)}else d=e;"otsu"===t&&(h=function(e,t){let n,r,a,s,o,u,l=$n([-1]),c=$n([0]),p=$n([0]);for(let d=0;d<e.size-1;d++){n=(0,F.t)(e,0,d+1),r=(0,F.t)(e,d+1),o=(0,he.h)((0,An.S)(n),t),u=(0,he.h)((0,An.S)(r),t);const h=(0,An.S)((0,M.d)(n,Ut(0,n.size)));a=(0,he.h)(h,(0,An.S)(n));const m=(0,Ie.h)(r.shape,n.size),f=(0,i.I)(Ut(0,r.size),m),g=(0,M.d)(r,f);s=(0,he.h)((0,An.S)(g),(0,An.S)(r));const y=(0,mt.l)(a,s),b=(0,mt.l)(a,s),k=(0,M.d)(o,u);p=(0,M.d)((0,M.d)(k,y),b);const w=(0,Me.p)(p,c);c=(0,qn.a)(w,p,c),l=(0,qn.a)(w,$n([d]),l)}return l}(P((0,S.p)((0,tn.N)(d),"int32"),(0,Dn.X)([]),256),s));const m=n?(0,Ce.z)(d,h):(0,Me.p)(d,h);return(0,S.p)((0,M.d)(m,255),"int32")}}),Rr=(0,d.op)({transform_:function(e,t,n="nearest",r="constant",a=0,s){const o=(0,c._1)(e,"image","transform","float32"),i=(0,c._1)(t,"transforms","transform","float32");p.hu(4===o.rank,(()=>`Error in transform: image must be rank 4,but got rank ${o.rank}.`)),p.hu(2===i.rank&&(i.shape[0]===o.shape[0]||1===i.shape[0])&&8===i.shape[1],(()=>"Error in transform: Input transform should be batch x 8 or 1 x 8")),p.hu(null==s||2===s.length,(()=>`Error in transform: outputShape must be [height, width] or null, but got ${s}.`));const d={image:o,transforms:i},h={interpolation:n,fillMode:r,fillValue:a,outputShape:s};return u.BV.runKernel(l.wx7,d,h)}}),Vr=(0,d.op)({bandPart_:function(e,t,n){(0,p.hu)(t%1==0,(()=>`bandPart(): numLower must be an integer, got ${t}.`)),(0,p.hu)(n%1==0,(()=>`bandPart(): numUpper must be an integer, got ${n}.`));const r=(0,c._1)(e,"a","bandPart");(0,p.hu)(r.rank>=2,(()=>`bandPart(): Rank must be at least 2, got ${r.rank}.`));const a=r.shape,[s,o]=r.shape.slice(-2);if(!(t<=s))throw new Error(`bandPart(): numLower (${t}) must not be greater than the number of rows (${s}).`);if(!(n<=o))throw new Error(`bandPart(): numUpper (${n}) must not be greater than the number of columns (${o}).`);t<0&&(t=s),n<0&&(n=o);const i=(0,I.X)(Ut(0,s,1,"int32"),[-1,1]),u=Ut(0,o,1,"int32"),l=(0,mt.l)(i,u),d=(0,qe.H)((0,Ce.z)(l,(0,rn.i)(+t,"int32")),(0,De.b)(l,(0,rn.i)(-n,"int32"))),h=(0,Xn.l)([s,o],r.dtype);return(0,I.X)((0,In.k)((0,Wn.H)((0,I.X)(r,[-1,s,o])).map((e=>(0,qn.a)(d,e,h)))),a)}}),Cr=(0,d.op)({gramSchmidt_:function(e){let t;if(Array.isArray(e)){t=!1,(0,p.hu)(null!=e&&e.length>0,(()=>"Gram-Schmidt process: input must not be null, undefined, or empty"));const n=e[0].shape[0];for(let t=1;t<e.length;++t)(0,p.hu)(e[t].shape[0]===n,(()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${e[t].shape[0]} vs. ${n})`))}else t=!0,e=(0,Nn.V)(e,e.shape[0],0).map((e=>(0,Tn.L)(e,[0])));(0,p.hu)(e.length<=e[0].shape[0],(()=>`Gram-Schmidt: Number of vectors (${e.length}) exceeds number of dimensions (${e[0].shape[0]}).`));const n=[],r=e;for(let t=0;t<e.length;++t)n.push(u.BV.tidy((()=>{let e=r[t];if(t>0)for(let r=0;r<t;++r){const t=(0,M.d)((0,An.S)((0,M.d)(n[r],e)),n[r]);e=(0,mt.l)(e,t)}return(0,he.h)(e,(0,Jn.K)(e,"euclidean"))})));return t?(0,In.k)(n,0):n}});var zr=n(6021);function Pr(e,t=!1){return u.BV.tidy((()=>{(0,p.hu)(2===e.shape.length,(()=>`qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`));const n=e.shape[0],r=e.shape[1];let a=Te(n),s=(0,q.d)(e);const o=On([[1]],[1,1]);let i=(0,q.d)(o);const l=n>=r?r:n;for(let e=0;e<l;++e){const t=s,l=i,c=a;[i,s,a]=u.BV.tidy((()=>{const t=(0,F.t)(s,[e,e],[n-e,1]),u=(0,Jn.K)(t),l=(0,F.t)(s,[e,e],[1,1]),c=(0,qn.a)((0,Me.p)(l,0),On([[-1]]),On([[1]])),p=(0,mt.l)(l,(0,M.d)(c,u)),d=(0,he.h)(t,p);i=1===d.shape[0]?(0,q.d)(o):(0,E.z)([o,(0,F.t)(d,[1,0],[d.shape[0]-1,d.shape[1]])],0);const h=(0,bt.W)((0,he.h)((0,A.O)(c,p),u)),m=(0,F.t)(s,[e,0],[n-e,r]),f=(0,M.d)(h,i),g=(0,Yn.p)(i);if(0===e)s=(0,mt.l)(m,(0,A.O)(f,(0,A.O)(g,m)));else{const t=(0,mt.l)(m,(0,A.O)(f,(0,A.O)(g,m)));s=(0,E.z)([(0,F.t)(s,[0,0],[e,r]),t],0)}const y=(0,Yn.p)(f),b=(0,F.t)(a,[0,e],[n,a.shape[1]-e]);if(0===e)a=(0,mt.l)(b,(0,A.O)((0,A.O)(b,i),y));else{const t=(0,mt.l)(b,(0,A.O)((0,A.O)(b,i),y));a=(0,E.z)([(0,F.t)(a,[0,0],[n,e]),t],1)}return[i,s,a]})),(0,zr.B9)([t,l,c])}return!t&&n>r&&(a=(0,F.t)(a,[0,0],[n,r]),s=(0,F.t)(s,[0,0],[r,r])),[a,s]}))}const Lr=(0,d.op)({qr_:function(e,t=!1){if((0,p.hu)(e.rank>=2,(()=>`qr() requires input tensor to have a rank >= 2, but got rank ${e.rank}`)),2===e.rank)return Pr(e,t);{const n=e.shape.slice(0,e.shape.length-2).reduce(((e,t)=>e*t)),r=(0,Wn.H)((0,I.X)(e,[n,e.shape[e.shape.length-2],e.shape[e.shape.length-1]]),0),a=[],s=[];return r.forEach((e=>{const[n,r]=Pr(e,t);a.push(n),s.push(r)})),[(0,I.X)((0,In.k)(a,0),e.shape),(0,I.X)((0,In.k)(s,0),e.shape)]}}});var Hr=n(312);const Wr=(0,d.op)({computeWeightedLoss_:function(e,t,n=Hr.I.SUM_BY_NONZERO_WEIGHTS){const r=(0,c._1)(e,"losses","computeWeightedLoss");let a=null;null!=t&&(a=(0,c._1)(t,"weights","computeWeightedLoss"));const s=null==a?r:(0,M.d)(r,a);if(n===Hr.I.NONE)return s;if(n===Hr.I.SUM)return(0,An.S)(s);if(n===Hr.I.MEAN){if(null==a)return(0,at.J)(s);{const e=r.size/a.size,t=(0,he.h)((0,An.S)(s),(0,An.S)(a));return e>1?(0,he.h)(t,(0,rn.i)(e)):t}}if(n===Hr.I.SUM_BY_NONZERO_WEIGHTS){if(null==a)return(0,he.h)((0,An.S)(s),(0,rn.i)(r.size));{const e=(0,M.d)(a,(0,st.i)(r.shape)),t=(0,S.p)((0,An.S)((0,kt.Q)(e,(0,rn.i)(0))),"float32");return(0,he.h)((0,An.S)(s),t)}}throw Error(`Unknown reduction: ${n}`)}}),Gr=(0,d.op)({absoluteDifference_:function(e,t,n,r=Hr.I.SUM_BY_NONZERO_WEIGHTS){const s=(0,c._1)(e,"labels","absoluteDifference"),o=(0,c._1)(t,"predictions","absoluteDifference");let i=null;null!=n&&(i=(0,c._1)(n,"weights","absoluteDifference")),(0,p.k5)(s.shape,o.shape,"Error in absoluteDifference: ");const u=(0,a.W)((0,mt.l)(s,o));return Wr(u,i,r)}}),Ur=(0,d.op)({cosineDistance_:function(e,t,n,r,a=Hr.I.SUM_BY_NONZERO_WEIGHTS){const s=(0,c._1)(e,"labels","cosineDistance"),o=(0,c._1)(t,"predictions","cosineDistance");let i=null;null!=r&&(i=(0,c._1)(r,"weights","cosineDistance")),(0,p.k5)(s.shape,o.shape,"Error in cosineDistance: ");const u=(0,rn.i)(1),l=(0,mt.l)(u,(0,An.S)((0,M.d)(s,o),n,!0));return Wr(l,i,a)}}),qr=(0,d.op)({hingeLoss_:function(e,t,n,r=Hr.I.SUM_BY_NONZERO_WEIGHTS){let a=(0,c._1)(e,"labels","hingeLoss");const s=(0,c._1)(t,"predictions","hingeLoss");let o=null;null!=n&&(o=(0,c._1)(n,"weights","hingeLoss")),(0,p.k5)(a.shape,s.shape,"Error in hingeLoss: ");const i=(0,rn.i)(1);a=(0,mt.l)((0,M.d)((0,rn.i)(2),a),i);const u=(0,Kt.U)((0,mt.l)(i,(0,M.d)(a,s)));return Wr(u,o,r)}}),jr=(0,d.op)({huberLoss_:function(e,t,n,r=1,s=Hr.I.SUM_BY_NONZERO_WEIGHTS){const o=(0,c._1)(e,"labels","huberLoss"),u=(0,c._1)(t,"predictions","huberLoss");let l=null;null!=n&&(l=(0,c._1)(n,"weights","huberLoss")),(0,p.k5)(o.shape,u.shape,"Error in huberLoss: ");const d=(0,rn.i)(r),h=(0,a.W)((0,mt.l)(u,o)),m=(0,lt.L)(h,d),f=(0,mt.l)(h,m),g=(0,i.I)((0,M.d)((0,rn.i)(.5),(0,ht.h)(m)),(0,M.d)(d,f));return Wr(g,l,s)}}),Kr=(0,d.op)({logLoss_:function(e,t,n,r=1e-7,a=Hr.I.SUM_BY_NONZERO_WEIGHTS){const s=(0,c._1)(e,"labels","logLoss"),o=(0,c._1)(t,"predictions","logLoss");let u=null;null!=n&&(u=(0,c._1)(n,"weights","logLoss")),(0,p.k5)(s.shape,o.shape,"Error in logLoss: ");const l=(0,rn.i)(1),d=(0,rn.i)(r),h=(0,bt.W)((0,M.d)(s,(0,Le.c)((0,i.I)(o,d)))),m=(0,M.d)((0,mt.l)(l,s),(0,Le.c)((0,i.I)((0,mt.l)(l,o),d))),f=(0,mt.l)(h,m);return Wr(f,u,a)}}),Xr=(0,d.op)({meanSquaredError_:function(e,t,n,r=Hr.I.SUM_BY_NONZERO_WEIGHTS){const a=(0,c._1)(e,"labels","meanSquaredError"),s=(0,c._1)(t,"predictions","meanSquaredError");let o=null;null!=n&&(o=(0,c._1)(n,"weights","meanSquaredError")),(0,p.k5)(a.shape,s.shape,"Error in meanSquaredError: ");const i=(0,Sn.$)(a,s);return Wr(i,o,r)}}),Zr=(0,d.op)({sigmoidCrossEntropy_:function(e,t,n,r=0,s=Hr.I.SUM_BY_NONZERO_WEIGHTS){let o=(0,c._1)(e,"multiClassLabels","sigmoidCrossEntropy");const u=(0,c._1)(t,"logits","sigmoidCrossEntropy");let l=null;if(null!=n&&(l=(0,c._1)(n,"weights","sigmoidCrossEntropy")),(0,p.k5)(o.shape,u.shape,"Error in sigmoidCrossEntropy: "),r>0){const e=(0,rn.i)(r),t=(0,rn.i)(1),n=(0,rn.i)(.5);o=(0,i.I)((0,M.d)(o,(0,mt.l)(t,e)),(0,M.d)(n,e))}const d=function(e,t){const n=(0,c._1)(e,"labels","sigmoidCrossEntropyWithLogits"),r=(0,c._1)(t,"logits","sigmoidCrossEntropyWithLogits");(0,p.k5)(n.shape,r.shape,"Error in sigmoidCrossEntropyWithLogits: ");const s=(0,Kt.U)(r),o=(0,M.d)(r,n),u=(0,He.K)((0,ve.Q)((0,bt.W)((0,a.W)(r))));return(0,i.I)((0,mt.l)(s,o),u)}(o,u);return Wr(d,l,s)}}),Qr=(0,d.op)({softmaxCrossEntropy_:function(e,t,n,r=0,a=Hr.I.SUM_BY_NONZERO_WEIGHTS){let s=(0,c._1)(e,"onehotLabels","softmaxCrossEntropy");const o=(0,c._1)(t,"logits","softmaxCrossEntropy");let u=null;if(null!=n&&(u=(0,c._1)(n,"weights","softmaxCrossEntropy")),(0,p.k5)(s.shape,o.shape,"Error in softmaxCrossEntropy: "),r>0){const e=(0,rn.i)(r),t=(0,rn.i)(1),n=(0,rn.i)(s.shape[1]);s=(0,i.I)((0,M.d)(s,(0,mt.l)(t,e)),(0,he.h)(e,n))}const l=function(e,t,n=-1){if(-1===n&&(n=t.rank-1),n!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${n}`);return(0,cr.cb)(((e,t,r)=>{const a=(0,Ue.l)(t,[n],!0),s=(0,mt.l)((0,S.p)(t,"float32"),a);r([e,s]);const o=(0,bt.W)((0,M.d)(s,e));return{value:(0,An.S)(o,[n]),gradFunc:(e,t)=>{const[r,a]=t,s=(0,dt.rv)(e.shape,[n]);return[(0,M.d)((0,I.X)(e,s),(0,mt.l)((0,S.p)(r,"float32"),(0,ve.Q)(a))),(0,M.d)((0,I.X)(e,s),(0,mt.l)((0,ve.Q)(a),(0,S.p)(r,"float32")))]}}}))(e,t)}(s,o);return Wr(l,u,a)}}),Yr=(0,d.op)({sparseFillEmptyRows_:function(e,t,n,r){const a=(0,c._1)(e,"indices","sparseFillEmptyRows","int32"),s=(0,c._1)(t,"values","sparseFillEmptyRows"),o=(0,c._1)(n,"denseShape","sparseFillEmptyRows","int32"),i=(0,c._1)(r,"defaultValue","sparseFillEmptyRows",s.dtype);if(2!==a.rank)throw new Error(`Indices should be Tensor2D but received shape\n        ${a.shape}`);if(1!==s.rank)throw new Error(`Values should be Tensor1D but received shape ${s.shape}`);if(1!==o.rank)throw new Error(`Dense shape should be Tensor1D but received shape ${o.shape}`);if(0!==i.rank)throw new Error(`Default value should be a scalar but received shape ${i.shape}`);const p={indices:a,values:s,denseShape:o,defaultValue:i},d=u.BV.runKernel(l.O3z,p);return{outputIndices:d[0],outputValues:d[1],emptyRowIndicator:d[2],reverseIndexMap:d[3]}}}),Jr=(0,d.op)({sparseReshape_:function(e,t,n){const r=(0,c._1)(e,"inputIndices","sparseReshape","int32"),a=(0,c._1)(t,"inputShape","sparseReshape","int32"),s=(0,c._1)(n,"newShape","sparseReshape","int32");if(2!==r.rank)throw new Error(`Input indices should be Tensor2D but received shape\n        ${r.shape}`);if(1!==a.rank)throw new Error(`Input shape should be Tensor1D but received shape ${a.shape}`);if(1!==s.rank)throw new Error(`New shape should be Tensor1D but received shape ${s.shape}`);const o={inputIndices:r,inputShape:a,newShape:s},i=u.BV.runKernel(l.nhH,o);return{outputIndices:i[0],outputShape:i[1]}}}),ea=(0,d.op)({sparseSegmentMean_:function(e,t,n){const r=(0,c._1)(e,"data","sparseSegmentMean"),a=(0,c._1)(t,"indices","sparseSegmentMean","int32"),s=(0,c._1)(n,"segmentIds","sparseSegmentMean","int32");if(r.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==a.rank)throw new Error(`Indices should be Tensor1D but received shape\n          ${a.shape}`);if(1!==s.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n          ${s.shape}`);const o={data:r,indices:a,segmentIds:s};return u.BV.runKernel(l.w3H,o)}}),ta=(0,d.op)({sparseSegmentSum_:function(e,t,n){const r=(0,c._1)(e,"data","sparseSegmentSum"),a=(0,c._1)(t,"indices","sparseSegmentSum","int32"),s=(0,c._1)(n,"segmentIds","sparseSegmentSum","int32");if(r.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==a.rank)throw new Error(`Indices should be Tensor1D but received shape\n         ${a.shape}`);if(1!==s.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n         ${s.shape}`);const o={data:r,indices:a,segmentIds:s};return u.BV.runKernel(l.ZjV,o)}}),na=(0,d.op)({stringNGrams_:function(e,t,n,r,a,s,o,i){const p=(0,c._1)(e,"data","stringNGrams","string");if("string"!==p.dtype)throw new Error("Data must be of datatype string");if(1!==p.shape.length)throw new Error(`Data must be a vector, saw: ${p.shape}`);const d=(0,c._1)(t,"dataSplits","stringNGrams");if("int32"!==d.dtype)throw new Error("Data splits must be of datatype int32");const h={separator:n,nGramWidths:r,leftPad:a,rightPad:s,padWidth:o,preserveShortSequences:i},m={data:p,dataSplits:d},f=u.BV.runKernel(l._JP,m,h);return{nGrams:f[0],nGramsSplits:f[1]}}}),ra=(0,d.op)({stringSplit_:function(e,t,n=!0){const r=(0,c._1)(e,"input","stringSplit","string"),a=(0,c._1)(t,"delimiter","stringSplit","string");if(1!==r.rank)throw new Error(`Input should be Tensor1D but received shape ${r.shape}`);if(0!==a.rank)throw new Error(`Delimiter should be a scalar but received shape ${a.shape}`);const s={skipEmpty:n},o={input:r,delimiter:a},i=u.BV.runKernel(l.s1s,o,s);return{indices:i[0],values:i[1],shape:i[2]}}}),aa=(0,d.op)({stringToHashBucketFast_:function(e,t){const n=(0,c._1)(e,"input","stringToHashBucketFast","string"),r={numBuckets:t};if(t<=0)throw new Error("Number of buckets must be at least 1");const a={input:n};return u.BV.runKernel(l.XkS,a,r)}}),sa={fft:bn.k,ifft:kn.S,rfft:vn.Q,irfft:wn.w},oa={hammingWindow:wr,hannWindow:vr,frame:Nr,stft:xr},ia={flipLeftRight:Tr,grayscaleToRGB:Ir,resizeNearestNeighbor:Or.j,resizeBilinear:$r.I,rotateWithOffset:_r,cropAndResize:Sr,nonMaxSuppression:Ar,nonMaxSuppressionAsync:async function(e,t,n,r=.5,a=Number.NEGATIVE_INFINITY){const s=(0,c._1)(e,"boxes","nonMaxSuppressionAsync"),o=(0,c._1)(t,"scores","nonMaxSuppressionAsync"),i=Er(s,o,n,r,a);n=i.maxOutputSize,r=i.iouThreshold,a=i.scoreThreshold;const u=await Promise.all([s.data(),o.data()]),l=u[0],p=u[1],{selectedIndices:d}=(0,Mr.GP)(l,p,n,r,a);return s!==e&&s.dispose(),o!==t&&o.dispose(),$n(d,"int32")},nonMaxSuppressionWithScore:Dr,nonMaxSuppressionWithScoreAsync:async function(e,t,n,r=.5,a=Number.NEGATIVE_INFINITY,s=0){const o=(0,c._1)(e,"boxes","nonMaxSuppressionAsync"),i=(0,c._1)(t,"scores","nonMaxSuppressionAsync"),u=Er(o,i,n,r,a,s);n=u.maxOutputSize,r=u.iouThreshold,a=u.scoreThreshold,s=u.softNmsSigma;const l=await Promise.all([o.data(),i.data()]),p=l[0],d=l[1],{selectedIndices:h,selectedScores:m}=(0,Mr.pA)(p,d,n,r,a,s);return o!==e&&o.dispose(),i!==t&&i.dispose(),{selectedIndices:$n(h,"int32"),selectedScores:$n(m)}},nonMaxSuppressionPadded:Fr,nonMaxSuppressionPaddedAsync:async function(e,t,n,r=.5,a=Number.NEGATIVE_INFINITY,s=!1){const o=(0,c._1)(e,"boxes","nonMaxSuppressionAsync"),i=(0,c._1)(t,"scores","nonMaxSuppressionAsync"),u=Er(o,i,n,r,a,null),l=u.maxOutputSize,p=u.iouThreshold,d=u.scoreThreshold,[h,m]=await Promise.all([o.data(),i.data()]),{selectedIndices:f,validOutputs:g}=(0,Mr.qP)(h,m,l,p,d,s);return o!==e&&o.dispose(),i!==t&&i.dispose(),{selectedIndices:$n(f,"int32"),validOutputs:(0,rn.i)(g,"int32")}},threshold:Br,transform:Rr},ua={bandPart:Vr,gramSchmidt:Cr,qr:Lr},la={absoluteDifference:Gr,computeWeightedLoss:Wr,cosineDistance:Ur,hingeLoss:qr,huberLoss:jr,logLoss:Kr,meanSquaredError:Xr,sigmoidCrossEntropy:Zr,softmaxCrossEntropy:Qr},ca={sparseFillEmptyRows:Yr,sparseReshape:Jr,sparseSegmentMean:ea,sparseSegmentSum:ta},pa={stringNGrams:na,stringSplit:ra,stringToHashBucketFast:aa}},7039:(e,t,n)=>{"use strict";n.d(t,{v:()=>o});var r=n(3421),a=n(5202),s=n(8516);const o=(0,n(128).op)({pad_:function(e,t,n=0){const o=(0,s._1)(e,"x","pad");if(0===o.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const i={paddings:t,constantValue:n},u={x:o};return r.BV.runKernel(a.lyA,u,i)}})},4349:(e,t,n)=>{"use strict";n.d(t,{d:()=>d});var r=n(8516),a=n(9740),s=n(9385),o=n(1141),i=n(1129),u=n(4433),l=n(128),c=n(2673),p=n(1639);const d=(0,l.op)({pool_:function(e,t,n,l,d,h,m){null==d&&(d=[1,1]),null==h&&(h=1),0===l&&(l="valid");const f=(0,r._1)(e,"x","maxPool");let g=f,y=!1;3===f.rank&&(y=!0,g=(0,c.X)(f,[1,f.shape[0],f.shape[1],f.shape[2]])),a.hu(i.jT(h,d),(()=>`Error in pool: Either strides or dilations must be 1. Got strides ${h} and dilations '${d}'`));const b=i.Xw(g.shape,t,h,d,l),k=[b.dilationHeight,b.dilationWidth];let w;w="same"===l?function(e,t){const n=e.map(((e,n)=>e+(e-1)*(t[n]-1))).map((e=>e-1)),r=n.map((e=>Math.floor(e/2))),a=n.map(((e,t)=>e-r[t]));return n.map(((e,t)=>[r[t],a[t]]))}([b.filterHeight,b.filterWidth],k):[[0,0],[0,0]];const v=1===k[0]&&1===k[1],[N,x]=function(e,t,n){const r=n.map((e=>e[0])),a=n.map((e=>e[1])),s=e.concat(r,a),o=t.map(((e,t)=>(e-s[t]%e)%e)),i=a.map(((e,t)=>e+o[t]));return[t.map(((e,t)=>[r[t],i[t]])),t.map(((e,t)=>[0,o[t]]))]}([b.inHeight,b.inWidth],k,w),S=v?l:"valid",T=v?g:(0,p.f)(g,k,N),I=("avg"===n?()=>(0,s.w)(T,t,h,S,m):()=>(0,u._)(T,t,h,S,m))(),_=v?I:(0,o.E)(I,k,x);return y?(0,c.X)(_,[_.shape[1],_.shape[2],_.shape[3]]):_}})},3788:(e,t,n)=>{"use strict";n.d(t,{s:()=>i});var r=n(3421),a=n(5202),s=n(9201),o=n(8516);const i=(0,n(128).op)({pow_:function(e,t){let n=(0,o._1)(e,"base","pow"),i=(0,o._1)(t,"exp","pow");[n,i]=(0,s.makeTypesMatch)(n,i);const u={a:n,b:i};return r.BV.runKernel(a.pe_,u)}})},1224:(e,t,n)=>{"use strict";n.d(t,{A:()=>o});var r=n(3421),a=n(5202),s=n(8516);const o=(0,n(128).op)({prelu_:function(e,t){const n={x:(0,s._1)(e,"x","prelu"),alpha:(0,s._1)(t,"alpha","prelu")};return r.BV.runKernel(a.o0g,n)}})},4703:(e,t,n)=>{"use strict";function r(e,t=!1){console.log(e.toString(t))}n.d(t,{S:()=>r})},3610:(e,t,n)=>{"use strict";n.d(t,{W:()=>i});var r=n(3421),a=n(5202),s=n(8516),o=n(5875);const i=(0,n(128).op)({prod_:function(e,t=null,n=!1){let i=(0,s._1)(e,"x","prod");"bool"===i.dtype&&(i=(0,o.p)(i,"int32"));const u={x:i},l={axis:t,keepDims:n};return r.BV.runKernel(a.DlI,u,l)}})},8268:(e,t,n)=>{"use strict";n.d(t,{k:()=>o});var r=n(3421),a=n(5202),s=n(8516);const o=(0,n(128).op)({real_:function(e){const t={input:(0,s._1)(e,"input","real")};return r.BV.runKernel(a.xJR,t)}})},3217:(e,t,n)=>{"use strict";n.d(t,{M:()=>o});var r=n(3421),a=n(5202),s=n(8516);const o=(0,n(128).op)({reciprocal_:function(e){const t={x:(0,s._1)(e,"x","reciprocal")};return r.BV.runKernel(a.$HU,t)}})},8536:(e,t,n)=>{"use strict";n.d(t,{U:()=>o});var r=n(3421),a=n(5202),s=n(8516);const o=(0,n(128).op)({relu_:function(e){const t={x:(0,s._1)(e,"x","relu")};return r.BV.runKernel(a.qkr,t)}})},9902:(e,t,n)=>{"use strict";n.d(t,{b:()=>o});var r=n(3421),a=n(5202),s=n(8516);const o=(0,n(128).op)({relu6_:function(e){const t={x:(0,s._1)(e,"x","relu6")};return r.BV.runKernel(a.SbG,t)}})},2673:(e,t,n)=>{"use strict";n.d(t,{X:()=>o});var r=n(3421),a=n(5202),s=n(8516);const o=(0,n(128).op)({reshape_:function(e,t){const n={x:(0,s._1)(e,"x","reshape","string_or_numeric")},o={shape:t};return r.BV.runKernel(a.HZH,n,o)}})},4330:(e,t,n)=>{"use strict";n.d(t,{G:()=>o});var r=n(3421),a=n(5202),s=n(8516);const o=(0,n(128).op)({reverse_:function(e,t){const n={x:(0,s._1)(e,"x","reverse")},o={dims:t};return r.BV.runKernel(a.mKl,n,o)}})},4520:(e,t,n)=>{"use strict";n.d(t,{N:()=>o});var r=n(3421),a=n(5202),s=n(8516);const o=(0,n(128).op)({round_:function(e){const t={x:(0,s._1)(e,"x","round")};return r.BV.runKernel(a.e07,t)}})},5829:(e,t,n)=>{"use strict";n.d(t,{b:()=>o});var r=n(3421),a=n(5202),s=n(8516);const o=(0,n(128).op)({rsqrt_:function(e){const t={x:(0,s._1)(e,"x","rsqrt","float32")};return r.BV.runKernel(a.bV0,t)}})},2502:(e,t,n)=>{"use strict";n.d(t,{i:()=>s});var r=n(4003),a=n(213);function s(e,t){if(((0,r.isTypedArray)(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&(0,r.isTypedArray)(e)&&!(e instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return(0,a.H)(e,[],[],t)}},6576:(e,t,n)=>{"use strict";n.r(t),n.d(t,{calculateShapes:()=>o,validateInput:()=>s,validateUpdateShape:()=>a});var r=n(9740);function a(e,t,n){const r=t.rank>1?t.shape[t.rank-1]:1,a=t.rank>1?t.rank-1:1,s=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${n.shape}, indices.shape: ${t.shape}, shape: ${e}, sliceDim: ${r}, and batchDim: ${a}.`;if(n.rank<a)throw new Error(s+` update.rank < ${a}. `);if(e.length<r+(n.rank-a))throw new Error(s+` Output shape length < ${r+(n.rank-a)}`);if(n.rank!==a+e.length-r)throw new Error(s+" update.rank != "+(a+e.length-r));for(let e=0;e<a;++e)if(n.shape[e]!==t.shape[e])throw new Error(s+` updates.shape[${e}] (${n.shape[e]}) != indices.shape[${e}] (${t.shape[e]}).`);for(let t=0;t<n.rank-a;++t)if(n.shape[t+a]!==e[t+r])throw new Error(s+` updates.shape[${t+a}] (${n.shape[t+a]}) != shape[${t+a}] (${e[t+a]})`)}function s(e,t,n){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==t.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(n.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${n}`);if(0===n.length){if(0===t.size)throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(0===e.size)throw new Error(`Updates specified for empty output. updates shape: ${e.shape}`)}a(n,t,e)}function o(e,t,n){const a=t.shape.length,s=a>1?t.shape[a-1]:1,o=n.length;let i=1;for(let e=s;e<o;++e)i*=n[e];const u=s<1?1:s;return{sliceRank:s,numUpdates:(0,r.NA)(t.shape)/u,sliceSize:i,strides:[...(0,r.e3)(n.slice(0,s)),1],outputSize:(0,r.NA)(n)}}},2899:(e,t,n)=>{"use strict";n.d(t,{U:()=>o});var r=n(3421),a=n(5202),s=n(8516);const o=(0,n(128).op)({selu_:function(e){const t={x:(0,s._1)(e,"x","selu")};return r.BV.runKernel(a.oFR,t)}})},141:(e,t,n)=>{"use strict";n.d(t,{$:()=>a,y:()=>r});const r=1.7580993408473768,a=1.0507009873554805},1438:(e,t,n)=>{"use strict";n.d(t,{U:()=>l});var r=n(8516),a=n(9740),s=n(9399),o=n(6581),i=n(128),u=n(2673);const l=(0,i.op)({separableConv2d_:function(e,t,n,i,l,c=[1,1],p="NHWC"){const d=(0,r._1)(e,"x","separableConv2d"),h=(0,r._1)(t,"depthwiseFilter","separableConv2d"),m=(0,r._1)(n,"pointwiseFilter","separableConv2d");let f=d,g=!1;if(3===d.rank&&(g=!0,f=(0,u.X)(d,[1,d.shape[0],d.shape[1],d.shape[2]])),"NCHW"===p)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");a.hu(4===f.rank,(()=>`Error in separableConv2d: input must be rank 4, but got rank ${f.rank}.`)),a.hu(4===h.rank,(()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${h.rank}.`)),a.hu(4===m.rank,(()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${h.rank}.`)),a.hu(1===m.shape[0],(()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${m.shape[0]}.`)),a.hu(1===m.shape[1],(()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${m.shape[1]}.`));const y=h.shape[2],b=h.shape[3];a.hu(m.shape[2]===y*b,(()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${y*b}, but got ${m.shape[2]}.`));const k=(0,o.B)(f,h,i,l,p,c),w=(0,s.T)(k,m,1,"valid",p);return g?(0,u.X)(w,[w.shape[1],w.shape[2],w.shape[3]]):w}})},5808:(e,t,n)=>{"use strict";n.d(t,{X:()=>o});var r=n(3421),a=n(5202),s=n(8516);const o=(0,n(128).op)({sigmoid_:function(e){const t={x:(0,s._1)(e,"x","sigmoid","float32")};return r.BV.runKernel(a.a5O,t)}})},2399:(e,t,n)=>{"use strict";n.d(t,{X:()=>o});var r=n(3421),a=n(5202),s=n(8516);const o=(0,n(128).op)({sign_:function(e){const t={x:(0,s._1)(e,"x","sign")};return r.BV.runKernel(a.i5y,t)}})},221:(e,t,n)=>{"use strict";n.d(t,{O:()=>o});var r=n(3421),a=n(5202),s=n(8516);const o=(0,n(128).op)({sin_:function(e){const t={x:(0,s._1)(e,"x","sin","float32")};return r.BV.runKernel(a.RQH,t)}})},1671:(e,t,n)=>{"use strict";n.d(t,{R:()=>o});var r=n(3421),a=n(5202),s=n(8516);const o=(0,n(128).op)({sinh_:function(e){const t={x:(0,s._1)(e,"x","sinh")};return r.BV.runKernel(a.wYB,t)}})},2565:(e,t,n)=>{"use strict";n.d(t,{t:()=>o});var r=n(3421),a=n(5202),s=n(8516);const o=(0,n(128).op)({slice_:function(e,t,n){const o=(0,s._1)(e,"x","slice","string_or_numeric");if(0===o.rank)throw new Error("Slicing scalar is not possible");const i={x:o},u={begin:t,size:n};return r.BV.runKernel(a.p2w,i,u)}})},1269:(e,t,n)=>{"use strict";n.r(t),n.d(t,{assertParamsValid:()=>a,computeFlatOffset:()=>y,computeOutShape:()=>o,getNormalizedAxes:()=>c,isSliceContinous:()=>g,maskToAxes:()=>s,parseSliceParams:()=>b,sliceInfo:()=>k,startForAxis:()=>m,startIndicesWithElidedDims:()=>p,stopForAxis:()=>f,stopIndicesWithElidedDims:()=>d,stridesForAxis:()=>h,stridesWithElidedDims:()=>i});var r=n(9740);function a(e,t,n){const a=e.shape.length;r.hu(a===t.length,(()=>`Error in slice${a}D: Length of begin ${t} must match the rank of the array (${a}).`)),r.hu(a===n.length,(()=>`Error in slice${a}D: Length of size ${n} must match the rank of the array (${a}).`));for(let s=0;s<a;++s)r.hu(t[s]+n[s]<=e.shape[s],(()=>`Error in slice${a}D: begin[${s}] + size[${s}] (${t[s]+n[s]}) would overflow input.shape[${s}] (${e.shape[s]})`))}function s(e){const t=[];let n=0;for(;e>0;)1&e&&t.push(n),e/=2,n++;return t}function o(e,t,n){const r=[];for(let a=0;a<e.length;a++)r[a]=Math.ceil((t[a]-e[a])/n[a]);return r}function i(e,t,n,r){const a=[...e];for(let e=a.length;e<r.length;e++)a.push(1);for(let e=0;e<n;e++)0===e?a[t]=1:(a.splice(t,0,1),a.pop());return a}function u(e,t,n){return n<=e?n:n-(t-1)}function l(e,t){const n=[];for(let r=0;r<e;r++)n.push(t+r);return n}function c(e,t,n,r,a,s,o,u,l){const c=e.length;let g=new Array(c),y=new Array(c),b=new Array(c);if(t.length&&n>0){const l=t[0],c=n+1;g=p(o,l,c,r,e),y=d(u,l,c,a,e),b=i(s,l,c,e)}else for(let t=0;t<c;t++)g[t]=m(o,r,s,e,t,l),y[t]=f(u,a,s,e,t,l),b[t]=h(s,t,l);return{begin:g,end:y,strides:b}}function p(e,t,n,r,a){const s=[...a],o=l(n,t);for(let a=0;a<s.length;a++)if(o.indexOf(a)>-1)s[a]=0;else{const o=u(t,n,a);let i=r[o];e&1<<o&&(i=0),s[a]=i}return s}function d(e,t,n,a,s){const o=[...s],i=l(n,t);for(let r=0;r<o.length;r++)if(i.indexOf(r)>-1)o[r]=Number.MAX_SAFE_INTEGER;else{const s=u(t,n,r);let i=a[s];e&1<<s&&(i=Number.MAX_SAFE_INTEGER),o[r]=i}for(let e=0;e<o.length;e++){const t=s[e];o[e]<0&&(o[e]+=t),o[e]=r.uZ(0,o[e],s[e])}return o}function h(e,t,n){let r=e[t];return(n&1<<t||null==r)&&(r=1),r}function m(e,t,n,a,s,o){let i=t[s];const u=n[s]||1;(e&1<<s||o&1<<s||null==i)&&(i=u>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const l=a[s];return i<0&&(i+=l),i=r.uZ(0,i,l-1),i}function f(e,t,n,a,s,o){let i=t[s];const u=n[s]||1;(e&1<<s||o&1<<s||null==i)&&(i=u>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const l=a[s];return i<0&&(i+=l),i=u>0?r.uZ(0,i,l):r.uZ(-1,i,l-1),i}function g(e,t,n){let r=n.length;for(let e=0;e<n.length;e++)if(n[e]>1){r=e;break}for(let a=r+1;a<n.length;a++)if(t[a]>0||n[a]!==e[a])return!1;return!0}function y(e,t){let n=e.length>0?e[e.length-1]:1;for(let r=0;r<e.length-1;r++)n+=e[r]*t[r];return n}function b(e,t,n){let a;const s=e.shape.length;let o;return a="number"==typeof t?[t,...new Array(s-1).fill(0)]:t.length<s?t.concat(new Array(s-t.length).fill(0)):t.slice(),a.forEach((e=>{r.hu(-1!==e,(()=>"slice() does not support negative begin indexing."))})),o=null==n?new Array(s).fill(-1):"number"==typeof n?[n,...new Array(s-1).fill(-1)]:n.length<s?n.concat(new Array(s-n.length).fill(-1)):n,o=o.map(((t,n)=>t>=0?t:(r.hu(-1===t,(()=>`Negative size values should be exactly -1 but got ${t} for the slice() size at index ${n}.`)),e.shape[n]-a[n]))),[a,o]}function k(e,t,n,r,a,s,o,i,u){let l;if(null==r?(l=new Array(t.length),l.fill(1)):l=r,null!=o&&0!=(o&o-1))throw new Error("Multiple ellipses in slice is not allowed.");let c=!1;const p={dims:l.length,numAddAxisAfterEllipsis:0,begin:t.slice(),end:n.slice(),strides:l.slice(),beginMask:a,endMask:s,ellipsisMask:o,newAxisMask:i,shrinkAxisMask:u};for(let e=0;e<p.dims;e++)c&&0!=(1<<e&i)&&p.numAddAxisAfterEllipsis++,1<<e&o&&(c=!0);c||(p.ellipsisMask|=1<<p.dims,p.dims++);const d={dims:e.length,beginMask:0,endMask:0,beginValid:!1,endValid:!1};!function(e,t){t.beginMask=0,t.endMask=0,t.shrinkAxisMask=0;let n=0;t.beginValid=null!=e.begin,t.endValid=null!=e.end,t.begin=new Array(t.dims),t.end=new Array(t.dims),t.strides=new Array(t.dims),t.finalShapeGatherIndices=[],t.finalShapeGatherIndicesSparse=[],t.inputShapeGatherIndicesSparse=new Array(t.dims);for(let r=0;r<e.dims;r++)if(1<<r&e.ellipsisMask){const a=Math.min(t.dims-(e.dims-r)+1+e.numAddAxisAfterEllipsis,t.dims);for(;n<a;n++)t.begin[n]=0,t.end[n]=0,t.strides[n]=1,t.beginMask|=1<<n,t.endMask|=1<<n,t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(-1),t.inputShapeGatherIndicesSparse[n]=r}else if(1<<r&e.newAxisMask)t.finalShapeGatherIndices.push(-2),t.finalShapeGatherIndicesSparse.push(-1);else{if(n===t.begin.length)throw Error(`Index out of range using input dim ${n}; input has only ${t.dims} dims, ${t.begin.length}.`);null!=e.begin&&(t.begin[n]=e.begin[r]),null!=e.end&&(t.end[n]=e.end[r]),t.strides[n]=e.strides[r],e.beginMask&1<<r&&(t.beginMask|=1<<n),e.endMask&1<<r&&(t.endMask|=1<<n),e.shrinkAxisMask&1<<r?(t.finalShapeGatherIndices.push(-1),t.finalShapeGatherIndicesSparse.push(-1),t.shrinkAxisMask|=1<<n):(t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(r)),t.inputShapeGatherIndicesSparse[n]=r,n++}}(p,d);let h=!0,m=!0,f=!0;const g=[],y=[];for(let t=0;t<e.length;++t){if(0===d.strides[t])throw Error(`strides[${t}] must be non-zero`);const n=!!(d.shrinkAxisMask&1<<t),r=e[t];if(-1===r){g.push(n?1:-1);continue}const a=[d.beginMask&1<<t,d.endMask&1<<t],s=[d.strides[t]>0?0:-1,d.strides[t]>0?r:r-1];if(n&&d.strides[t]<=0)throw Error("only stride 1 allowed on non-range indexing.");f=f&&1===d.strides[t];const o=!!(d.beginMask&1<<t&&d.endMask&1<<t);if(d.beginValid&&d.endValid){if(n){const e=d.begin[t]<0?r+d.begin[t]:d.begin[t];if(d.begin[t]=e,d.end[t]=d.begin[t]+1,e<0||e>=r)throw Error(`slice index ${d.begin[t]} of dimension ${t} out of bounds.`)}else d.begin[t]=w(d.begin[t],0,d.strides[t],r,a,s),d.end[t]=w(d.end[t],1,d.strides[t],r,a,s);const e=1===d.strides[t]&&0===d.begin[t]&&d.end[t]===r;h=h&&e,m=m&&(0===t&&1===d.strides[t]||e)}else h=h&&1===d.strides[t]&&o,m=m&&(0===t&&1===d.strides[t]||o);let i,u=!1;if(d.beginValid&&d.endValid?(i=d.end[t]-d.begin[t],u=!0):n?(i=1,u=!0):o&&r>=0&&(i=d.strides[t]<0?-r:r,u=!0),u){let e;e=0===i||i<0!=d.strides[t]<0?0:Math.trunc(i/d.strides[t])+(i%d.strides[t]!=0?1:0),g.push(e)}else g.push(-1)}for(let e=0;e<d.finalShapeGatherIndices.length;++e){const t=d.finalShapeGatherIndices[e];t>=0?y.push(g[t]):-2===t&&y.push(1)}return{finalShapeSparse:y.filter(((e,t)=>-2!==d.finalShapeGatherIndices[t])),finalShape:y,isIdentity:h,sliceDim0:m,isSimpleSlice:f,begin:d.begin,end:d.end,strides:d.strides}}function w(e,t,n,r,a,s){if(a[t])return n>0?s[t]:s[t+1&1];{const t=e<0?r+e:e;return t<s[0]?s[0]:t>s[1]?s[1]:t}}},5301:(e,t,n)=>{"use strict";n.d(t,{X:()=>o});var r=n(3421),a=n(5202),s=n(8516);const o=(0,n(128).op)({softmax_:function(e,t=-1){const n=(0,s._1)(e,"logits","softmax","float32");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${t}`);const o={logits:n},i={dim:t};return r.BV.runKernel(a.Gcp,o,i)}})},9876:(e,t,n)=>{"use strict";n.d(t,{W:()=>o});var r=n(3421),a=n(5202),s=n(8516);const o=(0,n(128).op)({softplus_:function(e){const t={x:(0,s._1)(e,"x","softplus")};return r.BV.runKernel(a.MRv,t)}})},1639:(e,t,n)=>{"use strict";n.d(t,{f:()=>i});var r=n(3421),a=n(5202),s=n(8516),o=n(9740);const i=(0,n(128).op)({spaceToBatchND_:function(e,t,n){const i=(0,s._1)(e,"x","spaceToBatchND");o.hu(i.rank>=1+t.length,(()=>`input rank ${i.rank} should be > than [blockShape] ${t.length}`)),o.hu(n.length===t.length,(()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${t.length}`)),o.hu(i.shape.reduce(((e,r,a)=>a>0&&a<=t.length?e&&(r+n[a-1][0]+n[a-1][1])%t[a-1]==0:e),!0),(()=>`input spatial dimensions ${i.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${t.toString()}`));const u={x:i},l={blockShape:t,paddings:n};return r.BV.runKernel(a.TQc,u,l)}})},6991:(e,t,n)=>{"use strict";n.d(t,{k:()=>o});var r=n(3421),a=n(5202),s=n(9740);const o=(0,n(128).op)({fft_:function(e){(0,s.hu)("complex64"===e.dtype,(()=>`The dtype for tf.spectral.fft() must be complex64 but got ${e.dtype}.`));const t={input:e};return r.BV.runKernel(a.vwp,t)}})},8923:(e,t,n)=>{"use strict";n.d(t,{S:()=>o});var r=n(3421),a=n(5202),s=n(9740);const o=(0,n(128).op)({ifft_:function(e){(0,s.hu)("complex64"===e.dtype,(()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${e.dtype}.`));const t={input:e};return r.BV.runKernel(a.Qg5,t)}})},8117:(e,t,n)=>{"use strict";n.d(t,{w:()=>m});var r=n(6609),a=n(9134),s=n(3819),o=n(2805),i=n(128),u=n(8268),l=n(2673),c=n(4330),p=n(2502),d=n(2565),h=n(8923);const m=(0,i.op)({irfft_:function(e){const t=e.shape[e.shape.length-1],n=e.size/t;let i;if(t<=2){const r=(0,l.X)(e,[n,t]);i=(0,h.S)(r)}else{const m=[n,2*(t-1)],f=(0,l.X)((0,u.k)(e),[n,t]),g=(0,l.X)((0,s.a)(e),[n,t]),y=(0,c.G)((0,d.t)(f,[0,1],[n,t-2]),1),b=(0,o.d)((0,c.G)((0,d.t)(g,[0,1],[n,t-2]),1),(0,p.i)(-1)),k=(0,a.z)([f,y],1),w=(0,a.z)([g,b],1),v=(0,l.X)((0,r.P)(k,w),[m[0],m[1]]);i=(0,h.S)(v)}if(i=(0,u.k)(i),3===e.rank&&0!==e.shape[0]){const t=i,n=e.shape[0];i=(0,l.X)(i,[n,i.shape[0]/n,i.shape[1]]),t.dispose()}return i}})},1411:(e,t,n)=>{"use strict";n.d(t,{Q:()=>f});var r=n(9740),a=n(6609),s=n(9134),o=n(3819),i=n(128),u=n(8268),l=n(2673),c=n(2565),p=n(1381),d=n(1434),h=n(9635),m=n(6991);const f=(0,i.op)({rfft_:function(e,t){(0,r.hu)("float32"===e.dtype,(()=>`The dtype for rfft() must be real value but got ${e.dtype}`));let n=e.shape[e.shape.length-1];const i=e.size/n;let f;if(null!=t&&t<n){const r=e.shape.map((e=>0)),a=e.shape.map((e=>e));a[e.shape.length-1]=t,f=(0,c.t)(e,r,a),n=t}else if(null!=t&&t>n){const r=e.shape.map((e=>e));r[e.shape.length-1]=t-n,f=(0,s.z)([e,(0,d.l)(r)],e.shape.length-1),n=t}else f=e;const g=(0,h.P)(f),y=(0,l.X)((0,a.P)(f,g),[i,n]),b=(0,m.k)(y),k=Math.floor(n/2)+1,w=(0,u.k)(b),v=(0,o.a)(b),N=(0,p.V)(w,[k,n-k],w.shape.length-1),x=(0,p.V)(v,[k,n-k],v.shape.length-1),S=f.shape.slice();return S[f.shape.length-1]=k,(0,l.X)((0,a.P)(N[0],x[0]),S)}})},1381:(e,t,n)=>{"use strict";n.d(t,{V:()=>o});var r=n(3421),a=n(5202),s=n(8516);const o=(0,n(128).op)({split_:function(e,t,n=0){const o={x:(0,s._1)(e,"x","split")},i={numOrSizeSplits:t,axis:n};return r.BV.runKernel(a.L8s,o,i)}})},7346:(e,t,n)=>{"use strict";n.d(t,{_:()=>o});var r=n(3421),a=n(5202),s=n(8516);const o=(0,n(128).op)({sqrt_:function(e){const t={x:(0,s._1)(e,"x","sqrt","float32")};return r.BV.runKernel(a.FKq,t)}})},6966:(e,t,n)=>{"use strict";n.d(t,{h:()=>s});var r=n(3421),a=n(8516);const s=(0,n(128).op)({square_:function(e){const t=(0,a._1)(e,"x","square");return r.BV.runKernel("Square",{x:t},{})}})},8774:(e,t,n)=>{"use strict";n.d(t,{$:()=>u});var r=n(3421),a=n(5202),s=n(9201),o=n(8516),i=n(2011);const u=(0,n(128).op)({squaredDifference_:function(e,t){let n=(0,o._1)(e,"a","squaredDifference"),u=(0,o._1)(t,"b","squaredDifference");[n,u]=(0,s.makeTypesMatch)(n,u),(0,i.assertAndGetBroadcastShape)(n.shape,u.shape);const l={a:n,b:u};return r.BV.runKernel(a._tC,l,{})}})},5920:(e,t,n)=>{"use strict";n.d(t,{L:()=>i});var r=n(8516),a=n(9740),s=n(128),o=n(2673);const i=(0,s.op)({squeeze_:function(e,t){const n=(0,r._1)(e,"x","squeeze","string_or_numeric");return(0,o.X)(n,(0,a.bp)(n.shape,t).newShape)}})},2235:(e,t,n)=>{"use strict";n.d(t,{k:()=>i});var r=n(3421),a=n(5202),s=n(8516),o=n(9740);const i=(0,n(128).op)({stack_:function(e,t=0){const n=(0,s.sI)(e,"tensors","stack","string_or_numeric");o.hu(n.length>=1,(()=>"Pass at least one tensor to tf.stack")),n.length>0&&o.hu(t<=n[0].rank,(()=>"Axis must be <= rank of the tensor"));const i=n,u={axis:t};return r.BV.runKernel(a.QiL,i,u)}})},3863:(e,t,n)=>{"use strict";n.d(t,{N:()=>o});var r=n(3421),a=n(5202),s=n(8516);const o=(0,n(128).op)({step_:function(e,t=0){const n={x:(0,s._1)(e,"x","step")},o={alpha:t};return r.BV.runKernel(a.h8e,n,o)}})},8333:(e,t,n)=>{"use strict";n.d(t,{N:()=>o});var r=n(3421),a=n(5202),s=n(8516);const o=(0,n(128).op)({stridedSlice_:function(e,t,n,o,i=0,u=0,l=0,c=0,p=0){const d={x:(0,s._1)(e,"x","stridedSlice","string_or_numeric")},h={begin:t,end:n,strides:o,beginMask:i,endMask:u,ellipsisMask:l,newAxisMask:c,shrinkAxisMask:p};return r.BV.runKernel(a.jQk,d,h)}})},6885:(e,t,n)=>{"use strict";n.d(t,{l:()=>i});var r=n(3421),a=n(5202),s=n(9201),o=n(8516);const i=(0,n(128).op)({sub_:function(e,t){let n=(0,o._1)(e,"a","sub"),i=(0,o._1)(t,"b","sub");[n,i]=(0,s.makeTypesMatch)(n,i);const u={a:n,b:i};return r.BV.runKernel(a.Tr8,u)}})},4786:(e,t,n)=>{"use strict";n.d(t,{S:()=>i});var r=n(3421),a=n(5202),s=n(8516),o=n(5875);const i=(0,n(128).op)({sum_:function(e,t=null,n=!1){let i=(0,s._1)(e,"x","sum");"bool"===i.dtype&&(i=(0,o.p)(i,"int32"));const u={x:i},l={axis:t,keepDims:n};return r.BV.runKernel(a.GBy,u,l)}})},7088:(e,t,n)=>{"use strict";n.d(t,{O:()=>o});var r=n(3421),a=n(5202),s=n(8516);const o=(0,n(128).op)({tan_:function(e){const t={x:(0,s._1)(e,"x","tan","float32")};return r.BV.runKernel(a.sEM,t)}})},1871:(e,t,n)=>{"use strict";n.d(t,{A:()=>o});var r=n(3421),a=n(5202),s=n(8516);const o=(0,n(128).op)({tanh_:function(e){const t={x:(0,s._1)(e,"x","tanh","float32")};return r.BV.runKernel(a.MIZ,t)}})},7316:(e,t,n)=>{"use strict";n.d(t,{X:()=>s});var r=n(8516),a=n(213);function s(e,t,n){const s=(0,r.C)(e,n);return(0,a.H)(e,t,s,n)}},717:(e,t,n)=>{"use strict";n.d(t,{w:()=>o});var r=n(8516),a=n(9740),s=n(213);function o(e,t,n){if((0,a.Cq)(e),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");const o=(0,r.C)(e,n);if(3!==o.length&&1!==o.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===o.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return(0,s.H)(e,t,o,n)}},213:(e,t,n)=>{"use strict";n.d(t,{H:()=>o});var r=n(3421),a=n(9740),s=n(4003);function o(e,t,n,o){if(null==o)o=(0,a.D2)(e);else if("complex64"===o)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if("object"==typeof e&&("texture"in e||"buffer"in e&&!(e.buffer instanceof ArrayBuffer))){if("float32"!==o&&"int32"!==o)throw new Error(`Creating tensor from GPU data only supports 'float32'|'int32' dtype, while the dtype is ${o}.`);return r.BV.backend.createTensorFromGPUData(e,t||n,o)}if(!(0,s.isTypedArray)(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){(0,a.Mu)(t);const e=(0,a.NA)(t),r=(0,a.NA)(n);(0,a.hu)(e===r,(()=>`Based on the provided shape, [${t}], the tensor should have ${e} values but has ${r}`));for(let e=0;e<n.length;++e){const r=n[e],s=e!==n.length-1||r!==(0,a.NA)(t.slice(e));(0,a.hu)(n[e]===t[e]||!s,(()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${t}). `))}}return(0,s.isTypedArray)(e)||Array.isArray(e)||(e=[e]),t=t||n,e="string"!==o?(0,s.toTypedArray)(e,o):(0,s.flatten)(e,[],!0),r.BV.makeTensor(e,t,o)}},3239:(e,t,n)=>{"use strict";n.d(t,{G:()=>i});var r=n(3421),a=n(5202),s=n(8516),o=n(9740);const i=(0,n(128).op)({tile_:function(e,t){const n=(0,s._1)(e,"x","tile","string_or_numeric");o.hu(n.rank===t.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${t}.`));const i={x:n},u={reps:t};return r.BV.runKernel(a.n9L,i,u)}})},9090:(e,t,n)=>{"use strict";n.d(t,{h:()=>o});var r=n(3421),a=n(5202),s=n(8516);const o=(0,n(128).op)({topk_:function(e,t=1,n=!0){const o=(0,s._1)(e,"x","topk");if(0===o.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const i=o.shape[o.shape.length-1];if(t<0)throw new Error(`'k' passed to topk() must be >= 0 but got ${t}`);if(t>i)throw new Error(`'k' passed to topk() must be <= the last dimension (${i}) but got ${t}`);const u={x:o},l={k:t,sorted:n},[c,p]=r.BV.runKernel(a.cWu,u,l);return{values:c,indices:p}}})},6336:(e,t,n)=>{"use strict";n.d(t,{p:()=>h});var r=n(3421),a=n(6021),s=n(5202),o=n(8516),i=n(9740),u=n(6609),l=n(3819),c=n(7211),p=n(128),d=n(8268);const h=(0,p.op)({transpose_:function(e,t,n){const p=(0,o._1)(e,"x","transpose");if(null==t&&(t=p.shape.map(((e,t)=>t)).reverse()),i.hu(p.rank===t.length,(()=>`Error in transpose: rank of input ${p.rank} must match length of perm ${t}.`)),t.forEach((e=>{i.hu(e>=0&&e<p.rank,(()=>"All entries in 'perm' must be between 0 and "+(p.rank-1)+` but got ${t}`))})),p.rank<=1)return p.clone();const h={x:p},m={perm:t};return"complex64"===p.dtype?(0,a.lu)((()=>{let e=(0,d.k)(p),t=(0,l.a)(p);return e=r.BV.runKernel(s.G3Y,{x:e},m),t=r.BV.runKernel(s.G3Y,{x:t},m),n&&(t=(0,c.W)(t)),(0,u.P)(e,t)})):r.BV.runKernel(s.G3Y,h,m)}})},3447:(e,t,n)=>{"use strict";n.d(t,{T:()=>i});var r=n(3421),a=n(5202),s=n(8516),o=n(9740);const i=(0,n(128).op)({unique_:function(e,t=0){const n=(0,s._1)(e,"x","unique","string_or_numeric");(0,o.hu)(n.rank>0,(()=>"The input tensor must be at least 1D"));const i={x:n},u={axis:t},[l,c]=r.BV.runKernel(a.kpP,i,u);return{values:l,indices:c}}})},3644:(e,t,n)=>{"use strict";n.d(t,{p:()=>i});var r=n(3421),a=n(5202),s=n(8516),o=n(9740);const i=(0,n(128).op)({unsortedSegmentSum_:function(e,t,n){const i=(0,s._1)(e,"x","unsortedSegmentSum"),u=(0,s._1)(t,"segmentIds","unsortedSegmentSum","int32");(0,o.hu)((0,o.GN)(n),(()=>"numSegments must be of dtype int"));const l={x:i,segmentIds:u},c={numSegments:n};return r.BV.runKernel(a.Qvg,l,c)}})},7690:(e,t,n)=>{"use strict";n.d(t,{H:()=>i});var r=n(3421),a=n(5202),s=n(8516),o=n(9740);const i=(0,n(128).op)({unstack_:function(e,t=0){const n=(0,s._1)(e,"x","unstack","string_or_numeric");o.hu(t>=-n.shape.length&&t<n.shape.length,(()=>`Axis = ${t} is not in [-${n.shape.length}, ${n.shape.length})`));const i={value:n},u={axis:t};return r.BV.runKernel(a.ToN,i,u)}})},1203:(e,t,n)=>{"use strict";n.d(t,{a:()=>u});var r=n(3421),a=n(5202),s=n(8516),o=n(7933),i=n(2011);const u=(0,n(128).op)({where_:function(e,t,n){const u=(0,s._1)(t,"a","where"),l=(0,s._1)(n,"b","where"),c=(0,s._1)(e,"condition","where","bool"),p=(0,i.assertAndGetBroadcastShape)((0,i.assertAndGetBroadcastShape)(c.shape,u.shape),l.shape),d={condition:(0,o.U)(c,p),t:(0,o.U)(u,p),e:(0,o.U)(l,p)};return r.BV.runKernel(a.PhF,d)}})},1434:(e,t,n)=>{"use strict";n.d(t,{l:()=>o});var r=n(3421),a=n(9740),s=n(6609);function o(e,t="float32"){if((0,a.Mu)(e),"complex64"===t){const t=o(e,"float32"),n=o(e,"float32");return(0,s.P)(t,n)}const n=(0,a.wT)((0,a.NA)(e),t);return r.BV.makeTensor(n,e,t)}},9635:(e,t,n)=>{"use strict";n.d(t,{P:()=>o});var r=n(3421),a=n(5202),s=n(8516);const o=(0,n(128).op)({zerosLike_:function(e){const t={x:(0,s._1)(e,"x","zerosLike")};return r.BV.runKernel(a.RuY,t)}})},1313:(e,t,n)=>{"use strict";n.d(t,{es:()=>b,YD:()=>p,_w:()=>w,t3:()=>k,FZ:()=>y,Vp:()=>g,Vi:()=>f});var r=n(7944),a=n(9740);function s(e,t,n,r){const s=(0,a.e3)(t),i=function(e,t,n,r){const s=(0,a.NA)(t),i=r[r.length-1],u=new Array(i).fill(0),c=t.length,p="complex64"===n?l(e):e;if(c>1)for(let e=0;e<s/i;e++){const t=e*i;for(let e=0;e<i;e++)u[e]=Math.max(u[e],o(p[t+e],0,n).length)}return u}(e,t,n,s),c=t.length,p=u(e,t,n,s,i),d=["Tensor"];return r&&(d.push(`  dtype: ${n}`),d.push(`  rank: ${c}`),d.push(`  shape: [${t}]`),d.push("  values:")),d.push(p.map((e=>"    "+e)).join("\n")),d.join("\n")}function o(e,t,n){let r;return r=Array.isArray(e)?`${parseFloat(e[0].toFixed(7))} + ${parseFloat(e[1].toFixed(7))}j`:(0,a.HD)(e)?`'${e}'`:"bool"===n?i(e):parseFloat(e.toFixed(7)).toString(),(0,a.oj)(r,t)}function i(e){return 0===e?"false":"true"}function u(e,t,n,r,a,s=!0){const c="complex64"===n?2:1,p=t[0],d=t.length;if(0===d)return"complex64"===n?[o(l(e)[0],0,n)]:"bool"===n?[i(e[0])]:[e[0].toString()];if(1===d){if(p>20){const t=3*c;let r=Array.from(e.slice(0,t)),s=Array.from(e.slice((p-3)*c,p*c));return"complex64"===n&&(r=l(r),s=l(s)),["["+r.map(((e,t)=>o(e,a[t],n))).join(", ")+", ..., "+s.map(((e,t)=>o(e,a[p-3+t],n))).join(", ")+"]"]}return["["+("complex64"===n?l(e):Array.from(e)).map(((e,t)=>o(e,a[t],n))).join(", ")+"]"]}const h=t.slice(1),m=r.slice(1),f=r[0]*c,g=[];if(p>20){for(let t=0;t<3;t++){const r=t*f,s=r+f;g.push(...u(e.slice(r,s),h,n,m,a,!1))}g.push("...");for(let t=p-3;t<p;t++){const r=t*f,s=r+f;g.push(...u(e.slice(r,s),h,n,m,a,t===p-1))}}else for(let t=0;t<p;t++){const r=t*f,s=r+f;g.push(...u(e.slice(r,s),h,n,m,a,t===p-1))}const y=2===d?",":"";g[0]="["+(p>0?g[0]+y:"");for(let e=1;e<g.length-1;e++)g[e]=" "+g[e]+y;let b=",\n";for(let e=2;e<d;e++)b+="\n";return g[g.length-1]=" "+g[g.length-1]+"]"+(s?"":b),g}function l(e){const t=[];for(let n=0;n<e.length;n+=2)t.push([e[n],e[n+1]]);return t}var c=n(4003);class p{constructor(e,t,n){if(this.dtype=t,this.shape=e.slice(),this.size=a.NA(e),null!=n){const e=n.length;a.hu(e===this.size,(()=>`Length of values '${e}' does not match the size inferred by the shape '${this.size}'.`))}if("complex64"===t)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||a.rQ(t,this.size),this.strides=(0,a.e3)(e)}set(e,...t){0===t.length&&(t=[0]),a.hu(t.length===this.rank,(()=>`The number of provided coordinates (${t.length}) must match the rank (${this.rank})`));const n=this.locToIndex(t);this.values[n]=e}get(...e){0===e.length&&(e=[0]);let t=0;for(const n of e){if(n<0||n>=this.shape[t]){const t=`Requested out of range element at ${e}.   Buffer shape=${this.shape}`;throw new Error(t)}t++}let n=e[e.length-1];for(let t=0;t<e.length-1;++t)n+=this.strides[t]*e[t];return this.values[n]}locToIndex(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];let t=e[e.length-1];for(let n=0;n<e.length-1;++n)t+=this.strides[n]*e[n];return t}indexToLoc(e){if(0===this.rank)return[];if(1===this.rank)return[e];const t=new Array(this.shape.length);for(let n=0;n<t.length-1;++n)t[n]=Math.floor(e/this.strides[n]),e-=t[n]*this.strides[n];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return d().makeTensor(this.values,this.shape,this.dtype)}}let d=null,h=null,m=null;function f(e){d=e}function g(e){h=e}function y(e){m=e}class b{constructor(e,t,n,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=a.NA(e),this.strides=(0,a.e3)(e),this.dataId=n,this.id=r,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const e=await this.data();return h.buffer(this.shape,this.dtype,e)}bufferSync(){return h.buffer(this.shape,this.dtype,this.dataSync())}async array(){const e=await this.data();return(0,a.GX)(this.shape,e,"complex64"===this.dtype)}arraySync(){return(0,a.GX)(this.shape,this.dataSync(),"complex64"===this.dtype)}async data(){this.throwIfDisposed();const e=d().read(this.dataId);if("string"===this.dtype){const t=await e;try{return t.map((e=>c.decodeString(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataToGPU(e){return this.throwIfDisposed(),d().readToGPU(this.dataId,e)}dataSync(){this.throwIfDisposed();const e=d().readSync(this.dataId);if("string"===this.dtype)try{return e.map((e=>c.decodeString(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();const e=await d().read(this.dataId);return"string"===this.dtype?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(d().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(e=!1){return h.print(this,e)}clone(){return this.throwIfDisposed(),h.clone(this)}toString(e=!1){return s(this.dataSync(),this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),h.cast(this,e)}variable(e=!0,t,n){return this.throwIfDisposed(),d().makeVariable(this,e,t,n)}}function k(){return(0,r.R)("Tensor",(()=>b))}Object.defineProperty(b,Symbol.hasInstance,{value:e=>!!e&&null!=e.data&&null!=e.dataSync&&null!=e.throwIfDisposed}),k();class w extends b{constructor(e,t,n,r){super(e.shape,e.dtype,e.dataId,r),this.trainable=t,this.name=n}assign(e){if(e.dtype!==this.dtype)throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!a.cO(e.shape,this.shape))throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);d().disposeTensor(this),this.dataId=e.dataId,d().incRef(this,null)}dispose(){d().disposeVariable(this),this.isDisposedInternal=!0}}Object.defineProperty(w,Symbol.hasInstance,{value:e=>e instanceof b&&null!=e.assign&&e.assign instanceof Function})},9201:(e,t,n)=>{"use strict";n.r(t),n.d(t,{assertTypesMatch:()=>i,getTensorsInContainer:()=>l,isTensorInList:()=>u,makeTypesMatch:()=>o});var r=n(1313),a=n(7139),s=n(9740);function o(e,t){if(e.dtype===t.dtype)return[e,t];const n=(0,a.x8)(e.dtype,t.dtype);return[e.cast(n),t.cast(n)]}function i(e,t){(0,s.hu)(e.dtype===t.dtype,(()=>`The dtypes of the first(${e.dtype}) and second(${t.dtype}) input must match`))}function u(e,t){return t.some((t=>t.id===e.id))}function l(e){const t=[];return c(e,t,new Set),t}function c(e,t,n){if(null==e)return;if(e instanceof r.es)return void t.push(e);if(a=e,!Array.isArray(a)&&"object"!=typeof a)return;var a;const s=e;for(const e in s){const r=s[e];n.has(r)||(n.add(r),c(r,t,n))}}},8516:(e,t,n)=>{"use strict";n.d(t,{C:()=>u,_1:()=>p,sI:()=>d});var r=n(3421),a=n(3535),s=n(1313),o=n(4003),i=n(9740);function u(e,t){let n=e;if((0,o.isTypedArray)(e))return"string"===t?[]:[e.length];if("object"==typeof e){if("texture"in e){const t=e.channels||"RGBA";return[e.height,e.width*t.length]}if("buffer"in e&&!(e.buffer instanceof ArrayBuffer))return[e.buffer.size/(null==t?4:(0,i.bT)(t))]}if(!Array.isArray(e))return[];const r=[];for(;Array.isArray(n)||(0,o.isTypedArray)(n)&&"string"!==t;)r.push(n.length),n=n[0];return Array.isArray(e)&&(0,a.OB)().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&l(e,r,[]),r}function l(e,t,n){if(n=n||[],!Array.isArray(e)&&!(0,o.isTypedArray)(e))return void(0,i.hu)(0===t.length,(()=>`Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`));(0,i.hu)(t.length>0,(()=>`Element arr[${n.join("][")}] should be a primitive, but is an array of ${e.length} elements`)),(0,i.hu)(e.length===t[0],(()=>`Element arr[${n.join("][")}] should have ${t[0]} elements, but has ${e.length} elements`));const r=t.slice(1);for(let t=0;t<e.length;++t)l(e[t],r,n.concat(t))}function c(e,t,n,r){if("string_or_numeric"!==e){if(null==e)throw new Error("Expected dtype cannot be null.");if("numeric"!==e&&e!==t||"numeric"===e&&"string"===t)throw new Error(`Argument '${n}' passed to '${r}' must be ${e} tensor, but got ${t} tensor`)}}function p(e,t,n,a="numeric"){if(e instanceof s.es)return c(a,e.dtype,t,n),e;let l=(0,i.D2)(e);if("string"!==l&&["bool","int32","float32"].indexOf(a)>=0&&(l=a),c(a,l,t,n),null==e||!(0,o.isTypedArray)(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e){const r=null==e?"null":e.constructor.name;throw new Error(`Argument '${t}' passed to '${n}' must be a Tensor or TensorLike, but got '${r}'`)}const p=u(e,l);(0,o.isTypedArray)(e)||Array.isArray(e)||(e=[e]);const d="string"!==l?(0,o.toTypedArray)(e,l):(0,o.flatten)(e,[],!0);return r.BV.makeTensor(d,p,l)}function d(e,t,n,r="numeric"){if(!Array.isArray(e))throw new Error(`Argument ${t} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return e.map(((e,a)=>p(e,`${t}[${a}]`,n,r)))}},7139:(e,t,n)=>{"use strict";var r,a,s,o,i;n.d(t,{x8:()=>l,yw:()=>r,z4:()=>c}),function(e){e.R0="R0",e.R1="R1",e.R2="R2",e.R3="R3",e.R4="R4",e.R5="R5",e.R6="R6"}(r||(r={})),function(e){e.float32="float32",e.int32="int32",e.bool="int32",e.complex64="complex64"}(a||(a={})),function(e){e.float32="float32",e.int32="int32",e.bool="bool",e.complex64="complex64"}(s||(s={})),function(e){e.float32="float32",e.int32="float32",e.bool="float32",e.complex64="complex64"}(o||(o={})),function(e){e.float32="complex64",e.int32="complex64",e.bool="complex64",e.complex64="complex64"}(i||(i={}));const u={float32:o,int32:a,bool:s,complex64:i};function l(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw new Error(`Can not upcast ${e} with ${t}`)}return u[e][t]}function c(e){return l(e,"int32")}},4003:(e,t,n)=>{"use strict";n.r(t),n.d(t,{arraysEqual:()=>a.cO,assert:()=>a.hu,assertNonNegativeIntegerDimensions:()=>a.Mu,assertNonNull:()=>a.Cq,assertShapesMatch:()=>a.k5,bytesFromStringArray:()=>a.Ub,bytesPerElement:()=>a.bT,checkConversionForErrors:()=>a.D5,clamp:()=>a.uZ,computeStrides:()=>a.e3,convertBackendValuesAndArrayBuffer:()=>a.KS,createScalarValue:()=>k,createShuffledIndices:()=>a.U$,decodeString:()=>S,distSquared:()=>a.E7,encodeString:()=>x,fetch:()=>N,fingerPrint64:()=>b,flatten:()=>I,getArrayFromDType:()=>a.rQ,getTypedArrayFromDType:()=>a.WP,hasEncodingLoss:()=>a.QB,hexToLong:()=>i,indexToLoc:()=>a.NE,inferDtype:()=>a.D2,inferFromImplicitShape:()=>a.JZ,isBoolean:()=>a.jn,isFunction:()=>a.mf,isInt:()=>a.GN,isNumber:()=>a.hj,isPromise:()=>a.tI,isScalarShape:()=>a.xH,isString:()=>a.HD,isTypedArray:()=>T,isValidDtype:()=>a.LP,locToIndex:()=>a.qy,makeOnesTypedArray:()=>a.p8,makeZerosNestedTypedArray:()=>a.l6,makeZerosTypedArray:()=>a.wT,nearestDivisor:()=>a.jP,nearestLargerEven:()=>a.nY,now:()=>v,parseAxisParam:()=>a.EC,randUniform:()=>a.bj,repeatedTry:()=>a.WD,rightPad:()=>a.oj,shuffle:()=>a.TV,shuffleCombo:()=>a.d7,sizeFromShape:()=>a.NA,sizeToSquarishShape:()=>a.YP,squeezeShape:()=>a.bp,sum:()=>a.Sm,swap:()=>a.LF,tanh:()=>a.AE,toNestedArray:()=>a.GX,toTypedArray:()=>w});var r=n(3535),a=n(9740),s=n(7808);const o=n.n(s)()||s;function i(e){return o.fromString(e,!0,16)}const u=i("c3a5c85c97cb3127"),l=i("b492b66fbe98f273"),c=i("9ae16a3b2f90404f");function p(e){return e.xor(e.shru(47))}function d(e,t,n){const r=e.slice(t,t+n);return o.fromBytes(Array.from(r),!0,!0)}function h(e,t){return d(e,t,8)}function m(e,t){return d(e,t,4)}function f(e,t){return 0===t?e:e.shru(t).or(e.shl(64-t))}function g(e,t,n=i("9ddfea08eb382d69")){let r=e.xor(t).mul(n);r=r.xor(r.shru(47));let a=t.xor(r).mul(n);return a=a.xor(a.shru(47)),a=a.mul(n),a}function y(e,t,n,r){return function(e,t,n,r,a,s){a=a.add(e),s=f(s.add(a).add(r),21);const o=a;return a=(a=a.add(t)).add(n),s=s.add(f(a,44)),[a.add(r),s.add(o)]}(h(e,t),h(e,t+8),h(e,t+16),h(e,t+24),n,r)}function b(e,t=e.length){const n=o.fromNumber(81,!0);if(t<=32)return t<=16?function(e,t=e.length){if(t>=8){const n=c.add(2*t),r=h(e,0).add(c),a=h(e,t-8);return g(f(a,37).mul(n).add(r),f(r,25).add(a).mul(n),n)}if(t>=4){const n=c.add(2*t);return g(m(e,0).shl(3).add(t),m(e,t-4),n)}if(t>0){const n=e[0]+(e[t>>1]<<8),r=t+(e[t-1]<<2);return p(c.mul(n).xor(u.mul(r))).mul(c)}return c}(e,t):function(e,t=e.length){const n=c.add(2*t),r=h(e,0).mul(l),a=h(e,8),s=h(e,t-8).mul(n),o=h(e,t-16).mul(c);return g(f(r.add(a),43).add(f(s,30)).add(o),r.add(f(a.add(c),18)).add(s),n)}(e,t);if(t<=64)return function(e,t=e.length){const n=c.add(2*t),r=h(e,0).mul(c),a=h(e,8),s=h(e,t-8).mul(n),o=h(e,t-16).mul(c),i=f(r.add(a),43).add(f(s,30)).add(o),u=g(i,r.add(f(a.add(c),18)).add(s),n),l=h(e,16).mul(n),p=h(e,24),d=i.add(h(e,t-32)).mul(n),m=u.add(h(e,t-24)).mul(n);return g(f(l.add(p),43).add(f(d,30)).add(m),l.add(f(p.add(r),18)).add(d),n)}(e,t);let r=n,a=n.mul(l).add(113),s=p(a.mul(c).add(113)).mul(c),i=[o.UZERO,o.UZERO],d=[o.UZERO,o.UZERO];r=r.mul(c).add(h(e,0));let b=0;const k=64*(t-1>>6),w=k+(t-1&63)-63;do{r=f(r.add(a).add(i[0]).add(h(e,b+8)),37).mul(l),a=f(a.add(i[1]).add(h(e,b+48)),42).mul(l),r=r.xor(d[1]),a=a.add(i[0]).add(h(e,b+40)),s=f(s.add(d[0]),33).mul(l),i=y(e,b,i[1].mul(l),r.add(d[0])),d=y(e,b+32,s.add(d[1]),a.add(h(e,b+16))),[s,r]=[r,s],b+=64}while(b!==k);const v=l.add(s.and(255).shl(1));return b=w,d[0]=d[0].add(t-1&63),i[0]=i[0].add(d[0]),d[0]=d[0].add(i[0]),r=f(r.add(a).add(i[0]).add(h(e,b+8)),37).mul(v),a=f(a.add(i[1]).add(h(e,b+48)),42).mul(v),r=r.xor(d[1].mul(9)),a=a.add(i[0].mul(9).add(h(e,b+40))),s=f(s.add(d[0]),33).mul(v),i=y(e,b,i[1].mul(v),r.add(d[0])),d=y(e,b+32,s.add(d[1]),a.add(h(e,b+16))),[s,r]=[r,s],g(g(i[0],d[0],v).add(p(a).mul(u)).add(s),g(i[1],d[1],v).add(r),v)}function k(e,t){return"string"===t?x(e):w([e],t)}function w(e,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(e)&&(e=I(e)),(0,r.OB)().getBool("DEBUG")&&a.D5(e,t),function(e,t){return e instanceof Float32Array&&"float32"===t||e instanceof Int32Array&&"int32"===t||e instanceof Uint8Array&&"bool"===t}(e,t))return e;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t){const t=new Uint8Array(e.length);for(let n=0;n<t.length;++n)0!==Math.round(e[n])&&(t[n]=1);return t}throw new Error(`Unknown data type ${t}`)}function v(){return(0,r.OB)().platform.now()}function N(e,t){return(0,r.OB)().platform.fetch(e,t)}function x(e,t="utf-8"){return t=t||"utf-8",(0,r.OB)().platform.encode(e,t)}function S(e,t="utf-8"){return t=t||"utf-8",(0,r.OB)().platform.decode(e,t)}function T(e){return(0,r.OB)().platform.isTypedArray(e)}function I(e,t=[],n=!1){if(null==t&&(t=[]),"boolean"==typeof e||"number"==typeof e||"string"==typeof e||a.tI(e)||null==e||T(e)&&n)t.push(e);else if(Array.isArray(e)||T(e))for(let r=0;r<e.length;++r)I(e[r],t,n);else{let r=-1;for(const t of Object.keys(e))/^([1-9]+[0-9]*|0)$/.test(t)&&(r=Math.max(r,Number(t)));for(let a=0;a<=r;a++)I(e[a],t,n)}return t}},9740:(e,t,n)=>{"use strict";function r(e){let t=e.length,n=0;for(;t>0;)n=Math.random()*t|0,t--,i(e,t,n)}function a(e,t){if(e.length!==t.length)throw new Error(`Array sizes must match to be shuffled together First array length was ${e.length}Second array length was ${t.length}`);let n=e.length,r=0;for(;n>0;)r=Math.random()*n|0,n--,i(e,n,r),i(t,n,r)}function s(e,t,n){return Math.max(e,Math.min(t,n))}function o(e){return e%2==0?e:e+1}function i(e,t,n){const r=e[t];e[t]=e[n],e[n]=r}function u(e){let t=0;for(let n=0;n<e.length;n++)t+=e[n];return t}function l(e,t){const n=Math.random();return t*n+(1-n)*e}function c(e,t){let n=0;for(let r=0;r<e.length;r++){const a=Number(e[r])-Number(t[r]);n+=a*a}return n}function p(e,t){if(!e)throw new Error("string"==typeof t?t:t())}function d(e,t,n=""){p(g(e,t),(()=>n+` Shapes ${e} and ${t} must match`))}function h(e){p(null!=e,(()=>"The input to the tensor constructor must be a non-null value."))}function m(e){if(0===e.length)return 1;let t=e[0];for(let n=1;n<e.length;n++)t*=e[n];return t}function f(e){return 0===e.length}function g(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function y(e){return e%1==0}function b(e){if(null!=Math.tanh)return Math.tanh(e);if(e===1/0)return 1;if(e===-1/0)return-1;{const t=Math.exp(2*e);return(t-1)/(t+1)}}function k(e){const t=Math.ceil(Math.sqrt(e));return[t,Math.ceil(e/t)]}function w(e){const t=new Uint32Array(e);for(let n=0;n<e;++n)t[n]=n;return r(t),t}function v(e,t){return t<=e.length?e:e+" ".repeat(t-e.length)}function N(e,t=(e=>0),n,r){return new Promise(((a,s)=>{let o=0;const i=()=>{if(e())return void a();o++;const u=t(o);null!=n&&o>=n?s():null!=r?r(i,u):setTimeout(i,u)};i()}))}function x(e,t){let n=1,r=-1;for(let t=0;t<e.length;++t)if(e[t]>=0)n*=e[t];else if(-1===e[t]){if(-1!==r)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${r} and dim ${t}`);r=t}else if(e[t]<0)throw Error(`Shapes can not be < 0. Found ${e[t]} at dim ${t}`);if(-1===r){if(t>0&&t!==n)throw Error(`Size(${t}) must match the product of shape ${e}`);return e}if(0===n)throw Error(`Cannot infer the missing size in [${e}] when there are 0 elements`);if(t%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${n}`);const a=e.slice();return a[r]=t/n,a}function S(e,t){const n=t.length;return p((e=null==e?t.map(((e,t)=>t)):[].concat(e)).every((e=>e>=-n&&e<n)),(()=>`All values in axis param must be in range [-${n}, ${n}) but got axis ${e}`)),p(e.every((e=>y(e))),(()=>`All values in axis param must be integers but got axis ${e}`)),e.map((e=>e<0?n+e:e))}function T(e,t){const n=[],r=[],a=null!=t&&Array.isArray(t)&&0===t.length,s=null==t||a?null:S(t,e).sort();let o=0;for(let t=0;t<e.length;++t){if(null!=s){if(s[o]===t&&1!==e[t])throw new Error(`Can't squeeze axis ${t} since its dim '${e[t]}' is not 1`);(null==s[o]||s[o]>t)&&1===e[t]&&(n.push(e[t]),r.push(t)),s[o]<=t&&o++}1!==e[t]&&(n.push(e[t]),r.push(t))}return{newShape:n,keptDims:r}}function I(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else{if("bool"!==e)throw new Error(`Unknown data type ${e}`);n=new Uint8Array(t)}return n}function _(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else if("bool"===e)n=new Uint8Array(t);else{if("string"!==e)throw new Error(`Unknown data type ${e}`);n=new Array(t)}return n}function E(e,t){for(let n=0;n<e.length;n++){const r=e[n];if(isNaN(r)||!isFinite(r))throw Error(`A tensor of type ${t} being uploaded contains ${r}.`)}}function A(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}function M(e,t){return!("complex64"===t||"float32"===t&&"complex64"!==e||"int32"===t&&"float32"!==e&&"complex64"!==e||"bool"===t&&"bool"===e)}function D(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw new Error(`Unknown dtype ${e}`)}function F(e){if(null==e)return 0;let t=0;return e.forEach((e=>t+=e.length)),t}function $(e){return"string"==typeof e||e instanceof String}function O(e){return"boolean"==typeof e}function B(e){return"number"==typeof e}function R(e){return Array.isArray(e)?R(e[0]):e instanceof Float32Array?"float32":e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray?"int32":B(e)?"float32":$(e)?"string":O(e)?"bool":"float32"}function V(e){return!!(e&&e.constructor&&e.call&&e.apply)}function C(e,t){for(let n=t;n<e;++n)if(e%n==0)return n;return e}function z(e){const t=e.length;if(t<2)return[];const n=new Array(t-1);n[t-2]=e[t-1];for(let r=t-3;r>=0;--r)n[r]=n[r+1]*e[r+1];return n}function P(e,t,n,r=!1){const a=new Array;if(1===t.length){const s=t[0]*(r?2:1);for(let t=0;t<s;t++)a[t]=n[e+t]}else{const s=t[0],o=t.slice(1),i=o.reduce(((e,t)=>e*t))*(r?2:1);for(let t=0;t<s;t++)a[t]=P(e+t*i,o,n,r)}return a}function L(e,t,n=!1){if(0===e.length)return t[0];const r=e.reduce(((e,t)=>e*t))*(n?2:1);if(0===r)return[];if(r!==t.length)throw new Error(`[${e}] does not match the input size ${t.length}${n?" for a complex tensor":""}.`);return P(0,e,t,n)}function H(e,t){if(Array.isArray(e))return e;if("float32"===t)return e instanceof Float32Array?e:new Float32Array(e);if("int32"===t)return e instanceof Int32Array?e:new Int32Array(e);if("bool"===t||"string"===t)return Uint8Array.from(new Int32Array(e));throw new Error(`Unknown dtype ${t}`)}function W(e,t){const n=G(e,t);for(let e=0;e<n.length;e++)n[e]=1;return n}function G(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw new Error(`Unknown data type ${t}`)}function U(e,t){const n=e.reduce(((e,t)=>e*t),1);if(null==t||"float32"===t)return L(e,new Float32Array(n));if("int32"===t)return L(e,new Int32Array(n));if("bool"===t)return L(e,new Uint8Array(n));throw new Error(`Unknown data type ${t}`)}function q(e){e.forEach((t=>{p(Number.isInteger(t)&&t>=0,(()=>`Tensor must have a shape comprised of positive integers but got shape [${e}].`))}))}function j(e,t,n){if(0===t)return 0;if(1===t)return e[0];let r=e[e.length-1];for(let t=0;t<e.length-1;++t)r+=n[t]*e[t];return r}function K(e,t,n){if(0===t)return[];if(1===t)return[e];const r=new Array(t);for(let t=0;t<r.length-1;++t)r[t]=Math.floor(e/n[t]),e-=r[t]*n[t];return r[r.length-1]=e,r}function X(e){return e&&e.then&&"function"==typeof e.then}n.d(t,{AE:()=>b,Cq:()=>h,D2:()=>R,D5:()=>E,E7:()=>c,EC:()=>S,GN:()=>y,GX:()=>L,HD:()=>$,JZ:()=>x,KS:()=>H,LF:()=>i,LP:()=>A,Mu:()=>q,NA:()=>m,NE:()=>K,QB:()=>M,Sm:()=>u,TV:()=>r,U$:()=>w,Ub:()=>F,WD:()=>N,WP:()=>I,YP:()=>k,bT:()=>D,bj:()=>l,bp:()=>T,cO:()=>g,d7:()=>a,e3:()=>z,hj:()=>B,hu:()=>p,jP:()=>C,jn:()=>O,k5:()=>d,l6:()=>U,mf:()=>V,nY:()=>o,oj:()=>v,p8:()=>W,qy:()=>j,rQ:()=>_,tI:()=>X,uZ:()=>s,wT:()=>G,xH:()=>f})},7808:e=>{e.exports=n;var t=null;try{t=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(e){}function n(e,t,n){this.low=0|e,this.high=0|t,this.unsigned=!!n}function r(e){return!0===(e&&e.__isLong__)}n.prototype.__isLong__,Object.defineProperty(n.prototype,"__isLong__",{value:!0}),n.isLong=r;var a={},s={};function o(e,t){var n,r,o;return t?(o=0<=(e>>>=0)&&e<256)&&(r=s[e])?r:(n=u(e,(0|e)<0?-1:0,!0),o&&(s[e]=n),n):(o=-128<=(e|=0)&&e<128)&&(r=a[e])?r:(n=u(e,e<0?-1:0,!1),o&&(a[e]=n),n)}function i(e,t){if(isNaN(e))return t?y:g;if(t){if(e<0)return y;if(e>=h)return N}else{if(e<=-m)return x;if(e+1>=m)return v}return e<0?i(-e,t).neg():u(e%d|0,e/d|0,t)}function u(e,t,r){return new n(e,t,r)}n.fromInt=o,n.fromNumber=i,n.fromBits=u;var l=Math.pow;function c(e,t,n){if(0===e.length)throw Error("empty string");if("NaN"===e||"Infinity"===e||"+Infinity"===e||"-Infinity"===e)return g;if("number"==typeof t?(n=t,t=!1):t=!!t,(n=n||10)<2||36<n)throw RangeError("radix");var r;if((r=e.indexOf("-"))>0)throw Error("interior hyphen");if(0===r)return c(e.substring(1),t,n).neg();for(var a=i(l(n,8)),s=g,o=0;o<e.length;o+=8){var u=Math.min(8,e.length-o),p=parseInt(e.substring(o,o+u),n);if(u<8){var d=i(l(n,u));s=s.mul(d).add(i(p))}else s=(s=s.mul(a)).add(i(p))}return s.unsigned=t,s}function p(e,t){return"number"==typeof e?i(e,t):"string"==typeof e?c(e,t):u(e.low,e.high,"boolean"==typeof t?t:e.unsigned)}n.fromString=c,n.fromValue=p;var d=4294967296,h=d*d,m=h/2,f=o(1<<24),g=o(0);n.ZERO=g;var y=o(0,!0);n.UZERO=y;var b=o(1);n.ONE=b;var k=o(1,!0);n.UONE=k;var w=o(-1);n.NEG_ONE=w;var v=u(-1,2147483647,!1);n.MAX_VALUE=v;var N=u(-1,-1,!0);n.MAX_UNSIGNED_VALUE=N;var x=u(0,-2147483648,!1);n.MIN_VALUE=x;var S=n.prototype;S.toInt=function(){return this.unsigned?this.low>>>0:this.low},S.toNumber=function(){return this.unsigned?(this.high>>>0)*d+(this.low>>>0):this.high*d+(this.low>>>0)},S.toString=function(e){if((e=e||10)<2||36<e)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(x)){var t=i(e),n=this.div(t),r=n.mul(t).sub(this);return n.toString(e)+r.toInt().toString(e)}return"-"+this.neg().toString(e)}for(var a=i(l(e,6),this.unsigned),s=this,o="";;){var u=s.div(a),c=(s.sub(u.mul(a)).toInt()>>>0).toString(e);if((s=u).isZero())return c+o;for(;c.length<6;)c="0"+c;o=""+c+o}},S.getHighBits=function(){return this.high},S.getHighBitsUnsigned=function(){return this.high>>>0},S.getLowBits=function(){return this.low},S.getLowBitsUnsigned=function(){return this.low>>>0},S.getNumBitsAbs=function(){if(this.isNegative())return this.eq(x)?64:this.neg().getNumBitsAbs();for(var e=0!=this.high?this.high:this.low,t=31;t>0&&0==(e&1<<t);t--);return 0!=this.high?t+33:t+1},S.isZero=function(){return 0===this.high&&0===this.low},S.eqz=S.isZero,S.isNegative=function(){return!this.unsigned&&this.high<0},S.isPositive=function(){return this.unsigned||this.high>=0},S.isOdd=function(){return 1==(1&this.low)},S.isEven=function(){return 0==(1&this.low)},S.equals=function(e){return r(e)||(e=p(e)),(this.unsigned===e.unsigned||this.high>>>31!=1||e.high>>>31!=1)&&this.high===e.high&&this.low===e.low},S.eq=S.equals,S.notEquals=function(e){return!this.eq(e)},S.neq=S.notEquals,S.ne=S.notEquals,S.lessThan=function(e){return this.comp(e)<0},S.lt=S.lessThan,S.lessThanOrEqual=function(e){return this.comp(e)<=0},S.lte=S.lessThanOrEqual,S.le=S.lessThanOrEqual,S.greaterThan=function(e){return this.comp(e)>0},S.gt=S.greaterThan,S.greaterThanOrEqual=function(e){return this.comp(e)>=0},S.gte=S.greaterThanOrEqual,S.ge=S.greaterThanOrEqual,S.compare=function(e){if(r(e)||(e=p(e)),this.eq(e))return 0;var t=this.isNegative(),n=e.isNegative();return t&&!n?-1:!t&&n?1:this.unsigned?e.high>>>0>this.high>>>0||e.high===this.high&&e.low>>>0>this.low>>>0?-1:1:this.sub(e).isNegative()?-1:1},S.comp=S.compare,S.negate=function(){return!this.unsigned&&this.eq(x)?x:this.not().add(b)},S.neg=S.negate,S.add=function(e){r(e)||(e=p(e));var t=this.high>>>16,n=65535&this.high,a=this.low>>>16,s=65535&this.low,o=e.high>>>16,i=65535&e.high,l=e.low>>>16,c=0,d=0,h=0,m=0;return h+=(m+=s+(65535&e.low))>>>16,d+=(h+=a+l)>>>16,c+=(d+=n+i)>>>16,c+=t+o,u((h&=65535)<<16|(m&=65535),(c&=65535)<<16|(d&=65535),this.unsigned)},S.subtract=function(e){return r(e)||(e=p(e)),this.add(e.neg())},S.sub=S.subtract,S.multiply=function(e){if(this.isZero())return g;if(r(e)||(e=p(e)),t)return u(t.mul(this.low,this.high,e.low,e.high),t.get_high(),this.unsigned);if(e.isZero())return g;if(this.eq(x))return e.isOdd()?x:g;if(e.eq(x))return this.isOdd()?x:g;if(this.isNegative())return e.isNegative()?this.neg().mul(e.neg()):this.neg().mul(e).neg();if(e.isNegative())return this.mul(e.neg()).neg();if(this.lt(f)&&e.lt(f))return i(this.toNumber()*e.toNumber(),this.unsigned);var n=this.high>>>16,a=65535&this.high,s=this.low>>>16,o=65535&this.low,l=e.high>>>16,c=65535&e.high,d=e.low>>>16,h=65535&e.low,m=0,y=0,b=0,k=0;return b+=(k+=o*h)>>>16,y+=(b+=s*h)>>>16,b&=65535,y+=(b+=o*d)>>>16,m+=(y+=a*h)>>>16,y&=65535,m+=(y+=s*d)>>>16,y&=65535,m+=(y+=o*c)>>>16,m+=n*h+a*d+s*c+o*l,u((b&=65535)<<16|(k&=65535),(m&=65535)<<16|(y&=65535),this.unsigned)},S.mul=S.multiply,S.divide=function(e){if(r(e)||(e=p(e)),e.isZero())throw Error("division by zero");var n,a,s;if(t)return this.unsigned||-2147483648!==this.high||-1!==e.low||-1!==e.high?u((this.unsigned?t.div_u:t.div_s)(this.low,this.high,e.low,e.high),t.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?y:g;if(this.unsigned){if(e.unsigned||(e=e.toUnsigned()),e.gt(this))return y;if(e.gt(this.shru(1)))return k;s=y}else{if(this.eq(x))return e.eq(b)||e.eq(w)?x:e.eq(x)?b:(n=this.shr(1).div(e).shl(1)).eq(g)?e.isNegative()?b:w:(a=this.sub(e.mul(n)),s=n.add(a.div(e)));if(e.eq(x))return this.unsigned?y:g;if(this.isNegative())return e.isNegative()?this.neg().div(e.neg()):this.neg().div(e).neg();if(e.isNegative())return this.div(e.neg()).neg();s=g}for(a=this;a.gte(e);){n=Math.max(1,Math.floor(a.toNumber()/e.toNumber()));for(var o=Math.ceil(Math.log(n)/Math.LN2),c=o<=48?1:l(2,o-48),d=i(n),h=d.mul(e);h.isNegative()||h.gt(a);)h=(d=i(n-=c,this.unsigned)).mul(e);d.isZero()&&(d=b),s=s.add(d),a=a.sub(h)}return s},S.div=S.divide,S.modulo=function(e){return r(e)||(e=p(e)),t?u((this.unsigned?t.rem_u:t.rem_s)(this.low,this.high,e.low,e.high),t.get_high(),this.unsigned):this.sub(this.div(e).mul(e))},S.mod=S.modulo,S.rem=S.modulo,S.not=function(){return u(~this.low,~this.high,this.unsigned)},S.and=function(e){return r(e)||(e=p(e)),u(this.low&e.low,this.high&e.high,this.unsigned)},S.or=function(e){return r(e)||(e=p(e)),u(this.low|e.low,this.high|e.high,this.unsigned)},S.xor=function(e){return r(e)||(e=p(e)),u(this.low^e.low,this.high^e.high,this.unsigned)},S.shiftLeft=function(e){return r(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?u(this.low<<e,this.high<<e|this.low>>>32-e,this.unsigned):u(0,this.low<<e-32,this.unsigned)},S.shl=S.shiftLeft,S.shiftRight=function(e){return r(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?u(this.low>>>e|this.high<<32-e,this.high>>e,this.unsigned):u(this.high>>e-32,this.high>=0?0:-1,this.unsigned)},S.shr=S.shiftRight,S.shiftRightUnsigned=function(e){if(r(e)&&(e=e.toInt()),0==(e&=63))return this;var t=this.high;return e<32?u(this.low>>>e|t<<32-e,t>>>e,this.unsigned):u(32===e?t:t>>>e-32,0,this.unsigned)},S.shru=S.shiftRightUnsigned,S.shr_u=S.shiftRightUnsigned,S.toSigned=function(){return this.unsigned?u(this.low,this.high,!1):this},S.toUnsigned=function(){return this.unsigned?this:u(this.low,this.high,!0)},S.toBytes=function(e){return e?this.toBytesLE():this.toBytesBE()},S.toBytesLE=function(){var e=this.high,t=this.low;return[255&t,t>>>8&255,t>>>16&255,t>>>24,255&e,e>>>8&255,e>>>16&255,e>>>24]},S.toBytesBE=function(){var e=this.high,t=this.low;return[e>>>24,e>>>16&255,e>>>8&255,255&e,t>>>24,t>>>16&255,t>>>8&255,255&t]},n.fromBytes=function(e,t,r){return r?n.fromBytesLE(e,t):n.fromBytesBE(e,t)},n.fromBytesLE=function(e,t){return new n(e[0]|e[1]<<8|e[2]<<16|e[3]<<24,e[4]|e[5]<<8|e[6]<<16|e[7]<<24,t)},n.fromBytesBE=function(e,t){return new n(e[4]<<24|e[5]<<16|e[6]<<8|e[7],e[0]<<24|e[1]<<16|e[2]<<8|e[3],t)}},521:(e,t,n)=>{var r=n(8421),a=n(2824),s=n(244),o=n(330),i=n(5028),u=n(3929),l=n(3154);l.alea=r,l.xor128=a,l.xorwow=s,l.xorshift7=o,l.xor4096=i,l.tychei=u,e.exports=l},8421:function(e,t,n){var r;!function(e,a,s){function o(e){var t,n=this,r=(t=4022871197,function(e){e=String(e);for(var n=0;n<e.length;n++){var r=.02519603282416938*(t+=e.charCodeAt(n));r-=t=r>>>0,t=(r*=t)>>>0,t+=4294967296*(r-=t)}return 2.3283064365386963e-10*(t>>>0)});n.next=function(){var e=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=e-(n.c=0|e)},n.c=1,n.s0=r(" "),n.s1=r(" "),n.s2=r(" "),n.s0-=r(e),n.s0<0&&(n.s0+=1),n.s1-=r(e),n.s1<0&&(n.s1+=1),n.s2-=r(e),n.s2<0&&(n.s2+=1),r=null}function i(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function u(e,t){var n=new o(e),r=t&&t.state,a=n.next;return a.int32=function(){return 4294967296*n.next()|0},a.double=function(){return a()+11102230246251565e-32*(2097152*a()|0)},a.quick=a,r&&("object"==typeof r&&i(r,n),a.state=function(){return i(n,{})}),a}a&&a.exports?a.exports=u:n.amdD&&n.amdO?void 0===(r=function(){return u}.call(t,n,t,a))||(a.exports=r):this.alea=u}(0,e=n.nmd(e),n.amdD)},3929:function(e,t,n){var r;!function(e,a,s){function o(e){var t=this,n="";t.next=function(){var e=t.b,n=t.c,r=t.d,a=t.a;return e=e<<25^e>>>7^n,n=n-r|0,r=r<<24^r>>>8^a,a=a-e|0,t.b=e=e<<20^e>>>12^n,t.c=n=n-r|0,t.d=r<<16^n>>>16^a,t.a=a-e|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):n+=e;for(var r=0;r<n.length+20;r++)t.b^=0|n.charCodeAt(r),t.next()}function i(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function u(e,t){var n=new o(e),r=t&&t.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},a.int32=n.next,a.quick=a,r&&("object"==typeof r&&i(r,n),a.state=function(){return i(n,{})}),a}a&&a.exports?a.exports=u:n.amdD&&n.amdO?void 0===(r=function(){return u}.call(t,n,t,a))||(a.exports=r):this.tychei=u}(0,e=n.nmd(e),n.amdD)},2824:function(e,t,n){var r;!function(e,a,s){function o(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),t.next()}function i(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function u(e,t){var n=new o(e),r=t&&t.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},a.int32=n.next,a.quick=a,r&&("object"==typeof r&&i(r,n),a.state=function(){return i(n,{})}),a}a&&a.exports?a.exports=u:n.amdD&&n.amdO?void 0===(r=function(){return u}.call(t,n,t,a))||(a.exports=r):this.xor128=u}(0,e=n.nmd(e),n.amdD)},5028:function(e,t,n){var r;!function(e,a,s){function o(e){var t=this;t.next=function(){var e,n,r=t.w,a=t.X,s=t.i;return t.w=r=r+1640531527|0,n=a[s+34&127],e=a[s=s+1&127],n^=n<<13,e^=e<<17,n^=n>>>15,e^=e>>>12,n=a[s]=n^e,t.i=s,n+(r^r>>>16)|0},function(e,t){var n,r,a,s,o,i=[],u=128;for(t===(0|t)?(r=t,t=null):(t+="\0",r=0,u=Math.max(u,t.length)),a=0,s=-32;s<u;++s)t&&(r^=t.charCodeAt((s+32)%t.length)),0===s&&(o=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,s>=0&&(o=o+1640531527|0,a=0==(n=i[127&s]^=r+o)?a+1:0);for(a>=128&&(i[127&(t&&t.length||0)]=-1),a=127,s=512;s>0;--s)r=i[a+34&127],n=i[a=a+1&127],r^=r<<13,n^=n<<17,r^=r>>>15,n^=n>>>12,i[a]=r^n;e.w=o,e.X=i,e.i=a}(t,e)}function i(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function u(e,t){null==e&&(e=+new Date);var n=new o(e),r=t&&t.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},a.int32=n.next,a.quick=a,r&&(r.X&&i(r,n),a.state=function(){return i(n,{})}),a}a&&a.exports?a.exports=u:n.amdD&&n.amdO?void 0===(r=function(){return u}.call(t,n,t,a))||(a.exports=r):this.xor4096=u}(0,e=n.nmd(e),n.amdD)},330:function(e,t,n){var r;!function(e,a,s){function o(e){var t=this;t.next=function(){var e,n,r=t.x,a=t.i;return e=r[a],n=(e^=e>>>7)^e<<24,n^=(e=r[a+1&7])^e>>>10,n^=(e=r[a+3&7])^e>>>3,n^=(e=r[a+4&7])^e<<7,e=r[a+7&7],n^=(e^=e<<13)^e<<9,r[a]=n,t.i=a+1&7,n},function(e,t){var n,r=[];if(t===(0|t))r[0]=t;else for(t=""+t,n=0;n<t.length;++n)r[7&n]=r[7&n]<<15^t.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n?r[7]=-1:r[n],e.x=r,e.i=0,n=256;n>0;--n)e.next()}(t,e)}function i(e,t){return t.x=e.x.slice(),t.i=e.i,t}function u(e,t){null==e&&(e=+new Date);var n=new o(e),r=t&&t.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},a.int32=n.next,a.quick=a,r&&(r.x&&i(r,n),a.state=function(){return i(n,{})}),a}a&&a.exports?a.exports=u:n.amdD&&n.amdO?void 0===(r=function(){return u}.call(t,n,t,a))||(a.exports=r):this.xorshift7=u}(0,e=n.nmd(e),n.amdD)},244:function(e,t,n){var r;!function(e,a,s){function o(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),r==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function i(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function u(e,t){var n=new o(e),r=t&&t.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},a.int32=n.next,a.quick=a,r&&("object"==typeof r&&i(r,n),a.state=function(){return i(n,{})}),a}a&&a.exports?a.exports=u:n.amdD&&n.amdO?void 0===(r=function(){return u}.call(t,n,t,a))||(a.exports=r):this.xorwow=u}(0,e=n.nmd(e),n.amdD)},3154:function(e,t,n){var r;!function(a,s,o){var i,u=256,l=o.pow(u,6),c=o.pow(2,52),p=2*c,d=255;function h(e,t,n){var r=[],d=y(g((t=1==t?{entropy:!0}:t||{}).entropy?[e,b(s)]:null==e?function(){try{var e;return i&&(e=i.randomBytes)?e=e(u):(e=new Uint8Array(u),(a.crypto||a.msCrypto).getRandomValues(e)),b(e)}catch(e){var t=a.navigator,n=t&&t.plugins;return[+new Date,a,n,a.screen,b(s)]}}():e,3),r),h=new m(r),k=function(){for(var e=h.g(6),t=l,n=0;e<c;)e=(e+n)*u,t*=u,n=h.g(1);for(;e>=p;)e/=2,t/=2,n>>>=1;return(e+n)/t};return k.int32=function(){return 0|h.g(4)},k.quick=function(){return h.g(4)/4294967296},k.double=k,y(b(h.S),s),(t.pass||n||function(e,t,n,r){return r&&(r.S&&f(r,h),e.state=function(){return f(h,{})}),n?(o.random=e,t):e})(k,d,"global"in t?t.global:this==o,t.state)}function m(e){var t,n=e.length,r=this,a=0,s=r.i=r.j=0,o=r.S=[];for(n||(e=[n++]);a<u;)o[a]=a++;for(a=0;a<u;a++)o[a]=o[s=d&s+e[a%n]+(t=o[a])],o[s]=t;(r.g=function(e){for(var t,n=0,a=r.i,s=r.j,o=r.S;e--;)t=o[a=d&a+1],n=n*u+o[d&(o[a]=o[s=d&s+t])+(o[s]=t)];return r.i=a,r.j=s,n})(u)}function f(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function g(e,t){var n,r=[],a=typeof e;if(t&&"object"==a)for(n in e)try{r.push(g(e[n],t-1))}catch(e){}return r.length?r:"string"==a?e:e+"\0"}function y(e,t){for(var n,r=e+"",a=0;a<r.length;)t[d&a]=d&(n^=19*t[d&a])+r.charCodeAt(a++);return b(t)}function b(e){return String.fromCharCode.apply(0,e)}if(y(o.random(),s),e.exports){e.exports=h;try{i=n(660)}catch(e){}}else void 0===(r=function(){return h}.call(t,n,t,e))||(e.exports=r)}("undefined"!=typeof self?self:this,[],Math)}}]);